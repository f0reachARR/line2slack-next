//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = require('./talk_types');
//HELPER FUNCTIONS AND STRUCTURES

const AccountSupervisorService_registerVirtualAccount_args = class {
  constructor(args) {
    this.locale = null;
    this.encryptedVirtualUserId = null;
    this.encryptedPassword = null;
    if (args) {
      if (args.locale !== undefined && args.locale !== null) {
        this.locale = args.locale;
      }
      if (args.encryptedVirtualUserId !== undefined && args.encryptedVirtualUserId !== null) {
        this.encryptedVirtualUserId = args.encryptedVirtualUserId;
      }
      if (args.encryptedPassword !== undefined && args.encryptedPassword !== null) {
        this.encryptedPassword = args.encryptedPassword;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.locale = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.encryptedVirtualUserId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.encryptedPassword = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccountSupervisorService_registerVirtualAccount_args');
    if (this.locale !== null && this.locale !== undefined) {
      output.writeFieldBegin('locale', Thrift.Type.STRING, 2);
      output.writeString(this.locale);
      output.writeFieldEnd();
    }
    if (this.encryptedVirtualUserId !== null && this.encryptedVirtualUserId !== undefined) {
      output.writeFieldBegin('encryptedVirtualUserId', Thrift.Type.STRING, 3);
      output.writeString(this.encryptedVirtualUserId);
      output.writeFieldEnd();
    }
    if (this.encryptedPassword !== null && this.encryptedPassword !== undefined) {
      output.writeFieldBegin('encryptedPassword', Thrift.Type.STRING, 4);
      output.writeString(this.encryptedPassword);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AccountSupervisorService_registerVirtualAccount_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccountSupervisorService_registerVirtualAccount_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AccountSupervisorService_unregisterVirtualAccount_args = class {
  constructor(args) {
    this.virtualMid = null;
    if (args) {
      if (args.virtualMid !== undefined && args.virtualMid !== null) {
        this.virtualMid = args.virtualMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.virtualMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccountSupervisorService_unregisterVirtualAccount_args');
    if (this.virtualMid !== null && this.virtualMid !== undefined) {
      output.writeFieldBegin('virtualMid', Thrift.Type.STRING, 2);
      output.writeString(this.virtualMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AccountSupervisorService_unregisterVirtualAccount_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccountSupervisorService_unregisterVirtualAccount_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AccountSupervisorService_requestVirtualAccountPasswordChange_args = class {
  constructor(args) {
    this.virtualMid = null;
    this.encryptedVirtualUserId = null;
    this.encryptedOldPassword = null;
    this.encryptedNewPassword = null;
    if (args) {
      if (args.virtualMid !== undefined && args.virtualMid !== null) {
        this.virtualMid = args.virtualMid;
      }
      if (args.encryptedVirtualUserId !== undefined && args.encryptedVirtualUserId !== null) {
        this.encryptedVirtualUserId = args.encryptedVirtualUserId;
      }
      if (args.encryptedOldPassword !== undefined && args.encryptedOldPassword !== null) {
        this.encryptedOldPassword = args.encryptedOldPassword;
      }
      if (args.encryptedNewPassword !== undefined && args.encryptedNewPassword !== null) {
        this.encryptedNewPassword = args.encryptedNewPassword;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.virtualMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.encryptedVirtualUserId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.encryptedOldPassword = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.encryptedNewPassword = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccountSupervisorService_requestVirtualAccountPasswordChange_args');
    if (this.virtualMid !== null && this.virtualMid !== undefined) {
      output.writeFieldBegin('virtualMid', Thrift.Type.STRING, 2);
      output.writeString(this.virtualMid);
      output.writeFieldEnd();
    }
    if (this.encryptedVirtualUserId !== null && this.encryptedVirtualUserId !== undefined) {
      output.writeFieldBegin('encryptedVirtualUserId', Thrift.Type.STRING, 3);
      output.writeString(this.encryptedVirtualUserId);
      output.writeFieldEnd();
    }
    if (this.encryptedOldPassword !== null && this.encryptedOldPassword !== undefined) {
      output.writeFieldBegin('encryptedOldPassword', Thrift.Type.STRING, 4);
      output.writeString(this.encryptedOldPassword);
      output.writeFieldEnd();
    }
    if (this.encryptedNewPassword !== null && this.encryptedNewPassword !== undefined) {
      output.writeFieldBegin('encryptedNewPassword', Thrift.Type.STRING, 5);
      output.writeString(this.encryptedNewPassword);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AccountSupervisorService_requestVirtualAccountPasswordChange_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccountSupervisorService_requestVirtualAccountPasswordChange_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AccountSupervisorService_notifyEmailConfirmationResult_args = class {
  constructor(args) {
    this.parameterMap = null;
    if (args) {
      if (args.parameterMap !== undefined && args.parameterMap !== null) {
        this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.MAP) {
          this.parameterMap = {};
          const _rtmp3782 = input.readMapBegin();
          const _size781 = _rtmp3782.size || 0;
          for (let _i783 = 0; _i783 < _size781; ++_i783) {
            let key784 = null;
            let val785 = null;
            key784 = input.readString();
            val785 = input.readString();
            this.parameterMap[key784] = val785;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccountSupervisorService_notifyEmailConfirmationResult_args');
    if (this.parameterMap !== null && this.parameterMap !== undefined) {
      output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 2);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
      for (let kiter786 in this.parameterMap) {
        if (this.parameterMap.hasOwnProperty(kiter786)) {
          let viter787 = this.parameterMap[kiter786];
          output.writeString(kiter786);
          output.writeString(viter787);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AccountSupervisorService_notifyEmailConfirmationResult_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccountSupervisorService_notifyEmailConfirmationResult_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AccountSupervisorService_requestVirtualAccountPasswordSet_args = class {
  constructor(args) {
    this.virtualMid = null;
    this.encryptedVirtualUserId = null;
    this.encryptedNewPassword = null;
    if (args) {
      if (args.virtualMid !== undefined && args.virtualMid !== null) {
        this.virtualMid = args.virtualMid;
      }
      if (args.encryptedVirtualUserId !== undefined && args.encryptedVirtualUserId !== null) {
        this.encryptedVirtualUserId = args.encryptedVirtualUserId;
      }
      if (args.encryptedNewPassword !== undefined && args.encryptedNewPassword !== null) {
        this.encryptedNewPassword = args.encryptedNewPassword;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.virtualMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.encryptedVirtualUserId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.encryptedNewPassword = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccountSupervisorService_requestVirtualAccountPasswordSet_args');
    if (this.virtualMid !== null && this.virtualMid !== undefined) {
      output.writeFieldBegin('virtualMid', Thrift.Type.STRING, 2);
      output.writeString(this.virtualMid);
      output.writeFieldEnd();
    }
    if (this.encryptedVirtualUserId !== null && this.encryptedVirtualUserId !== undefined) {
      output.writeFieldBegin('encryptedVirtualUserId', Thrift.Type.STRING, 3);
      output.writeString(this.encryptedVirtualUserId);
      output.writeFieldEnd();
    }
    if (this.encryptedNewPassword !== null && this.encryptedNewPassword !== undefined) {
      output.writeFieldBegin('encryptedNewPassword', Thrift.Type.STRING, 4);
      output.writeString(this.encryptedNewPassword);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AccountSupervisorService_requestVirtualAccountPasswordSet_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccountSupervisorService_requestVirtualAccountPasswordSet_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AccountSupervisorService_getRSAKey_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccountSupervisorService_getRSAKey_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AccountSupervisorService_getRSAKey_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.RSAKey(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.RSAKey();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccountSupervisorService_getRSAKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AccountSupervisorServiceClient = exports.Client = class {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  registerVirtualAccount (locale, encryptedVirtualUserId, encryptedPassword) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword);
    });
  }

  send_registerVirtualAccount (locale, encryptedVirtualUserId, encryptedPassword) {
    const output = new this.pClass(this.output);
    const params = {
      locale: locale,
      encryptedVirtualUserId: encryptedVirtualUserId,
      encryptedPassword: encryptedPassword
    };
    const args = new AccountSupervisorService_registerVirtualAccount_args(params);
    try {
      output.writeMessageBegin('registerVirtualAccount', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_registerVirtualAccount (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AccountSupervisorService_registerVirtualAccount_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('registerVirtualAccount failed: unknown result');
  }

  unregisterVirtualAccount (virtualMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_unregisterVirtualAccount(virtualMid);
    });
  }

  send_unregisterVirtualAccount (virtualMid) {
    const output = new this.pClass(this.output);
    const params = {
      virtualMid: virtualMid
    };
    const args = new AccountSupervisorService_unregisterVirtualAccount_args(params);
    try {
      output.writeMessageBegin('unregisterVirtualAccount', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_unregisterVirtualAccount (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AccountSupervisorService_unregisterVirtualAccount_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  requestVirtualAccountPasswordChange (virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword);
    });
  }

  send_requestVirtualAccountPasswordChange (virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword) {
    const output = new this.pClass(this.output);
    const params = {
      virtualMid: virtualMid,
      encryptedVirtualUserId: encryptedVirtualUserId,
      encryptedOldPassword: encryptedOldPassword,
      encryptedNewPassword: encryptedNewPassword
    };
    const args = new AccountSupervisorService_requestVirtualAccountPasswordChange_args(params);
    try {
      output.writeMessageBegin('requestVirtualAccountPasswordChange', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_requestVirtualAccountPasswordChange (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AccountSupervisorService_requestVirtualAccountPasswordChange_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  notifyEmailConfirmationResult (parameterMap) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_notifyEmailConfirmationResult(parameterMap);
    });
  }

  send_notifyEmailConfirmationResult (parameterMap) {
    const output = new this.pClass(this.output);
    const params = {
      parameterMap: parameterMap
    };
    const args = new AccountSupervisorService_notifyEmailConfirmationResult_args(params);
    try {
      output.writeMessageBegin('notifyEmailConfirmationResult', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_notifyEmailConfirmationResult (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AccountSupervisorService_notifyEmailConfirmationResult_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  requestVirtualAccountPasswordSet (virtualMid, encryptedVirtualUserId, encryptedNewPassword) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword);
    });
  }

  send_requestVirtualAccountPasswordSet (virtualMid, encryptedVirtualUserId, encryptedNewPassword) {
    const output = new this.pClass(this.output);
    const params = {
      virtualMid: virtualMid,
      encryptedVirtualUserId: encryptedVirtualUserId,
      encryptedNewPassword: encryptedNewPassword
    };
    const args = new AccountSupervisorService_requestVirtualAccountPasswordSet_args(params);
    try {
      output.writeMessageBegin('requestVirtualAccountPasswordSet', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_requestVirtualAccountPasswordSet (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AccountSupervisorService_requestVirtualAccountPasswordSet_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  getRSAKey () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getRSAKey();
    });
  }

  send_getRSAKey () {
    const output = new this.pClass(this.output);
    const args = new AccountSupervisorService_getRSAKey_args();
    try {
      output.writeMessageBegin('getRSAKey', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getRSAKey (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AccountSupervisorService_getRSAKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getRSAKey failed: unknown result');
  }
};
const AccountSupervisorServiceProcessor = exports.Processor = class {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_registerVirtualAccount (seqid, input, output) {
    const args = new AccountSupervisorService_registerVirtualAccount_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.registerVirtualAccount.length === 3) {
      Promise.resolve(this._handler.registerVirtualAccount.bind(this._handler)(
        args.locale,
        args.encryptedVirtualUserId,
        args.encryptedPassword
      )).then(result => {
        const result_obj = new AccountSupervisorService_registerVirtualAccount_result({success: result});
        output.writeMessageBegin("registerVirtualAccount", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AccountSupervisorService_registerVirtualAccount_result(err);
          output.writeMessageBegin("registerVirtualAccount", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerVirtualAccount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.registerVirtualAccount(args.locale, args.encryptedVirtualUserId, args.encryptedPassword, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AccountSupervisorService_registerVirtualAccount_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("registerVirtualAccount", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerVirtualAccount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_unregisterVirtualAccount (seqid, input, output) {
    const args = new AccountSupervisorService_unregisterVirtualAccount_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.unregisterVirtualAccount.length === 1) {
      Promise.resolve(this._handler.unregisterVirtualAccount.bind(this._handler)(
        args.virtualMid
      )).then(result => {
        const result_obj = new AccountSupervisorService_unregisterVirtualAccount_result({success: result});
        output.writeMessageBegin("unregisterVirtualAccount", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AccountSupervisorService_unregisterVirtualAccount_result(err);
          output.writeMessageBegin("unregisterVirtualAccount", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterVirtualAccount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.unregisterVirtualAccount(args.virtualMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AccountSupervisorService_unregisterVirtualAccount_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("unregisterVirtualAccount", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterVirtualAccount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_requestVirtualAccountPasswordChange (seqid, input, output) {
    const args = new AccountSupervisorService_requestVirtualAccountPasswordChange_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.requestVirtualAccountPasswordChange.length === 4) {
      Promise.resolve(this._handler.requestVirtualAccountPasswordChange.bind(this._handler)(
        args.virtualMid,
        args.encryptedVirtualUserId,
        args.encryptedOldPassword,
        args.encryptedNewPassword
      )).then(result => {
        const result_obj = new AccountSupervisorService_requestVirtualAccountPasswordChange_result({success: result});
        output.writeMessageBegin("requestVirtualAccountPasswordChange", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AccountSupervisorService_requestVirtualAccountPasswordChange_result(err);
          output.writeMessageBegin("requestVirtualAccountPasswordChange", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("requestVirtualAccountPasswordChange", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.requestVirtualAccountPasswordChange(args.virtualMid, args.encryptedVirtualUserId, args.encryptedOldPassword, args.encryptedNewPassword, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AccountSupervisorService_requestVirtualAccountPasswordChange_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("requestVirtualAccountPasswordChange", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("requestVirtualAccountPasswordChange", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_notifyEmailConfirmationResult (seqid, input, output) {
    const args = new AccountSupervisorService_notifyEmailConfirmationResult_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.notifyEmailConfirmationResult.length === 1) {
      Promise.resolve(this._handler.notifyEmailConfirmationResult.bind(this._handler)(
        args.parameterMap
      )).then(result => {
        const result_obj = new AccountSupervisorService_notifyEmailConfirmationResult_result({success: result});
        output.writeMessageBegin("notifyEmailConfirmationResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AccountSupervisorService_notifyEmailConfirmationResult_result(err);
          output.writeMessageBegin("notifyEmailConfirmationResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyEmailConfirmationResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.notifyEmailConfirmationResult(args.parameterMap, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AccountSupervisorService_notifyEmailConfirmationResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("notifyEmailConfirmationResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyEmailConfirmationResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_requestVirtualAccountPasswordSet (seqid, input, output) {
    const args = new AccountSupervisorService_requestVirtualAccountPasswordSet_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.requestVirtualAccountPasswordSet.length === 3) {
      Promise.resolve(this._handler.requestVirtualAccountPasswordSet.bind(this._handler)(
        args.virtualMid,
        args.encryptedVirtualUserId,
        args.encryptedNewPassword
      )).then(result => {
        const result_obj = new AccountSupervisorService_requestVirtualAccountPasswordSet_result({success: result});
        output.writeMessageBegin("requestVirtualAccountPasswordSet", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AccountSupervisorService_requestVirtualAccountPasswordSet_result(err);
          output.writeMessageBegin("requestVirtualAccountPasswordSet", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("requestVirtualAccountPasswordSet", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.requestVirtualAccountPasswordSet(args.virtualMid, args.encryptedVirtualUserId, args.encryptedNewPassword, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AccountSupervisorService_requestVirtualAccountPasswordSet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("requestVirtualAccountPasswordSet", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("requestVirtualAccountPasswordSet", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getRSAKey (seqid, input, output) {
    const args = new AccountSupervisorService_getRSAKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getRSAKey.length === 0) {
      Promise.resolve(this._handler.getRSAKey.bind(this._handler)(
      )).then(result => {
        const result_obj = new AccountSupervisorService_getRSAKey_result({success: result});
        output.writeMessageBegin("getRSAKey", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AccountSupervisorService_getRSAKey_result(err);
          output.writeMessageBegin("getRSAKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRSAKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getRSAKey((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AccountSupervisorService_getRSAKey_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getRSAKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRSAKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
