//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = require('./talk_types');
//HELPER FUNCTIONS AND STRUCTURES

const CallService_getUserStatus_args = class {
  constructor(args) {
    this.mid = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserStatus_args');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserStatus_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserStatus_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I32, 0);
      output.writeI32(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_updateProfileAttributeForChannel_args = class {
  constructor(args) {
    this.profileAttribute = null;
    this.value = null;
    if (args) {
      if (args.profileAttribute !== undefined && args.profileAttribute !== null) {
        this.profileAttribute = args.profileAttribute;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = args.value;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.profileAttribute = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.value = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_updateProfileAttributeForChannel_args');
    if (this.profileAttribute !== null && this.profileAttribute !== undefined) {
      output.writeFieldBegin('profileAttribute', Thrift.Type.I32, 2);
      output.writeI32(this.profileAttribute);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRING, 3);
      output.writeString(this.value);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_updateProfileAttributeForChannel_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_updateProfileAttributeForChannel_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_updateExtendedProfileAttribute_args = class {
  constructor(args) {
    this.attr = null;
    this.extendedProfile = null;
    if (args) {
      if (args.attr !== undefined && args.attr !== null) {
        this.attr = args.attr;
      }
      if (args.extendedProfile !== undefined && args.extendedProfile !== null) {
        this.extendedProfile = new ttypes.ExtendedProfile(args.extendedProfile);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.attr = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.extendedProfile = new ttypes.ExtendedProfile();
          this.extendedProfile.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_updateExtendedProfileAttribute_args');
    if (this.attr !== null && this.attr !== undefined) {
      output.writeFieldBegin('attr', Thrift.Type.I32, 1);
      output.writeI32(this.attr);
      output.writeFieldEnd();
    }
    if (this.extendedProfile !== null && this.extendedProfile !== undefined) {
      output.writeFieldBegin('extendedProfile', Thrift.Type.STRUCT, 2);
      this.extendedProfile.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_updateExtendedProfileAttribute_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_updateExtendedProfileAttribute_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getAllSimpleChannelContacts_args = class {
  constructor(args) {
    this.statusSticonFallbackDisabled = null;
    if (args) {
      if (args.statusSticonFallbackDisabled !== undefined && args.statusSticonFallbackDisabled !== null) {
        this.statusSticonFallbackDisabled = args.statusSticonFallbackDisabled;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.statusSticonFallbackDisabled = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getAllSimpleChannelContacts_args');
    if (this.statusSticonFallbackDisabled !== null && this.statusSticonFallbackDisabled !== undefined) {
      output.writeFieldBegin('statusSticonFallbackDisabled', Thrift.Type.BOOL, 1);
      output.writeBool(this.statusSticonFallbackDisabled);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getAllSimpleChannelContacts_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.SimpleChannelContact]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3567 = input.readListBegin();
          const _size566 = _rtmp3567.size || 0;
          for (let _i568 = 0; _i568 < _size566; ++_i568) {
            let elem569 = null;
            elem569 = new ttypes.SimpleChannelContact();
            elem569.read(input);
            this.success.push(elem569);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getAllSimpleChannelContacts_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter570 in this.success) {
        if (this.success.hasOwnProperty(iter570)) {
          iter570 = this.success[iter570];
          iter570.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserIdentities_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserIdentities_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserIdentities_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3572 = input.readMapBegin();
          const _size571 = _rtmp3572.size || 0;
          for (let _i573 = 0; _i573 < _size571; ++_i573) {
            let key574 = null;
            let val575 = null;
            key574 = input.readI32();
            val575 = input.readString();
            this.success[key574] = val575;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserIdentities_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter576 in this.success) {
        if (this.success.hasOwnProperty(kiter576)) {
          let viter577 = this.success[kiter576];
          output.writeI32(kiter576);
          output.writeString(viter577);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_markPaidCallAd_args = class {
  constructor(args) {
    this.dialedNumber = null;
    this.language = null;
    this.disableCallerId = null;
    if (args) {
      if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
        this.dialedNumber = args.dialedNumber;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.disableCallerId !== undefined && args.disableCallerId !== null) {
        this.disableCallerId = args.disableCallerId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.dialedNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.disableCallerId = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_markPaidCallAd_args');
    if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
      output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 2);
      output.writeString(this.dialedNumber);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.disableCallerId !== null && this.disableCallerId !== undefined) {
      output.writeFieldBegin('disableCallerId', Thrift.Type.BOOL, 4);
      output.writeBool(this.disableCallerId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_markPaidCallAd_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.PaidCallDialing(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PaidCallDialing();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_markPaidCallAd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_isGroupMember_args = class {
  constructor(args) {
    this.groupId = null;
    if (args) {
      if (args.groupId !== undefined && args.groupId !== null) {
        this.groupId = args.groupId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.groupId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_isGroupMember_args');
    if (this.groupId !== null && this.groupId !== undefined) {
      output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
      output.writeString(this.groupId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_isGroupMember_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_isGroupMember_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPhoneInfoFromPhoneNumber_args = class {
  constructor(args) {
    this.region = null;
    this.phoneNumber = null;
    if (args) {
      if (args.region !== undefined && args.region !== null) {
        this.region = args.region;
      }
      if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
        this.phoneNumber = args.phoneNumber;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.region = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.phoneNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPhoneInfoFromPhoneNumber_args');
    if (this.region !== null && this.region !== undefined) {
      output.writeFieldBegin('region', Thrift.Type.STRING, 1);
      output.writeString(this.region);
      output.writeFieldEnd();
    }
    if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
      output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 2);
      output.writeString(this.phoneNumber);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPhoneInfoFromPhoneNumber_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.PhoneInfoForChannel(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PhoneInfoForChannel();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPhoneInfoFromPhoneNumber_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_redeemPaidCallVoucher_args = class {
  constructor(args) {
    this.serial = null;
    this.language = null;
    if (args) {
      if (args.serial !== undefined && args.serial !== null) {
        this.serial = args.serial;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.serial = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_redeemPaidCallVoucher_args');
    if (this.serial !== null && this.serial !== undefined) {
      output.writeFieldBegin('serial', Thrift.Type.STRING, 2);
      output.writeString(this.serial);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_redeemPaidCallVoucher_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.PaidCallRedeemResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PaidCallRedeemResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_redeemPaidCallVoucher_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPreferredDisplayName_args = class {
  constructor(args) {
    this.mids = null;
    if (args) {
      if (args.mids !== undefined && args.mids !== null) {
        this.mids = Thrift.copyList(args.mids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.mids = [];
          const _rtmp3579 = input.readListBegin();
          const _size578 = _rtmp3579.size || 0;
          for (let _i580 = 0; _i580 < _size578; ++_i580) {
            let elem581 = null;
            elem581 = input.readString();
            this.mids.push(elem581);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPreferredDisplayName_args');
    if (this.mids !== null && this.mids !== undefined) {
      output.writeFieldBegin('mids', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.mids.length);
      for (let iter582 in this.mids) {
        if (this.mids.hasOwnProperty(iter582)) {
          iter582 = this.mids[iter582];
          output.writeString(iter582);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPreferredDisplayName_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3584 = input.readMapBegin();
          const _size583 = _rtmp3584.size || 0;
          for (let _i585 = 0; _i585 < _size583; ++_i585) {
            let key586 = null;
            let val587 = null;
            key586 = input.readString();
            val587 = input.readString();
            this.success[key586] = val587;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPreferredDisplayName_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter588 in this.success) {
        if (this.success.hasOwnProperty(kiter588)) {
          let viter589 = this.success[kiter588];
          output.writeString(kiter588);
          output.writeString(viter589);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getContactsForChannel_args = class {
  constructor(args) {
    this.ids = null;
    if (args) {
      if (args.ids !== undefined && args.ids !== null) {
        this.ids = Thrift.copyList(args.ids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.ids = [];
          const _rtmp3591 = input.readListBegin();
          const _size590 = _rtmp3591.size || 0;
          for (let _i592 = 0; _i592 < _size590; ++_i592) {
            let elem593 = null;
            elem593 = input.readString();
            this.ids.push(elem593);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getContactsForChannel_args');
    if (this.ids !== null && this.ids !== undefined) {
      output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.ids.length);
      for (let iter594 in this.ids) {
        if (this.ids.hasOwnProperty(iter594)) {
          iter594 = this.ids[iter594];
          output.writeString(iter594);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getContactsForChannel_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.Contact]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3596 = input.readListBegin();
          const _size595 = _rtmp3596.size || 0;
          for (let _i597 = 0; _i597 < _size595; ++_i597) {
            let elem598 = null;
            elem598 = new ttypes.Contact();
            elem598.read(input);
            this.success.push(elem598);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getContactsForChannel_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter599 in this.success) {
        if (this.success.hasOwnProperty(iter599)) {
          iter599 = this.success[iter599];
          iter599.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getCallCreditProducts_args = class {
  constructor(args) {
    this.appStoreCode = null;
    this.pgCode = null;
    this.country = null;
    this.language = null;
    if (args) {
      if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
        this.appStoreCode = args.appStoreCode;
      }
      if (args.pgCode !== undefined && args.pgCode !== null) {
        this.pgCode = args.pgCode;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.appStoreCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.pgCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getCallCreditProducts_args');
    if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
      output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 2);
      output.writeI32(this.appStoreCode);
      output.writeFieldEnd();
    }
    if (this.pgCode !== null && this.pgCode !== undefined) {
      output.writeFieldBegin('pgCode', Thrift.Type.I32, 3);
      output.writeI32(this.pgCode);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 4);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 5);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getCallCreditProducts_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.CoinProductItem]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3601 = input.readListBegin();
          const _size600 = _rtmp3601.size || 0;
          for (let _i602 = 0; _i602 < _size600; ++_i602) {
            let elem603 = null;
            elem603 = new ttypes.CoinProductItem();
            elem603.read(input);
            this.success.push(elem603);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getCallCreditProducts_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter604 in this.success) {
        if (this.success.hasOwnProperty(iter604)) {
          iter604 = this.success[iter604];
          iter604.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getCompactContacts_args = class {
  constructor(args) {
    this.lastModifiedTimestamp = null;
    if (args) {
      if (args.lastModifiedTimestamp !== undefined && args.lastModifiedTimestamp !== null) {
        this.lastModifiedTimestamp = args.lastModifiedTimestamp;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.lastModifiedTimestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getCompactContacts_args');
    if (this.lastModifiedTimestamp !== null && this.lastModifiedTimestamp !== undefined) {
      output.writeFieldBegin('lastModifiedTimestamp', Thrift.Type.I64, 2);
      output.writeI64(this.lastModifiedTimestamp);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getCompactContacts_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.CompactContact]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3606 = input.readListBegin();
          const _size605 = _rtmp3606.size || 0;
          for (let _i607 = 0; _i607 < _size605; ++_i607) {
            let elem608 = null;
            elem608 = new ttypes.CompactContact();
            elem608.read(input);
            this.success.push(elem608);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getCompactContacts_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter609 in this.success) {
        if (this.success.hasOwnProperty(iter609)) {
          iter609 = this.success[iter609];
          iter609.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_notifyNotiCenterEvent_args = class {
  constructor(args) {
    this.event = null;
    if (args) {
      if (args.event !== undefined && args.event !== null) {
        this.event = new ttypes.NotiCenterEventData(args.event);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.event = new ttypes.NotiCenterEventData();
          this.event.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_notifyNotiCenterEvent_args');
    if (this.event !== null && this.event !== undefined) {
      output.writeFieldBegin('event', Thrift.Type.STRUCT, 1);
      this.event.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_notifyNotiCenterEvent_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_notifyNotiCenterEvent_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_isInContact_args = class {
  constructor(args) {
    this.mid = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_isInContact_args');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_isInContact_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_isInContact_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_lookupGroupMembers_args = class {
  constructor(args) {
    this.groupId = null;
    this.mids = null;
    if (args) {
      if (args.groupId !== undefined && args.groupId !== null) {
        this.groupId = args.groupId;
      }
      if (args.mids !== undefined && args.mids !== null) {
        this.mids = Thrift.copyList(args.mids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.groupId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.mids = [];
          const _rtmp3611 = input.readListBegin();
          const _size610 = _rtmp3611.size || 0;
          for (let _i612 = 0; _i612 < _size610; ++_i612) {
            let elem613 = null;
            elem613 = input.readString();
            this.mids.push(elem613);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_lookupGroupMembers_args');
    if (this.groupId !== null && this.groupId !== undefined) {
      output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
      output.writeString(this.groupId);
      output.writeFieldEnd();
    }
    if (this.mids !== null && this.mids !== undefined) {
      output.writeFieldBegin('mids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.mids.length);
      for (let iter614 in this.mids) {
        if (this.mids.hasOwnProperty(iter614)) {
          iter614 = this.mids[iter614];
          output.writeString(iter614);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_lookupGroupMembers_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.SimpleChannelContact]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3616 = input.readListBegin();
          const _size615 = _rtmp3616.size || 0;
          for (let _i617 = 0; _i617 < _size615; ++_i617) {
            let elem618 = null;
            elem618 = new ttypes.SimpleChannelContact();
            elem618.read(input);
            this.success.push(elem618);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_lookupGroupMembers_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter619 in this.success) {
        if (this.success.hasOwnProperty(iter619)) {
          iter619 = this.success[iter619];
          iter619.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getRoomInformation_args = class {
  constructor(args) {
    this.roomMid = null;
    if (args) {
      if (args.roomMid !== undefined && args.roomMid !== null) {
        this.roomMid = args.roomMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.roomMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getRoomInformation_args');
    if (this.roomMid !== null && this.roomMid !== undefined) {
      output.writeFieldBegin('roomMid', Thrift.Type.STRING, 1);
      output.writeString(this.roomMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getRoomInformation_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.Room(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Room();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getRoomInformation_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getGroupCall_args = class {
  constructor(args) {
    this.chatMid = null;
    if (args) {
      if (args.chatMid !== undefined && args.chatMid !== null) {
        this.chatMid = args.chatMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.chatMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getGroupCall_args');
    if (this.chatMid !== null && this.chatMid !== undefined) {
      output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
      output.writeString(this.chatMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getGroupCall_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.GroupCall(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.GroupCall();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getGroupCall_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_isAllowSecondaryDeviceLogin_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_isAllowSecondaryDeviceLogin_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_isAllowSecondaryDeviceLogin_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_isAllowSecondaryDeviceLogin_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPrimaryClientForChannel_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPrimaryClientForChannel_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPrimaryClientForChannel_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SimpleChannelClient(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SimpleChannelClient();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPrimaryClientForChannel_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_createRoomWithBuddy_args = class {
  constructor(args) {
    this.reqSeq = null;
    this.buddyMid = null;
    this.contactIds = null;
    if (args) {
      if (args.reqSeq !== undefined && args.reqSeq !== null) {
        this.reqSeq = args.reqSeq;
      }
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.contactIds !== undefined && args.contactIds !== null) {
        this.contactIds = Thrift.copyList(args.contactIds, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.reqSeq = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.contactIds = [];
          const _rtmp3621 = input.readListBegin();
          const _size620 = _rtmp3621.size || 0;
          for (let _i622 = 0; _i622 < _size620; ++_i622) {
            let elem623 = null;
            elem623 = input.readString();
            this.contactIds.push(elem623);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_createRoomWithBuddy_args');
    if (this.reqSeq !== null && this.reqSeq !== undefined) {
      output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
      output.writeI32(this.reqSeq);
      output.writeFieldEnd();
    }
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.contactIds !== null && this.contactIds !== undefined) {
      output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
      for (let iter624 in this.contactIds) {
        if (this.contactIds.hasOwnProperty(iter624)) {
          iter624 = this.contactIds[iter624];
          output.writeString(iter624);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_createRoomWithBuddy_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.Room(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Room();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_createRoomWithBuddy_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getDisplayName_args = class {
  constructor(args) {
    this.mid = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getDisplayName_args');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getDisplayName_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getDisplayName_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPaidCallMetadata_args = class {
  constructor(args) {
    this.language = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPaidCallMetadata_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPaidCallMetadata_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.PaidCallMetadataResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PaidCallMetadataResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPaidCallMetadata_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getMid_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getMid_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getMid_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getMid_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserCountryForBilling_args = class {
  constructor(args) {
    this.country = null;
    this.remoteIp = null;
    if (args) {
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.remoteIp !== undefined && args.remoteIp !== null) {
        this.remoteIp = args.remoteIp;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.remoteIp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserCountryForBilling_args');
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 2);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.remoteIp !== null && this.remoteIp !== undefined) {
      output.writeFieldBegin('remoteIp', Thrift.Type.STRING, 3);
      output.writeString(this.remoteIp);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserCountryForBilling_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserCountryForBilling_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getFavoriteGroupIdsForChannel_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getFavoriteGroupIdsForChannel_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getFavoriteGroupIdsForChannel_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3626 = input.readListBegin();
          const _size625 = _rtmp3626.size || 0;
          for (let _i627 = 0; _i627 < _size625; ++_i627) {
            let elem628 = null;
            elem628 = input.readString();
            this.success.push(elem628);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getFavoriteGroupIdsForChannel_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter629 in this.success) {
        if (this.success.hasOwnProperty(iter629)) {
          iter629 = this.success[iter629];
          output.writeString(iter629);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPaidCallHistory_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPaidCallHistory_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPaidCallHistory_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.PaidCallHistoryResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PaidCallHistoryResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPaidCallHistory_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_sendPinCodeOperation_args = class {
  constructor(args) {
    this.verifier = null;
    if (args) {
      if (args.verifier !== undefined && args.verifier !== null) {
        this.verifier = args.verifier;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.verifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_sendPinCodeOperation_args');
    if (this.verifier !== null && this.verifier !== undefined) {
      output.writeFieldBegin('verifier', Thrift.Type.STRING, 1);
      output.writeString(this.verifier);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_sendPinCodeOperation_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_sendPinCodeOperation_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_inviteIntoGroupCall_args = class {
  constructor(args) {
    this.chatMid = null;
    this.memberMids = null;
    this.mediaType = null;
    if (args) {
      if (args.chatMid !== undefined && args.chatMid !== null) {
        this.chatMid = args.chatMid;
      }
      if (args.memberMids !== undefined && args.memberMids !== null) {
        this.memberMids = Thrift.copyList(args.memberMids, [null]);
      }
      if (args.mediaType !== undefined && args.mediaType !== null) {
        this.mediaType = args.mediaType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.chatMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.memberMids = [];
          const _rtmp3631 = input.readListBegin();
          const _size630 = _rtmp3631.size || 0;
          for (let _i632 = 0; _i632 < _size630; ++_i632) {
            let elem633 = null;
            elem633 = input.readString();
            this.memberMids.push(elem633);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.mediaType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_inviteIntoGroupCall_args');
    if (this.chatMid !== null && this.chatMid !== undefined) {
      output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
      output.writeString(this.chatMid);
      output.writeFieldEnd();
    }
    if (this.memberMids !== null && this.memberMids !== undefined) {
      output.writeFieldBegin('memberMids', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
      for (let iter634 in this.memberMids) {
        if (this.memberMids.hasOwnProperty(iter634)) {
          iter634 = this.memberMids[iter634];
          output.writeString(iter634);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.mediaType !== null && this.mediaType !== undefined) {
      output.writeFieldBegin('mediaType', Thrift.Type.I32, 4);
      output.writeI32(this.mediaType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_inviteIntoGroupCall_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_inviteIntoGroupCall_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getFriendMids_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getFriendMids_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getFriendMids_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3636 = input.readListBegin();
          const _size635 = _rtmp3636.size || 0;
          for (let _i637 = 0; _i637 < _size635; ++_i637) {
            let elem638 = null;
            elem638 = input.readString();
            this.success.push(elem638);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getFriendMids_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter639 in this.success) {
        if (this.success.hasOwnProperty(iter639)) {
          iter639 = this.success[iter639];
          output.writeString(iter639);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getMetaProfile_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getMetaProfile_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getMetaProfile_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.MetaProfile(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.MetaProfile();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getMetaProfile_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_sendMessageForChannel_args = class {
  constructor(args) {
    this.message = null;
    if (args) {
      if (args.message !== undefined && args.message !== null) {
        this.message = new ttypes.Message(args.message);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.message = new ttypes.Message();
          this.message.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_sendMessageForChannel_args');
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
      this.message.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_sendMessageForChannel_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.Message(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Message();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_sendMessageForChannel_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_activeBuddySubscriberCount_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_activeBuddySubscriberCount_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_activeBuddySubscriberCount_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_activeBuddySubscriberCount_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getCallCreditPurchaseHistory_args = class {
  constructor(args) {
    this.request = null;
    if (args) {
      if (args.request !== undefined && args.request !== null) {
        this.request = new ttypes.CoinHistoryCondition(args.request);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.CoinHistoryCondition();
          this.request.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getCallCreditPurchaseHistory_args');
    if (this.request !== null && this.request !== undefined) {
      output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
      this.request.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getCallCreditPurchaseHistory_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.CoinHistoryResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.CoinHistoryResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getCallCreditPurchaseHistory_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_isRoomMember_args = class {
  constructor(args) {
    this.roomId = null;
    if (args) {
      if (args.roomId !== undefined && args.roomId !== null) {
        this.roomId = args.roomId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.roomId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_isRoomMember_args');
    if (this.roomId !== null && this.roomId !== undefined) {
      output.writeFieldBegin('roomId', Thrift.Type.STRING, 1);
      output.writeString(this.roomId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_isRoomMember_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_isRoomMember_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_sendSystemOAMessage_args = class {
  constructor(args) {
    this.message = null;
    if (args) {
      if (args.message !== undefined && args.message !== null) {
        this.message = new ttypes.Message(args.message);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.message = new ttypes.Message();
          this.message.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_sendSystemOAMessage_args');
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
      this.message.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_sendSystemOAMessage_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.Message(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Message();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_sendSystemOAMessage_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_acquirePaidCallRoute_args = class {
  constructor(args) {
    this.paidCallType = null;
    this.dialedNumber = null;
    this.language = null;
    this.networkCode = null;
    this.disableCallerId = null;
    this.referer = null;
    this.adSessionId = null;
    if (args) {
      if (args.paidCallType !== undefined && args.paidCallType !== null) {
        this.paidCallType = args.paidCallType;
      }
      if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
        this.dialedNumber = args.dialedNumber;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.networkCode !== undefined && args.networkCode !== null) {
        this.networkCode = args.networkCode;
      }
      if (args.disableCallerId !== undefined && args.disableCallerId !== null) {
        this.disableCallerId = args.disableCallerId;
      }
      if (args.referer !== undefined && args.referer !== null) {
        this.referer = args.referer;
      }
      if (args.adSessionId !== undefined && args.adSessionId !== null) {
        this.adSessionId = args.adSessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.paidCallType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.dialedNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.networkCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.disableCallerId = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.referer = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.adSessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_acquirePaidCallRoute_args');
    if (this.paidCallType !== null && this.paidCallType !== undefined) {
      output.writeFieldBegin('paidCallType', Thrift.Type.I32, 2);
      output.writeI32(this.paidCallType);
      output.writeFieldEnd();
    }
    if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
      output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 3);
      output.writeString(this.dialedNumber);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.networkCode !== null && this.networkCode !== undefined) {
      output.writeFieldBegin('networkCode', Thrift.Type.STRING, 5);
      output.writeString(this.networkCode);
      output.writeFieldEnd();
    }
    if (this.disableCallerId !== null && this.disableCallerId !== undefined) {
      output.writeFieldBegin('disableCallerId', Thrift.Type.BOOL, 6);
      output.writeBool(this.disableCallerId);
      output.writeFieldEnd();
    }
    if (this.referer !== null && this.referer !== undefined) {
      output.writeFieldBegin('referer', Thrift.Type.STRING, 7);
      output.writeString(this.referer);
      output.writeFieldEnd();
    }
    if (this.adSessionId !== null && this.adSessionId !== undefined) {
      output.writeFieldBegin('adSessionId', Thrift.Type.STRING, 8);
      output.writeString(this.adSessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_acquirePaidCallRoute_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.PaidCallResponse(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PaidCallResponse();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_acquirePaidCallRoute_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getGroupsForChannel_args = class {
  constructor(args) {
    this.groupIds = null;
    if (args) {
      if (args.groupIds !== undefined && args.groupIds !== null) {
        this.groupIds = Thrift.copyList(args.groupIds, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.groupIds = [];
          const _rtmp3641 = input.readListBegin();
          const _size640 = _rtmp3641.size || 0;
          for (let _i642 = 0; _i642 < _size640; ++_i642) {
            let elem643 = null;
            elem643 = input.readString();
            this.groupIds.push(elem643);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getGroupsForChannel_args');
    if (this.groupIds !== null && this.groupIds !== undefined) {
      output.writeFieldBegin('groupIds', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.groupIds.length);
      for (let iter644 in this.groupIds) {
        if (this.groupIds.hasOwnProperty(iter644)) {
          iter644 = this.groupIds[iter644];
          output.writeString(iter644);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getGroupsForChannel_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.Group]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3646 = input.readListBegin();
          const _size645 = _rtmp3646.size || 0;
          for (let _i647 = 0; _i647 < _size645; ++_i647) {
            let elem648 = null;
            elem648 = new ttypes.Group();
            elem648.read(input);
            this.success.push(elem648);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getGroupsForChannel_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter649 in this.success) {
        if (this.success.hasOwnProperty(iter649)) {
          iter649 = this.success[iter649];
          iter649.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserCreateTime_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserCreateTime_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserCreateTime_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserCreateTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_registerChannelCP_args = class {
  constructor(args) {
    this.cpId = null;
    this.registerPassword = null;
    if (args) {
      if (args.cpId !== undefined && args.cpId !== null) {
        this.cpId = args.cpId;
      }
      if (args.registerPassword !== undefined && args.registerPassword !== null) {
        this.registerPassword = args.registerPassword;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.cpId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.registerPassword = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_registerChannelCP_args');
    if (this.cpId !== null && this.cpId !== undefined) {
      output.writeFieldBegin('cpId', Thrift.Type.STRING, 2);
      output.writeString(this.cpId);
      output.writeFieldEnd();
    }
    if (this.registerPassword !== null && this.registerPassword !== undefined) {
      output.writeFieldBegin('registerPassword', Thrift.Type.STRING, 3);
      output.writeString(this.registerPassword);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_registerChannelCP_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_registerChannelCP_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_reserveCallCreditPurchase_args = class {
  constructor(args) {
    this.request = null;
    if (args) {
      if (args.request !== undefined && args.request !== null) {
        this.request = new ttypes.CoinPurchaseReservation(args.request);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.CoinPurchaseReservation();
          this.request.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_reserveCallCreditPurchase_args');
    if (this.request !== null && this.request !== undefined) {
      output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
      this.request.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_reserveCallCreditPurchase_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.PaymentReservationResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PaymentReservationResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_reserveCallCreditPurchase_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_acquirePaidCallCurrencyExchangeRate_args = class {
  constructor(args) {
    this.language = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_acquirePaidCallCurrencyExchangeRate_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_acquirePaidCallCurrencyExchangeRate_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.PaidCallCurrencyExchangeRate]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3651 = input.readListBegin();
          const _size650 = _rtmp3651.size || 0;
          for (let _i652 = 0; _i652 < _size650; ++_i652) {
            let elem653 = null;
            elem653 = new ttypes.PaidCallCurrencyExchangeRate();
            elem653.read(input);
            this.success.push(elem653);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_acquirePaidCallCurrencyExchangeRate_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter654 in this.success) {
        if (this.success.hasOwnProperty(iter654)) {
          iter654 = this.success[iter654];
          iter654.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getRoomMemberMidsForAppPlatform_args = class {
  constructor(args) {
    this.roomId = null;
    if (args) {
      if (args.roomId !== undefined && args.roomId !== null) {
        this.roomId = args.roomId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.roomId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getRoomMemberMidsForAppPlatform_args');
    if (this.roomId !== null && this.roomId !== undefined) {
      output.writeFieldBegin('roomId', Thrift.Type.STRING, 1);
      output.writeString(this.roomId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getRoomMemberMidsForAppPlatform_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3656 = input.readListBegin();
          const _size655 = _rtmp3656.size || 0;
          for (let _i657 = 0; _i657 < _size655; ++_i657) {
            let elem658 = null;
            elem658 = input.readString();
            this.success.push(elem658);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getRoomMemberMidsForAppPlatform_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter659 in this.success) {
        if (this.success.hasOwnProperty(iter659)) {
          iter659 = this.success[iter659];
          output.writeString(iter659);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPaidCallBalanceList_args = class {
  constructor(args) {
    this.language = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPaidCallBalanceList_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPaidCallBalanceList_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.PaidCallBalance]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3661 = input.readListBegin();
          const _size660 = _rtmp3661.size || 0;
          for (let _i662 = 0; _i662 < _size660; ++_i662) {
            let elem663 = null;
            elem663 = new ttypes.PaidCallBalance();
            elem663.read(input);
            this.success.push(elem663);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPaidCallBalanceList_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter664 in this.success) {
        if (this.success.hasOwnProperty(iter664)) {
          iter664 = this.success[iter664];
          iter664.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPersonalInfos_args = class {
  constructor(args) {
    this.requiredPersonalInfos = null;
    if (args) {
      if (args.requiredPersonalInfos !== undefined && args.requiredPersonalInfos !== null) {
        this.requiredPersonalInfos = Thrift.copyList(args.requiredPersonalInfos, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.SET) {
          this.requiredPersonalInfos = [];
          const _rtmp3666 = input.readSetBegin();
          const _size665 = _rtmp3666.size || 0;
          for (let _i667 = 0; _i667 < _size665; ++_i667) {
            let elem668 = null;
            elem668 = input.readI32();
            this.requiredPersonalInfos.push(elem668);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPersonalInfos_args');
    if (this.requiredPersonalInfos !== null && this.requiredPersonalInfos !== undefined) {
      output.writeFieldBegin('requiredPersonalInfos', Thrift.Type.SET, 1);
      output.writeSetBegin(Thrift.Type.I32, this.requiredPersonalInfos.length);
      for (let iter669 in this.requiredPersonalInfos) {
        if (this.requiredPersonalInfos.hasOwnProperty(iter669)) {
          iter669 = this.requiredPersonalInfos[iter669];
          output.writeI32(iter669);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPersonalInfos_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3671 = input.readMapBegin();
          const _size670 = _rtmp3671.size || 0;
          for (let _i672 = 0; _i672 < _size670; ++_i672) {
            let key673 = null;
            let val674 = null;
            key673 = input.readI32();
            val674 = input.readString();
            this.success[key673] = val674;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPersonalInfos_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (let kiter675 in this.success) {
        if (this.success.hasOwnProperty(kiter675)) {
          let viter676 = this.success[kiter675];
          output.writeI32(kiter675);
          output.writeString(viter676);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPrimaryClientsForChannel_args = class {
  constructor(args) {
    this.userMids = null;
    if (args) {
      if (args.userMids !== undefined && args.userMids !== null) {
        this.userMids = Thrift.copyList(args.userMids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.userMids = [];
          const _rtmp3678 = input.readListBegin();
          const _size677 = _rtmp3678.size || 0;
          for (let _i679 = 0; _i679 < _size677; ++_i679) {
            let elem680 = null;
            elem680 = input.readString();
            this.userMids.push(elem680);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPrimaryClientsForChannel_args');
    if (this.userMids !== null && this.userMids !== undefined) {
      output.writeFieldBegin('userMids', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.userMids.length);
      for (let iter681 in this.userMids) {
        if (this.userMids.hasOwnProperty(iter681)) {
          iter681 = this.userMids[iter681];
          output.writeString(iter681);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPrimaryClientsForChannel_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.SimpleChannelClient]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3683 = input.readListBegin();
          const _size682 = _rtmp3683.size || 0;
          for (let _i684 = 0; _i684 < _size682; ++_i684) {
            let elem685 = null;
            elem685 = new ttypes.SimpleChannelClient();
            elem685.read(input);
            this.success.push(elem685);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPrimaryClientsForChannel_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter686 in this.success) {
        if (this.success.hasOwnProperty(iter686)) {
          iter686 = this.success[iter686];
          iter686.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_addBuddyToContact_args = class {
  constructor(args) {
    this.buddyMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_addBuddyToContact_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_addBuddyToContact_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ContactTransition(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ContactTransition();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_addBuddyToContact_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getGroupMemberMidsForAppPlatform_args = class {
  constructor(args) {
    this.groupId = null;
    if (args) {
      if (args.groupId !== undefined && args.groupId !== null) {
        this.groupId = args.groupId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.groupId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getGroupMemberMidsForAppPlatform_args');
    if (this.groupId !== null && this.groupId !== undefined) {
      output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
      output.writeString(this.groupId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getGroupMemberMidsForAppPlatform_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3688 = input.readListBegin();
          const _size687 = _rtmp3688.size || 0;
          for (let _i689 = 0; _i689 < _size687; ++_i689) {
            let elem690 = null;
            elem690 = input.readString();
            this.success.push(elem690);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getGroupMemberMidsForAppPlatform_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter691 in this.success) {
        if (this.success.hasOwnProperty(iter691)) {
          iter691 = this.success[iter691];
          output.writeString(iter691);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserLanguage_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserLanguage_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserLanguage_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserLanguage_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_lookupPaidCall_args = class {
  constructor(args) {
    this.dialedNumber = null;
    this.language = null;
    this.referer = null;
    if (args) {
      if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
        this.dialedNumber = args.dialedNumber;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.referer !== undefined && args.referer !== null) {
        this.referer = args.referer;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.dialedNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.referer = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_lookupPaidCall_args');
    if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
      output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 2);
      output.writeString(this.dialedNumber);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.referer !== null && this.referer !== undefined) {
      output.writeFieldBegin('referer', Thrift.Type.STRING, 4);
      output.writeString(this.referer);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_lookupPaidCall_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.PaidCallResponse(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PaidCallResponse();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_lookupPaidCall_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getExtendedProfile_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getExtendedProfile_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getExtendedProfile_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ExtendedProfile(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ExtendedProfile();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getExtendedProfile_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getReverseCompactContacts_args = class {
  constructor(args) {
    this.ids = null;
    if (args) {
      if (args.ids !== undefined && args.ids !== null) {
        this.ids = Thrift.copyList(args.ids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.ids = [];
          const _rtmp3693 = input.readListBegin();
          const _size692 = _rtmp3693.size || 0;
          for (let _i694 = 0; _i694 < _size692; ++_i694) {
            let elem695 = null;
            elem695 = input.readString();
            this.ids.push(elem695);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getReverseCompactContacts_args');
    if (this.ids !== null && this.ids !== undefined) {
      output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.ids.length);
      for (let iter696 in this.ids) {
        if (this.ids.hasOwnProperty(iter696)) {
          iter696 = this.ids[iter696];
          output.writeString(iter696);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getReverseCompactContacts_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [ttypes.CompactContact]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3698 = input.readMapBegin();
          const _size697 = _rtmp3698.size || 0;
          for (let _i699 = 0; _i699 < _size697; ++_i699) {
            let key700 = null;
            let val701 = null;
            key700 = input.readString();
            val701 = new ttypes.CompactContact();
            val701.read(input);
            this.success[key700] = val701;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getReverseCompactContacts_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (let kiter702 in this.success) {
        if (this.success.hasOwnProperty(kiter702)) {
          let viter703 = this.success[kiter702];
          output.writeString(kiter702);
          viter703.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPaidCallAdStatus_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPaidCallAdStatus_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getPaidCallAdStatus_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.PaidCallAdResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PaidCallAdResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getPaidCallAdStatus_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_findContactByUseridWithoutAbuseBlockForChannel_args = class {
  constructor(args) {
    this.userid = null;
    if (args) {
      if (args.userid !== undefined && args.userid !== null) {
        this.userid = args.userid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_findContactByUseridWithoutAbuseBlockForChannel_args');
    if (this.userid !== null && this.userid !== undefined) {
      output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
      output.writeString(this.userid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_findContactByUseridWithoutAbuseBlockForChannel_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.Contact(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Contact();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_findContactByUseridWithoutAbuseBlockForChannel_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getGroupMemberMids_args = class {
  constructor(args) {
    this.groupId = null;
    if (args) {
      if (args.groupId !== undefined && args.groupId !== null) {
        this.groupId = args.groupId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.groupId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getGroupMemberMids_args');
    if (this.groupId !== null && this.groupId !== undefined) {
      output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
      output.writeString(this.groupId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getGroupMemberMids_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3705 = input.readListBegin();
          const _size704 = _rtmp3705.size || 0;
          for (let _i706 = 0; _i706 < _size704; ++_i706) {
            let elem707 = null;
            elem707 = input.readString();
            this.success.push(elem707);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getGroupMemberMids_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter708 in this.success) {
        if (this.success.hasOwnProperty(iter708)) {
          iter708 = this.success[iter708];
          output.writeString(iter708);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_sendMessageWithoutRelationship_args = class {
  constructor(args) {
    this.message = null;
    if (args) {
      if (args.message !== undefined && args.message !== null) {
        this.message = new ttypes.Message(args.message);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.message = new ttypes.Message();
          this.message.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_sendMessageWithoutRelationship_args');
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
      this.message.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_sendMessageWithoutRelationship_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.Message(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Message();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_sendMessageWithoutRelationship_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_displayBuddySubscriberCountInBulk_args = class {
  constructor(args) {
    this.mids = null;
    if (args) {
      if (args.mids !== undefined && args.mids !== null) {
        this.mids = Thrift.copyList(args.mids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.mids = [];
          const _rtmp3710 = input.readListBegin();
          const _size709 = _rtmp3710.size || 0;
          for (let _i711 = 0; _i711 < _size709; ++_i711) {
            let elem712 = null;
            elem712 = input.readString();
            this.mids.push(elem712);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_displayBuddySubscriberCountInBulk_args');
    if (this.mids !== null && this.mids !== undefined) {
      output.writeFieldBegin('mids', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.mids.length);
      for (let iter713 in this.mids) {
        if (this.mids.hasOwnProperty(iter713)) {
          iter713 = this.mids[iter713];
          output.writeString(iter713);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_displayBuddySubscriberCountInBulk_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp3715 = input.readMapBegin();
          const _size714 = _rtmp3715.size || 0;
          for (let _i716 = 0; _i716 < _size714; ++_i716) {
            let key717 = null;
            let val718 = null;
            key717 = input.readString();
            val718 = input.readI64();
            this.success[key717] = val718;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_displayBuddySubscriberCountInBulk_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
      for (let kiter719 in this.success) {
        if (this.success.hasOwnProperty(kiter719)) {
          let viter720 = this.success[kiter719];
          output.writeString(kiter719);
          output.writeI64(viter720);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_lookupRoomMembers_args = class {
  constructor(args) {
    this.roomId = null;
    this.mids = null;
    if (args) {
      if (args.roomId !== undefined && args.roomId !== null) {
        this.roomId = args.roomId;
      }
      if (args.mids !== undefined && args.mids !== null) {
        this.mids = Thrift.copyList(args.mids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.roomId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.mids = [];
          const _rtmp3722 = input.readListBegin();
          const _size721 = _rtmp3722.size || 0;
          for (let _i723 = 0; _i723 < _size721; ++_i723) {
            let elem724 = null;
            elem724 = input.readString();
            this.mids.push(elem724);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_lookupRoomMembers_args');
    if (this.roomId !== null && this.roomId !== undefined) {
      output.writeFieldBegin('roomId', Thrift.Type.STRING, 1);
      output.writeString(this.roomId);
      output.writeFieldEnd();
    }
    if (this.mids !== null && this.mids !== undefined) {
      output.writeFieldBegin('mids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.mids.length);
      for (let iter725 in this.mids) {
        if (this.mids.hasOwnProperty(iter725)) {
          iter725 = this.mids[iter725];
          output.writeString(iter725);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_lookupRoomMembers_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.SimpleChannelContact]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3727 = input.readListBegin();
          const _size726 = _rtmp3727.size || 0;
          for (let _i728 = 0; _i728 < _size726; ++_i728) {
            let elem729 = null;
            elem729 = new ttypes.SimpleChannelContact();
            elem729.read(input);
            this.success.push(elem729);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_lookupRoomMembers_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter730 in this.success) {
        if (this.success.hasOwnProperty(iter730)) {
          iter730 = this.success[iter730];
          iter730.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getFavoriteMidsForChannel_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getFavoriteMidsForChannel_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getFavoriteMidsForChannel_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3732 = input.readListBegin();
          const _size731 = _rtmp3732.size || 0;
          for (let _i733 = 0; _i733 < _size731; ++_i733) {
            let elem734 = null;
            elem734 = input.readString();
            this.success.push(elem734);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getFavoriteMidsForChannel_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter735 in this.success) {
        if (this.success.hasOwnProperty(iter735)) {
          iter735 = this.success[iter735];
          output.writeString(iter735);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getAllContactIdsForChannel_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getAllContactIdsForChannel_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getAllContactIdsForChannel_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3737 = input.readListBegin();
          const _size736 = _rtmp3737.size || 0;
          for (let _i738 = 0; _i738 < _size736; ++_i738) {
            let elem739 = null;
            elem739 = input.readString();
            this.success.push(elem739);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getAllContactIdsForChannel_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter740 in this.success) {
        if (this.success.hasOwnProperty(iter740)) {
          iter740 = this.success[iter740];
          output.writeString(iter740);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_displayBuddySubscriberCount_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_displayBuddySubscriberCount_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_displayBuddySubscriberCount_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_displayBuddySubscriberCount_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getProfileForChannel_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getProfileForChannel_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getProfileForChannel_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.Profile(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Profile();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getProfileForChannel_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserTickets_args = class {
  constructor(args) {
    this.userMids = null;
    if (args) {
      if (args.userMids !== undefined && args.userMids !== null) {
        this.userMids = Thrift.copyList(args.userMids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.userMids = [];
          const _rtmp3742 = input.readListBegin();
          const _size741 = _rtmp3742.size || 0;
          for (let _i743 = 0; _i743 < _size741; ++_i743) {
            let elem744 = null;
            elem744 = input.readString();
            this.userMids.push(elem744);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserTickets_args');
    if (this.userMids !== null && this.userMids !== undefined) {
      output.writeFieldBegin('userMids', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.userMids.length);
      for (let iter745 in this.userMids) {
        if (this.userMids.hasOwnProperty(iter745)) {
          iter745 = this.userMids[iter745];
          output.writeString(iter745);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserTickets_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.UserTicketResponse]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3747 = input.readListBegin();
          const _size746 = _rtmp3747.size || 0;
          for (let _i748 = 0; _i748 < _size746; ++_i748) {
            let elem749 = null;
            elem749 = new ttypes.UserTicketResponse();
            elem749.read(input);
            this.success.push(elem749);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserTickets_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter750 in this.success) {
        if (this.success.hasOwnProperty(iter750)) {
          iter750 = this.success[iter750];
          iter750.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getOAFriendMids_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getOAFriendMids_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getOAFriendMids_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3752 = input.readListBegin();
          const _size751 = _rtmp3752.size || 0;
          for (let _i753 = 0; _i753 < _size751; ++_i753) {
            let elem754 = null;
            elem754 = input.readString();
            this.success.push(elem754);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getOAFriendMids_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter755 in this.success) {
        if (this.success.hasOwnProperty(iter755)) {
          iter755 = this.success[iter755];
          output.writeString(iter755);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_searchPaidCallUserRate_args = class {
  constructor(args) {
    this.countryCode = null;
    this.language = null;
    if (args) {
      if (args.countryCode !== undefined && args.countryCode !== null) {
        this.countryCode = args.countryCode;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.countryCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_searchPaidCallUserRate_args');
    if (this.countryCode !== null && this.countryCode !== undefined) {
      output.writeFieldBegin('countryCode', Thrift.Type.STRING, 2);
      output.writeString(this.countryCode);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_searchPaidCallUserRate_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.PaidCallUserRate]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3757 = input.readListBegin();
          const _size756 = _rtmp3757.size || 0;
          for (let _i758 = 0; _i758 < _size756; ++_i758) {
            let elem759 = null;
            elem759 = new ttypes.PaidCallUserRate();
            elem759.read(input);
            this.success.push(elem759);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_searchPaidCallUserRate_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter760 in this.success) {
        if (this.success.hasOwnProperty(iter760)) {
          iter760 = this.success[iter760];
          iter760.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getJoinedGroupIdsForChannel_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getJoinedGroupIdsForChannel_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getJoinedGroupIdsForChannel_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3762 = input.readListBegin();
          const _size761 = _rtmp3762.size || 0;
          for (let _i763 = 0; _i763 < _size761; ++_i763) {
            let elem764 = null;
            elem764 = input.readString();
            this.success.push(elem764);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getJoinedGroupIdsForChannel_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter765 in this.success) {
        if (this.success.hasOwnProperty(iter765)) {
          iter765 = this.success[iter765];
          output.writeString(iter765);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_acquireGroupCallRoute_args = class {
  constructor(args) {
    this.chatMid = null;
    this.mediaType = null;
    if (args) {
      if (args.chatMid !== undefined && args.chatMid !== null) {
        this.chatMid = args.chatMid;
      }
      if (args.mediaType !== undefined && args.mediaType !== null) {
        this.mediaType = args.mediaType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.chatMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.mediaType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_acquireGroupCallRoute_args');
    if (this.chatMid !== null && this.chatMid !== undefined) {
      output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
      output.writeString(this.chatMid);
      output.writeFieldEnd();
    }
    if (this.mediaType !== null && this.mediaType !== undefined) {
      output.writeFieldBegin('mediaType', Thrift.Type.I32, 3);
      output.writeI32(this.mediaType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_acquireGroupCallRoute_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.GroupCallRoute(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.GroupCallRoute();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_acquireGroupCallRoute_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserMidsWhoAddedMe_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserMidsWhoAddedMe_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserMidsWhoAddedMe_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3767 = input.readListBegin();
          const _size766 = _rtmp3767.size || 0;
          for (let _i768 = 0; _i768 < _size766; ++_i768) {
            let elem769 = null;
            elem769 = input.readString();
            this.success.push(elem769);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserMidsWhoAddedMe_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter770 in this.success) {
        if (this.success.hasOwnProperty(iter770)) {
          iter770 = this.success[iter770];
          output.writeString(iter770);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getIdentityCredential_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getIdentityCredential_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getIdentityCredential_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.IdentityCredential(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.IdentityCredential();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getIdentityCredential_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_addOperationForChannel_args = class {
  constructor(args) {
    this.opType = null;
    this.param1 = null;
    this.param2 = null;
    this.param3 = null;
    if (args) {
      if (args.opType !== undefined && args.opType !== null) {
        this.opType = args.opType;
      }
      if (args.param1 !== undefined && args.param1 !== null) {
        this.param1 = args.param1;
      }
      if (args.param2 !== undefined && args.param2 !== null) {
        this.param2 = args.param2;
      }
      if (args.param3 !== undefined && args.param3 !== null) {
        this.param3 = args.param3;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.opType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.param1 = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.param2 = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.param3 = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_addOperationForChannel_args');
    if (this.opType !== null && this.opType !== undefined) {
      output.writeFieldBegin('opType', Thrift.Type.I32, 1);
      output.writeI32(this.opType);
      output.writeFieldEnd();
    }
    if (this.param1 !== null && this.param1 !== undefined) {
      output.writeFieldBegin('param1', Thrift.Type.STRING, 2);
      output.writeString(this.param1);
      output.writeFieldEnd();
    }
    if (this.param2 !== null && this.param2 !== undefined) {
      output.writeFieldBegin('param2', Thrift.Type.STRING, 3);
      output.writeString(this.param2);
      output.writeFieldEnd();
    }
    if (this.param3 !== null && this.param3 !== undefined) {
      output.writeFieldBegin('param3', Thrift.Type.STRING, 4);
      output.writeString(this.param3);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_addOperationForChannel_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_addOperationForChannel_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getSimpleChannelContacts_args = class {
  constructor(args) {
    this.ids = null;
    this.statusSticonFallbackDisabled = null;
    if (args) {
      if (args.ids !== undefined && args.ids !== null) {
        this.ids = Thrift.copyList(args.ids, [null]);
      }
      if (args.statusSticonFallbackDisabled !== undefined && args.statusSticonFallbackDisabled !== null) {
        this.statusSticonFallbackDisabled = args.statusSticonFallbackDisabled;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.ids = [];
          const _rtmp3772 = input.readListBegin();
          const _size771 = _rtmp3772.size || 0;
          for (let _i773 = 0; _i773 < _size771; ++_i773) {
            let elem774 = null;
            elem774 = input.readString();
            this.ids.push(elem774);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.statusSticonFallbackDisabled = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getSimpleChannelContacts_args');
    if (this.ids !== null && this.ids !== undefined) {
      output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.ids.length);
      for (let iter775 in this.ids) {
        if (this.ids.hasOwnProperty(iter775)) {
          iter775 = this.ids[iter775];
          output.writeString(iter775);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.statusSticonFallbackDisabled !== null && this.statusSticonFallbackDisabled !== undefined) {
      output.writeFieldBegin('statusSticonFallbackDisabled', Thrift.Type.BOOL, 2);
      output.writeBool(this.statusSticonFallbackDisabled);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getSimpleChannelContacts_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.SimpleChannelContact]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3777 = input.readListBegin();
          const _size776 = _rtmp3777.size || 0;
          for (let _i778 = 0; _i778 < _size776; ++_i778) {
            let elem779 = null;
            elem779 = new ttypes.SimpleChannelContact();
            elem779.read(input);
            this.success.push(elem779);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getSimpleChannelContacts_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter780 in this.success) {
        if (this.success.hasOwnProperty(iter780)) {
          iter780 = this.success[iter780];
          iter780.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserLastSentMessageTimeStamp_args = class {
  constructor(args) {
    this.mid = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserLastSentMessageTimeStamp_args');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallService_getUserLastSentMessageTimeStamp_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallService_getUserLastSentMessageTimeStamp_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallServiceClient = exports.Client = class {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  getUserStatus (mid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getUserStatus(mid);
    });
  }

  send_getUserStatus (mid) {
    const output = new this.pClass(this.output);
    const params = {
      mid: mid
    };
    const args = new CallService_getUserStatus_args(params);
    try {
      output.writeMessageBegin('getUserStatus', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getUserStatus (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getUserStatus_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getUserStatus failed: unknown result');
  }

  updateProfileAttributeForChannel (profileAttribute, value) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_updateProfileAttributeForChannel(profileAttribute, value);
    });
  }

  send_updateProfileAttributeForChannel (profileAttribute, value) {
    const output = new this.pClass(this.output);
    const params = {
      profileAttribute: profileAttribute,
      value: value
    };
    const args = new CallService_updateProfileAttributeForChannel_args(params);
    try {
      output.writeMessageBegin('updateProfileAttributeForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_updateProfileAttributeForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_updateProfileAttributeForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  updateExtendedProfileAttribute (attr, extendedProfile) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_updateExtendedProfileAttribute(attr, extendedProfile);
    });
  }

  send_updateExtendedProfileAttribute (attr, extendedProfile) {
    const output = new this.pClass(this.output);
    const params = {
      attr: attr,
      extendedProfile: extendedProfile
    };
    const args = new CallService_updateExtendedProfileAttribute_args(params);
    try {
      output.writeMessageBegin('updateExtendedProfileAttribute', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_updateExtendedProfileAttribute (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_updateExtendedProfileAttribute_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  getAllSimpleChannelContacts (statusSticonFallbackDisabled) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getAllSimpleChannelContacts(statusSticonFallbackDisabled);
    });
  }

  send_getAllSimpleChannelContacts (statusSticonFallbackDisabled) {
    const output = new this.pClass(this.output);
    const params = {
      statusSticonFallbackDisabled: statusSticonFallbackDisabled
    };
    const args = new CallService_getAllSimpleChannelContacts_args(params);
    try {
      output.writeMessageBegin('getAllSimpleChannelContacts', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getAllSimpleChannelContacts (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getAllSimpleChannelContacts_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getAllSimpleChannelContacts failed: unknown result');
  }

  getUserIdentities () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getUserIdentities();
    });
  }

  send_getUserIdentities () {
    const output = new this.pClass(this.output);
    const args = new CallService_getUserIdentities_args();
    try {
      output.writeMessageBegin('getUserIdentities', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getUserIdentities (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getUserIdentities_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getUserIdentities failed: unknown result');
  }

  markPaidCallAd (dialedNumber, language, disableCallerId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_markPaidCallAd(dialedNumber, language, disableCallerId);
    });
  }

  send_markPaidCallAd (dialedNumber, language, disableCallerId) {
    const output = new this.pClass(this.output);
    const params = {
      dialedNumber: dialedNumber,
      language: language,
      disableCallerId: disableCallerId
    };
    const args = new CallService_markPaidCallAd_args(params);
    try {
      output.writeMessageBegin('markPaidCallAd', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_markPaidCallAd (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_markPaidCallAd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('markPaidCallAd failed: unknown result');
  }

  isGroupMember (groupId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_isGroupMember(groupId);
    });
  }

  send_isGroupMember (groupId) {
    const output = new this.pClass(this.output);
    const params = {
      groupId: groupId
    };
    const args = new CallService_isGroupMember_args(params);
    try {
      output.writeMessageBegin('isGroupMember', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_isGroupMember (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_isGroupMember_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('isGroupMember failed: unknown result');
  }

  getPhoneInfoFromPhoneNumber (region, phoneNumber) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPhoneInfoFromPhoneNumber(region, phoneNumber);
    });
  }

  send_getPhoneInfoFromPhoneNumber (region, phoneNumber) {
    const output = new this.pClass(this.output);
    const params = {
      region: region,
      phoneNumber: phoneNumber
    };
    const args = new CallService_getPhoneInfoFromPhoneNumber_args(params);
    try {
      output.writeMessageBegin('getPhoneInfoFromPhoneNumber', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPhoneInfoFromPhoneNumber (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getPhoneInfoFromPhoneNumber_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPhoneInfoFromPhoneNumber failed: unknown result');
  }

  redeemPaidCallVoucher (serial, language) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_redeemPaidCallVoucher(serial, language);
    });
  }

  send_redeemPaidCallVoucher (serial, language) {
    const output = new this.pClass(this.output);
    const params = {
      serial: serial,
      language: language
    };
    const args = new CallService_redeemPaidCallVoucher_args(params);
    try {
      output.writeMessageBegin('redeemPaidCallVoucher', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_redeemPaidCallVoucher (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_redeemPaidCallVoucher_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('redeemPaidCallVoucher failed: unknown result');
  }

  getPreferredDisplayName (mids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPreferredDisplayName(mids);
    });
  }

  send_getPreferredDisplayName (mids) {
    const output = new this.pClass(this.output);
    const params = {
      mids: mids
    };
    const args = new CallService_getPreferredDisplayName_args(params);
    try {
      output.writeMessageBegin('getPreferredDisplayName', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPreferredDisplayName (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getPreferredDisplayName_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPreferredDisplayName failed: unknown result');
  }

  getContactsForChannel (ids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getContactsForChannel(ids);
    });
  }

  send_getContactsForChannel (ids) {
    const output = new this.pClass(this.output);
    const params = {
      ids: ids
    };
    const args = new CallService_getContactsForChannel_args(params);
    try {
      output.writeMessageBegin('getContactsForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getContactsForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getContactsForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getContactsForChannel failed: unknown result');
  }

  getCallCreditProducts (appStoreCode, pgCode, country, language) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCallCreditProducts(appStoreCode, pgCode, country, language);
    });
  }

  send_getCallCreditProducts (appStoreCode, pgCode, country, language) {
    const output = new this.pClass(this.output);
    const params = {
      appStoreCode: appStoreCode,
      pgCode: pgCode,
      country: country,
      language: language
    };
    const args = new CallService_getCallCreditProducts_args(params);
    try {
      output.writeMessageBegin('getCallCreditProducts', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCallCreditProducts (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getCallCreditProducts_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCallCreditProducts failed: unknown result');
  }

  getCompactContacts (lastModifiedTimestamp) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCompactContacts(lastModifiedTimestamp);
    });
  }

  send_getCompactContacts (lastModifiedTimestamp) {
    const output = new this.pClass(this.output);
    const params = {
      lastModifiedTimestamp: lastModifiedTimestamp
    };
    const args = new CallService_getCompactContacts_args(params);
    try {
      output.writeMessageBegin('getCompactContacts', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCompactContacts (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getCompactContacts_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCompactContacts failed: unknown result');
  }

  notifyNotiCenterEvent (event) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_notifyNotiCenterEvent(event);
    });
  }

  send_notifyNotiCenterEvent (event) {
    const output = new this.pClass(this.output);
    const params = {
      event: event
    };
    const args = new CallService_notifyNotiCenterEvent_args(params);
    try {
      output.writeMessageBegin('notifyNotiCenterEvent', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_notifyNotiCenterEvent (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_notifyNotiCenterEvent_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  isInContact (mid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_isInContact(mid);
    });
  }

  send_isInContact (mid) {
    const output = new this.pClass(this.output);
    const params = {
      mid: mid
    };
    const args = new CallService_isInContact_args(params);
    try {
      output.writeMessageBegin('isInContact', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_isInContact (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_isInContact_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('isInContact failed: unknown result');
  }

  lookupGroupMembers (groupId, mids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_lookupGroupMembers(groupId, mids);
    });
  }

  send_lookupGroupMembers (groupId, mids) {
    const output = new this.pClass(this.output);
    const params = {
      groupId: groupId,
      mids: mids
    };
    const args = new CallService_lookupGroupMembers_args(params);
    try {
      output.writeMessageBegin('lookupGroupMembers', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_lookupGroupMembers (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_lookupGroupMembers_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('lookupGroupMembers failed: unknown result');
  }

  getRoomInformation (roomMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getRoomInformation(roomMid);
    });
  }

  send_getRoomInformation (roomMid) {
    const output = new this.pClass(this.output);
    const params = {
      roomMid: roomMid
    };
    const args = new CallService_getRoomInformation_args(params);
    try {
      output.writeMessageBegin('getRoomInformation', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getRoomInformation (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getRoomInformation_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getRoomInformation failed: unknown result');
  }

  getGroupCall (chatMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getGroupCall(chatMid);
    });
  }

  send_getGroupCall (chatMid) {
    const output = new this.pClass(this.output);
    const params = {
      chatMid: chatMid
    };
    const args = new CallService_getGroupCall_args(params);
    try {
      output.writeMessageBegin('getGroupCall', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getGroupCall (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getGroupCall_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getGroupCall failed: unknown result');
  }

  isAllowSecondaryDeviceLogin () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_isAllowSecondaryDeviceLogin();
    });
  }

  send_isAllowSecondaryDeviceLogin () {
    const output = new this.pClass(this.output);
    const args = new CallService_isAllowSecondaryDeviceLogin_args();
    try {
      output.writeMessageBegin('isAllowSecondaryDeviceLogin', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_isAllowSecondaryDeviceLogin (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_isAllowSecondaryDeviceLogin_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('isAllowSecondaryDeviceLogin failed: unknown result');
  }

  getPrimaryClientForChannel () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPrimaryClientForChannel();
    });
  }

  send_getPrimaryClientForChannel () {
    const output = new this.pClass(this.output);
    const args = new CallService_getPrimaryClientForChannel_args();
    try {
      output.writeMessageBegin('getPrimaryClientForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPrimaryClientForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getPrimaryClientForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPrimaryClientForChannel failed: unknown result');
  }

  createRoomWithBuddy (reqSeq, buddyMid, contactIds) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_createRoomWithBuddy(reqSeq, buddyMid, contactIds);
    });
  }

  send_createRoomWithBuddy (reqSeq, buddyMid, contactIds) {
    const output = new this.pClass(this.output);
    const params = {
      reqSeq: reqSeq,
      buddyMid: buddyMid,
      contactIds: contactIds
    };
    const args = new CallService_createRoomWithBuddy_args(params);
    try {
      output.writeMessageBegin('createRoomWithBuddy', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_createRoomWithBuddy (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_createRoomWithBuddy_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('createRoomWithBuddy failed: unknown result');
  }

  getDisplayName (mid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getDisplayName(mid);
    });
  }

  send_getDisplayName (mid) {
    const output = new this.pClass(this.output);
    const params = {
      mid: mid
    };
    const args = new CallService_getDisplayName_args(params);
    try {
      output.writeMessageBegin('getDisplayName', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getDisplayName (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getDisplayName_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getDisplayName failed: unknown result');
  }

  getPaidCallMetadata (language) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPaidCallMetadata(language);
    });
  }

  send_getPaidCallMetadata (language) {
    const output = new this.pClass(this.output);
    const params = {
      language: language
    };
    const args = new CallService_getPaidCallMetadata_args(params);
    try {
      output.writeMessageBegin('getPaidCallMetadata', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPaidCallMetadata (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getPaidCallMetadata_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPaidCallMetadata failed: unknown result');
  }

  getMid () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getMid();
    });
  }

  send_getMid () {
    const output = new this.pClass(this.output);
    const args = new CallService_getMid_args();
    try {
      output.writeMessageBegin('getMid', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getMid (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getMid_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getMid failed: unknown result');
  }

  getUserCountryForBilling (country, remoteIp) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getUserCountryForBilling(country, remoteIp);
    });
  }

  send_getUserCountryForBilling (country, remoteIp) {
    const output = new this.pClass(this.output);
    const params = {
      country: country,
      remoteIp: remoteIp
    };
    const args = new CallService_getUserCountryForBilling_args(params);
    try {
      output.writeMessageBegin('getUserCountryForBilling', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getUserCountryForBilling (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getUserCountryForBilling_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getUserCountryForBilling failed: unknown result');
  }

  getFavoriteGroupIdsForChannel () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getFavoriteGroupIdsForChannel();
    });
  }

  send_getFavoriteGroupIdsForChannel () {
    const output = new this.pClass(this.output);
    const args = new CallService_getFavoriteGroupIdsForChannel_args();
    try {
      output.writeMessageBegin('getFavoriteGroupIdsForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getFavoriteGroupIdsForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getFavoriteGroupIdsForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getFavoriteGroupIdsForChannel failed: unknown result');
  }

  getPaidCallHistory (start, size, language) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPaidCallHistory(start, size, language);
    });
  }

  send_getPaidCallHistory (start, size, language) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language
    };
    const args = new CallService_getPaidCallHistory_args(params);
    try {
      output.writeMessageBegin('getPaidCallHistory', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPaidCallHistory (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getPaidCallHistory_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPaidCallHistory failed: unknown result');
  }

  sendPinCodeOperation (verifier) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendPinCodeOperation(verifier);
    });
  }

  send_sendPinCodeOperation (verifier) {
    const output = new this.pClass(this.output);
    const params = {
      verifier: verifier
    };
    const args = new CallService_sendPinCodeOperation_args(params);
    try {
      output.writeMessageBegin('sendPinCodeOperation', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendPinCodeOperation (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_sendPinCodeOperation_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  inviteIntoGroupCall (chatMid, memberMids, mediaType) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_inviteIntoGroupCall(chatMid, memberMids, mediaType);
    });
  }

  send_inviteIntoGroupCall (chatMid, memberMids, mediaType) {
    const output = new this.pClass(this.output);
    const params = {
      chatMid: chatMid,
      memberMids: memberMids,
      mediaType: mediaType
    };
    const args = new CallService_inviteIntoGroupCall_args(params);
    try {
      output.writeMessageBegin('inviteIntoGroupCall', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_inviteIntoGroupCall (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_inviteIntoGroupCall_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  getFriendMids () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getFriendMids();
    });
  }

  send_getFriendMids () {
    const output = new this.pClass(this.output);
    const args = new CallService_getFriendMids_args();
    try {
      output.writeMessageBegin('getFriendMids', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getFriendMids (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getFriendMids_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getFriendMids failed: unknown result');
  }

  getMetaProfile () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getMetaProfile();
    });
  }

  send_getMetaProfile () {
    const output = new this.pClass(this.output);
    const args = new CallService_getMetaProfile_args();
    try {
      output.writeMessageBegin('getMetaProfile', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getMetaProfile (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getMetaProfile_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getMetaProfile failed: unknown result');
  }

  sendMessageForChannel (message) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendMessageForChannel(message);
    });
  }

  send_sendMessageForChannel (message) {
    const output = new this.pClass(this.output);
    const params = {
      message: message
    };
    const args = new CallService_sendMessageForChannel_args(params);
    try {
      output.writeMessageBegin('sendMessageForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendMessageForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_sendMessageForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sendMessageForChannel failed: unknown result');
  }

  activeBuddySubscriberCount () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_activeBuddySubscriberCount();
    });
  }

  send_activeBuddySubscriberCount () {
    const output = new this.pClass(this.output);
    const args = new CallService_activeBuddySubscriberCount_args();
    try {
      output.writeMessageBegin('activeBuddySubscriberCount', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_activeBuddySubscriberCount (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_activeBuddySubscriberCount_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('activeBuddySubscriberCount failed: unknown result');
  }

  getCallCreditPurchaseHistory (request) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCallCreditPurchaseHistory(request);
    });
  }

  send_getCallCreditPurchaseHistory (request) {
    const output = new this.pClass(this.output);
    const params = {
      request: request
    };
    const args = new CallService_getCallCreditPurchaseHistory_args(params);
    try {
      output.writeMessageBegin('getCallCreditPurchaseHistory', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCallCreditPurchaseHistory (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getCallCreditPurchaseHistory_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCallCreditPurchaseHistory failed: unknown result');
  }

  isRoomMember (roomId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_isRoomMember(roomId);
    });
  }

  send_isRoomMember (roomId) {
    const output = new this.pClass(this.output);
    const params = {
      roomId: roomId
    };
    const args = new CallService_isRoomMember_args(params);
    try {
      output.writeMessageBegin('isRoomMember', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_isRoomMember (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_isRoomMember_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('isRoomMember failed: unknown result');
  }

  sendSystemOAMessage (message) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendSystemOAMessage(message);
    });
  }

  send_sendSystemOAMessage (message) {
    const output = new this.pClass(this.output);
    const params = {
      message: message
    };
    const args = new CallService_sendSystemOAMessage_args(params);
    try {
      output.writeMessageBegin('sendSystemOAMessage', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendSystemOAMessage (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_sendSystemOAMessage_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sendSystemOAMessage failed: unknown result');
  }

  acquirePaidCallRoute (paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId);
    });
  }

  send_acquirePaidCallRoute (paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId) {
    const output = new this.pClass(this.output);
    const params = {
      paidCallType: paidCallType,
      dialedNumber: dialedNumber,
      language: language,
      networkCode: networkCode,
      disableCallerId: disableCallerId,
      referer: referer,
      adSessionId: adSessionId
    };
    const args = new CallService_acquirePaidCallRoute_args(params);
    try {
      output.writeMessageBegin('acquirePaidCallRoute', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_acquirePaidCallRoute (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_acquirePaidCallRoute_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('acquirePaidCallRoute failed: unknown result');
  }

  getGroupsForChannel (groupIds) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getGroupsForChannel(groupIds);
    });
  }

  send_getGroupsForChannel (groupIds) {
    const output = new this.pClass(this.output);
    const params = {
      groupIds: groupIds
    };
    const args = new CallService_getGroupsForChannel_args(params);
    try {
      output.writeMessageBegin('getGroupsForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getGroupsForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getGroupsForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getGroupsForChannel failed: unknown result');
  }

  getUserCreateTime () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getUserCreateTime();
    });
  }

  send_getUserCreateTime () {
    const output = new this.pClass(this.output);
    const args = new CallService_getUserCreateTime_args();
    try {
      output.writeMessageBegin('getUserCreateTime', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getUserCreateTime (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getUserCreateTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getUserCreateTime failed: unknown result');
  }

  registerChannelCP (cpId, registerPassword) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_registerChannelCP(cpId, registerPassword);
    });
  }

  send_registerChannelCP (cpId, registerPassword) {
    const output = new this.pClass(this.output);
    const params = {
      cpId: cpId,
      registerPassword: registerPassword
    };
    const args = new CallService_registerChannelCP_args(params);
    try {
      output.writeMessageBegin('registerChannelCP', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_registerChannelCP (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_registerChannelCP_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('registerChannelCP failed: unknown result');
  }

  reserveCallCreditPurchase (request) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_reserveCallCreditPurchase(request);
    });
  }

  send_reserveCallCreditPurchase (request) {
    const output = new this.pClass(this.output);
    const params = {
      request: request
    };
    const args = new CallService_reserveCallCreditPurchase_args(params);
    try {
      output.writeMessageBegin('reserveCallCreditPurchase', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_reserveCallCreditPurchase (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_reserveCallCreditPurchase_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('reserveCallCreditPurchase failed: unknown result');
  }

  acquirePaidCallCurrencyExchangeRate (language) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_acquirePaidCallCurrencyExchangeRate(language);
    });
  }

  send_acquirePaidCallCurrencyExchangeRate (language) {
    const output = new this.pClass(this.output);
    const params = {
      language: language
    };
    const args = new CallService_acquirePaidCallCurrencyExchangeRate_args(params);
    try {
      output.writeMessageBegin('acquirePaidCallCurrencyExchangeRate', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_acquirePaidCallCurrencyExchangeRate (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_acquirePaidCallCurrencyExchangeRate_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('acquirePaidCallCurrencyExchangeRate failed: unknown result');
  }

  getRoomMemberMidsForAppPlatform (roomId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getRoomMemberMidsForAppPlatform(roomId);
    });
  }

  send_getRoomMemberMidsForAppPlatform (roomId) {
    const output = new this.pClass(this.output);
    const params = {
      roomId: roomId
    };
    const args = new CallService_getRoomMemberMidsForAppPlatform_args(params);
    try {
      output.writeMessageBegin('getRoomMemberMidsForAppPlatform', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getRoomMemberMidsForAppPlatform (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getRoomMemberMidsForAppPlatform_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getRoomMemberMidsForAppPlatform failed: unknown result');
  }

  getPaidCallBalanceList (language) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPaidCallBalanceList(language);
    });
  }

  send_getPaidCallBalanceList (language) {
    const output = new this.pClass(this.output);
    const params = {
      language: language
    };
    const args = new CallService_getPaidCallBalanceList_args(params);
    try {
      output.writeMessageBegin('getPaidCallBalanceList', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPaidCallBalanceList (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getPaidCallBalanceList_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPaidCallBalanceList failed: unknown result');
  }

  getPersonalInfos (requiredPersonalInfos) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPersonalInfos(requiredPersonalInfos);
    });
  }

  send_getPersonalInfos (requiredPersonalInfos) {
    const output = new this.pClass(this.output);
    const params = {
      requiredPersonalInfos: requiredPersonalInfos
    };
    const args = new CallService_getPersonalInfos_args(params);
    try {
      output.writeMessageBegin('getPersonalInfos', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPersonalInfos (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getPersonalInfos_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPersonalInfos failed: unknown result');
  }

  getPrimaryClientsForChannel (userMids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPrimaryClientsForChannel(userMids);
    });
  }

  send_getPrimaryClientsForChannel (userMids) {
    const output = new this.pClass(this.output);
    const params = {
      userMids: userMids
    };
    const args = new CallService_getPrimaryClientsForChannel_args(params);
    try {
      output.writeMessageBegin('getPrimaryClientsForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPrimaryClientsForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getPrimaryClientsForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPrimaryClientsForChannel failed: unknown result');
  }

  addBuddyToContact (buddyMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addBuddyToContact(buddyMid);
    });
  }

  send_addBuddyToContact (buddyMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid
    };
    const args = new CallService_addBuddyToContact_args(params);
    try {
      output.writeMessageBegin('addBuddyToContact', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addBuddyToContact (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_addBuddyToContact_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('addBuddyToContact failed: unknown result');
  }

  getGroupMemberMidsForAppPlatform (groupId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getGroupMemberMidsForAppPlatform(groupId);
    });
  }

  send_getGroupMemberMidsForAppPlatform (groupId) {
    const output = new this.pClass(this.output);
    const params = {
      groupId: groupId
    };
    const args = new CallService_getGroupMemberMidsForAppPlatform_args(params);
    try {
      output.writeMessageBegin('getGroupMemberMidsForAppPlatform', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getGroupMemberMidsForAppPlatform (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getGroupMemberMidsForAppPlatform_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getGroupMemberMidsForAppPlatform failed: unknown result');
  }

  getUserLanguage () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getUserLanguage();
    });
  }

  send_getUserLanguage () {
    const output = new this.pClass(this.output);
    const args = new CallService_getUserLanguage_args();
    try {
      output.writeMessageBegin('getUserLanguage', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getUserLanguage (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getUserLanguage_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getUserLanguage failed: unknown result');
  }

  lookupPaidCall (dialedNumber, language, referer) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_lookupPaidCall(dialedNumber, language, referer);
    });
  }

  send_lookupPaidCall (dialedNumber, language, referer) {
    const output = new this.pClass(this.output);
    const params = {
      dialedNumber: dialedNumber,
      language: language,
      referer: referer
    };
    const args = new CallService_lookupPaidCall_args(params);
    try {
      output.writeMessageBegin('lookupPaidCall', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_lookupPaidCall (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_lookupPaidCall_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('lookupPaidCall failed: unknown result');
  }

  getExtendedProfile () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getExtendedProfile();
    });
  }

  send_getExtendedProfile () {
    const output = new this.pClass(this.output);
    const args = new CallService_getExtendedProfile_args();
    try {
      output.writeMessageBegin('getExtendedProfile', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getExtendedProfile (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getExtendedProfile_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getExtendedProfile failed: unknown result');
  }

  getReverseCompactContacts (ids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getReverseCompactContacts(ids);
    });
  }

  send_getReverseCompactContacts (ids) {
    const output = new this.pClass(this.output);
    const params = {
      ids: ids
    };
    const args = new CallService_getReverseCompactContacts_args(params);
    try {
      output.writeMessageBegin('getReverseCompactContacts', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getReverseCompactContacts (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getReverseCompactContacts_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getReverseCompactContacts failed: unknown result');
  }

  getPaidCallAdStatus () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPaidCallAdStatus();
    });
  }

  send_getPaidCallAdStatus () {
    const output = new this.pClass(this.output);
    const args = new CallService_getPaidCallAdStatus_args();
    try {
      output.writeMessageBegin('getPaidCallAdStatus', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPaidCallAdStatus (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getPaidCallAdStatus_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPaidCallAdStatus failed: unknown result');
  }

  findContactByUseridWithoutAbuseBlockForChannel (userid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findContactByUseridWithoutAbuseBlockForChannel(userid);
    });
  }

  send_findContactByUseridWithoutAbuseBlockForChannel (userid) {
    const output = new this.pClass(this.output);
    const params = {
      userid: userid
    };
    const args = new CallService_findContactByUseridWithoutAbuseBlockForChannel_args(params);
    try {
      output.writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findContactByUseridWithoutAbuseBlockForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_findContactByUseridWithoutAbuseBlockForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findContactByUseridWithoutAbuseBlockForChannel failed: unknown result');
  }

  getGroupMemberMids (groupId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getGroupMemberMids(groupId);
    });
  }

  send_getGroupMemberMids (groupId) {
    const output = new this.pClass(this.output);
    const params = {
      groupId: groupId
    };
    const args = new CallService_getGroupMemberMids_args(params);
    try {
      output.writeMessageBegin('getGroupMemberMids', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getGroupMemberMids (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getGroupMemberMids_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getGroupMemberMids failed: unknown result');
  }

  sendMessageWithoutRelationship (message) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendMessageWithoutRelationship(message);
    });
  }

  send_sendMessageWithoutRelationship (message) {
    const output = new this.pClass(this.output);
    const params = {
      message: message
    };
    const args = new CallService_sendMessageWithoutRelationship_args(params);
    try {
      output.writeMessageBegin('sendMessageWithoutRelationship', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendMessageWithoutRelationship (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_sendMessageWithoutRelationship_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sendMessageWithoutRelationship failed: unknown result');
  }

  displayBuddySubscriberCountInBulk (mids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_displayBuddySubscriberCountInBulk(mids);
    });
  }

  send_displayBuddySubscriberCountInBulk (mids) {
    const output = new this.pClass(this.output);
    const params = {
      mids: mids
    };
    const args = new CallService_displayBuddySubscriberCountInBulk_args(params);
    try {
      output.writeMessageBegin('displayBuddySubscriberCountInBulk', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_displayBuddySubscriberCountInBulk (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_displayBuddySubscriberCountInBulk_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('displayBuddySubscriberCountInBulk failed: unknown result');
  }

  lookupRoomMembers (roomId, mids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_lookupRoomMembers(roomId, mids);
    });
  }

  send_lookupRoomMembers (roomId, mids) {
    const output = new this.pClass(this.output);
    const params = {
      roomId: roomId,
      mids: mids
    };
    const args = new CallService_lookupRoomMembers_args(params);
    try {
      output.writeMessageBegin('lookupRoomMembers', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_lookupRoomMembers (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_lookupRoomMembers_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('lookupRoomMembers failed: unknown result');
  }

  getFavoriteMidsForChannel () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getFavoriteMidsForChannel();
    });
  }

  send_getFavoriteMidsForChannel () {
    const output = new this.pClass(this.output);
    const args = new CallService_getFavoriteMidsForChannel_args();
    try {
      output.writeMessageBegin('getFavoriteMidsForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getFavoriteMidsForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getFavoriteMidsForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getFavoriteMidsForChannel failed: unknown result');
  }

  getAllContactIdsForChannel () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getAllContactIdsForChannel();
    });
  }

  send_getAllContactIdsForChannel () {
    const output = new this.pClass(this.output);
    const args = new CallService_getAllContactIdsForChannel_args();
    try {
      output.writeMessageBegin('getAllContactIdsForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getAllContactIdsForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getAllContactIdsForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getAllContactIdsForChannel failed: unknown result');
  }

  displayBuddySubscriberCount () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_displayBuddySubscriberCount();
    });
  }

  send_displayBuddySubscriberCount () {
    const output = new this.pClass(this.output);
    const args = new CallService_displayBuddySubscriberCount_args();
    try {
      output.writeMessageBegin('displayBuddySubscriberCount', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_displayBuddySubscriberCount (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_displayBuddySubscriberCount_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('displayBuddySubscriberCount failed: unknown result');
  }

  getProfileForChannel () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getProfileForChannel();
    });
  }

  send_getProfileForChannel () {
    const output = new this.pClass(this.output);
    const args = new CallService_getProfileForChannel_args();
    try {
      output.writeMessageBegin('getProfileForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getProfileForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getProfileForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getProfileForChannel failed: unknown result');
  }

  getUserTickets (userMids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getUserTickets(userMids);
    });
  }

  send_getUserTickets (userMids) {
    const output = new this.pClass(this.output);
    const params = {
      userMids: userMids
    };
    const args = new CallService_getUserTickets_args(params);
    try {
      output.writeMessageBegin('getUserTickets', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getUserTickets (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getUserTickets_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getUserTickets failed: unknown result');
  }

  getOAFriendMids () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getOAFriendMids();
    });
  }

  send_getOAFriendMids () {
    const output = new this.pClass(this.output);
    const args = new CallService_getOAFriendMids_args();
    try {
      output.writeMessageBegin('getOAFriendMids', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getOAFriendMids (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getOAFriendMids_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getOAFriendMids failed: unknown result');
  }

  searchPaidCallUserRate (countryCode, language) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_searchPaidCallUserRate(countryCode, language);
    });
  }

  send_searchPaidCallUserRate (countryCode, language) {
    const output = new this.pClass(this.output);
    const params = {
      countryCode: countryCode,
      language: language
    };
    const args = new CallService_searchPaidCallUserRate_args(params);
    try {
      output.writeMessageBegin('searchPaidCallUserRate', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_searchPaidCallUserRate (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_searchPaidCallUserRate_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('searchPaidCallUserRate failed: unknown result');
  }

  getJoinedGroupIdsForChannel () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getJoinedGroupIdsForChannel();
    });
  }

  send_getJoinedGroupIdsForChannel () {
    const output = new this.pClass(this.output);
    const args = new CallService_getJoinedGroupIdsForChannel_args();
    try {
      output.writeMessageBegin('getJoinedGroupIdsForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getJoinedGroupIdsForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getJoinedGroupIdsForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getJoinedGroupIdsForChannel failed: unknown result');
  }

  acquireGroupCallRoute (chatMid, mediaType) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_acquireGroupCallRoute(chatMid, mediaType);
    });
  }

  send_acquireGroupCallRoute (chatMid, mediaType) {
    const output = new this.pClass(this.output);
    const params = {
      chatMid: chatMid,
      mediaType: mediaType
    };
    const args = new CallService_acquireGroupCallRoute_args(params);
    try {
      output.writeMessageBegin('acquireGroupCallRoute', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_acquireGroupCallRoute (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_acquireGroupCallRoute_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('acquireGroupCallRoute failed: unknown result');
  }

  getUserMidsWhoAddedMe () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getUserMidsWhoAddedMe();
    });
  }

  send_getUserMidsWhoAddedMe () {
    const output = new this.pClass(this.output);
    const args = new CallService_getUserMidsWhoAddedMe_args();
    try {
      output.writeMessageBegin('getUserMidsWhoAddedMe', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getUserMidsWhoAddedMe (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getUserMidsWhoAddedMe_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getUserMidsWhoAddedMe failed: unknown result');
  }

  getIdentityCredential () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getIdentityCredential();
    });
  }

  send_getIdentityCredential () {
    const output = new this.pClass(this.output);
    const args = new CallService_getIdentityCredential_args();
    try {
      output.writeMessageBegin('getIdentityCredential', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getIdentityCredential (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getIdentityCredential_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getIdentityCredential failed: unknown result');
  }

  addOperationForChannel (opType, param1, param2, param3) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addOperationForChannel(opType, param1, param2, param3);
    });
  }

  send_addOperationForChannel (opType, param1, param2, param3) {
    const output = new this.pClass(this.output);
    const params = {
      opType: opType,
      param1: param1,
      param2: param2,
      param3: param3
    };
    const args = new CallService_addOperationForChannel_args(params);
    try {
      output.writeMessageBegin('addOperationForChannel', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addOperationForChannel (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_addOperationForChannel_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  getSimpleChannelContacts (ids, statusSticonFallbackDisabled) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getSimpleChannelContacts(ids, statusSticonFallbackDisabled);
    });
  }

  send_getSimpleChannelContacts (ids, statusSticonFallbackDisabled) {
    const output = new this.pClass(this.output);
    const params = {
      ids: ids,
      statusSticonFallbackDisabled: statusSticonFallbackDisabled
    };
    const args = new CallService_getSimpleChannelContacts_args(params);
    try {
      output.writeMessageBegin('getSimpleChannelContacts', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getSimpleChannelContacts (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getSimpleChannelContacts_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getSimpleChannelContacts failed: unknown result');
  }

  getUserLastSentMessageTimeStamp (mid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getUserLastSentMessageTimeStamp(mid);
    });
  }

  send_getUserLastSentMessageTimeStamp (mid) {
    const output = new this.pClass(this.output);
    const params = {
      mid: mid
    };
    const args = new CallService_getUserLastSentMessageTimeStamp_args(params);
    try {
      output.writeMessageBegin('getUserLastSentMessageTimeStamp', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getUserLastSentMessageTimeStamp (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new CallService_getUserLastSentMessageTimeStamp_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getUserLastSentMessageTimeStamp failed: unknown result');
  }
};
const CallServiceProcessor = exports.Processor = class {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_getUserStatus (seqid, input, output) {
    const args = new CallService_getUserStatus_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getUserStatus.length === 1) {
      Promise.resolve(this._handler.getUserStatus.bind(this._handler)(
        args.mid
      )).then(result => {
        const result_obj = new CallService_getUserStatus_result({success: result});
        output.writeMessageBegin("getUserStatus", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getUserStatus_result(err);
          output.writeMessageBegin("getUserStatus", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserStatus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getUserStatus(args.mid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getUserStatus_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getUserStatus", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserStatus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_updateProfileAttributeForChannel (seqid, input, output) {
    const args = new CallService_updateProfileAttributeForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.updateProfileAttributeForChannel.length === 2) {
      Promise.resolve(this._handler.updateProfileAttributeForChannel.bind(this._handler)(
        args.profileAttribute,
        args.value
      )).then(result => {
        const result_obj = new CallService_updateProfileAttributeForChannel_result({success: result});
        output.writeMessageBegin("updateProfileAttributeForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_updateProfileAttributeForChannel_result(err);
          output.writeMessageBegin("updateProfileAttributeForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateProfileAttributeForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.updateProfileAttributeForChannel(args.profileAttribute, args.value, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_updateProfileAttributeForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("updateProfileAttributeForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateProfileAttributeForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_updateExtendedProfileAttribute (seqid, input, output) {
    const args = new CallService_updateExtendedProfileAttribute_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.updateExtendedProfileAttribute.length === 2) {
      Promise.resolve(this._handler.updateExtendedProfileAttribute.bind(this._handler)(
        args.attr,
        args.extendedProfile
      )).then(result => {
        const result_obj = new CallService_updateExtendedProfileAttribute_result({success: result});
        output.writeMessageBegin("updateExtendedProfileAttribute", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_updateExtendedProfileAttribute_result(err);
          output.writeMessageBegin("updateExtendedProfileAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateExtendedProfileAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.updateExtendedProfileAttribute(args.attr, args.extendedProfile, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_updateExtendedProfileAttribute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("updateExtendedProfileAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateExtendedProfileAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getAllSimpleChannelContacts (seqid, input, output) {
    const args = new CallService_getAllSimpleChannelContacts_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getAllSimpleChannelContacts.length === 1) {
      Promise.resolve(this._handler.getAllSimpleChannelContacts.bind(this._handler)(
        args.statusSticonFallbackDisabled
      )).then(result => {
        const result_obj = new CallService_getAllSimpleChannelContacts_result({success: result});
        output.writeMessageBegin("getAllSimpleChannelContacts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getAllSimpleChannelContacts_result(err);
          output.writeMessageBegin("getAllSimpleChannelContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllSimpleChannelContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getAllSimpleChannelContacts(args.statusSticonFallbackDisabled, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getAllSimpleChannelContacts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getAllSimpleChannelContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllSimpleChannelContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getUserIdentities (seqid, input, output) {
    const args = new CallService_getUserIdentities_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getUserIdentities.length === 0) {
      Promise.resolve(this._handler.getUserIdentities.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getUserIdentities_result({success: result});
        output.writeMessageBegin("getUserIdentities", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getUserIdentities_result(err);
          output.writeMessageBegin("getUserIdentities", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserIdentities", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getUserIdentities((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getUserIdentities_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getUserIdentities", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserIdentities", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_markPaidCallAd (seqid, input, output) {
    const args = new CallService_markPaidCallAd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.markPaidCallAd.length === 3) {
      Promise.resolve(this._handler.markPaidCallAd.bind(this._handler)(
        args.dialedNumber,
        args.language,
        args.disableCallerId
      )).then(result => {
        const result_obj = new CallService_markPaidCallAd_result({success: result});
        output.writeMessageBegin("markPaidCallAd", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_markPaidCallAd_result(err);
          output.writeMessageBegin("markPaidCallAd", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("markPaidCallAd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.markPaidCallAd(args.dialedNumber, args.language, args.disableCallerId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_markPaidCallAd_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("markPaidCallAd", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("markPaidCallAd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_isGroupMember (seqid, input, output) {
    const args = new CallService_isGroupMember_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.isGroupMember.length === 1) {
      Promise.resolve(this._handler.isGroupMember.bind(this._handler)(
        args.groupId
      )).then(result => {
        const result_obj = new CallService_isGroupMember_result({success: result});
        output.writeMessageBegin("isGroupMember", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_isGroupMember_result(err);
          output.writeMessageBegin("isGroupMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isGroupMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.isGroupMember(args.groupId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_isGroupMember_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("isGroupMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isGroupMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPhoneInfoFromPhoneNumber (seqid, input, output) {
    const args = new CallService_getPhoneInfoFromPhoneNumber_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPhoneInfoFromPhoneNumber.length === 2) {
      Promise.resolve(this._handler.getPhoneInfoFromPhoneNumber.bind(this._handler)(
        args.region,
        args.phoneNumber
      )).then(result => {
        const result_obj = new CallService_getPhoneInfoFromPhoneNumber_result({success: result});
        output.writeMessageBegin("getPhoneInfoFromPhoneNumber", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getPhoneInfoFromPhoneNumber_result(err);
          output.writeMessageBegin("getPhoneInfoFromPhoneNumber", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPhoneInfoFromPhoneNumber", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPhoneInfoFromPhoneNumber(args.region, args.phoneNumber, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getPhoneInfoFromPhoneNumber_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPhoneInfoFromPhoneNumber", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPhoneInfoFromPhoneNumber", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_redeemPaidCallVoucher (seqid, input, output) {
    const args = new CallService_redeemPaidCallVoucher_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.redeemPaidCallVoucher.length === 2) {
      Promise.resolve(this._handler.redeemPaidCallVoucher.bind(this._handler)(
        args.serial,
        args.language
      )).then(result => {
        const result_obj = new CallService_redeemPaidCallVoucher_result({success: result});
        output.writeMessageBegin("redeemPaidCallVoucher", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_redeemPaidCallVoucher_result(err);
          output.writeMessageBegin("redeemPaidCallVoucher", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("redeemPaidCallVoucher", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.redeemPaidCallVoucher(args.serial, args.language, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_redeemPaidCallVoucher_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("redeemPaidCallVoucher", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("redeemPaidCallVoucher", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPreferredDisplayName (seqid, input, output) {
    const args = new CallService_getPreferredDisplayName_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPreferredDisplayName.length === 1) {
      Promise.resolve(this._handler.getPreferredDisplayName.bind(this._handler)(
        args.mids
      )).then(result => {
        const result_obj = new CallService_getPreferredDisplayName_result({success: result});
        output.writeMessageBegin("getPreferredDisplayName", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getPreferredDisplayName_result(err);
          output.writeMessageBegin("getPreferredDisplayName", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPreferredDisplayName", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPreferredDisplayName(args.mids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getPreferredDisplayName_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPreferredDisplayName", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPreferredDisplayName", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getContactsForChannel (seqid, input, output) {
    const args = new CallService_getContactsForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getContactsForChannel.length === 1) {
      Promise.resolve(this._handler.getContactsForChannel.bind(this._handler)(
        args.ids
      )).then(result => {
        const result_obj = new CallService_getContactsForChannel_result({success: result});
        output.writeMessageBegin("getContactsForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getContactsForChannel_result(err);
          output.writeMessageBegin("getContactsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getContactsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getContactsForChannel(args.ids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getContactsForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getContactsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getContactsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCallCreditProducts (seqid, input, output) {
    const args = new CallService_getCallCreditProducts_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCallCreditProducts.length === 4) {
      Promise.resolve(this._handler.getCallCreditProducts.bind(this._handler)(
        args.appStoreCode,
        args.pgCode,
        args.country,
        args.language
      )).then(result => {
        const result_obj = new CallService_getCallCreditProducts_result({success: result});
        output.writeMessageBegin("getCallCreditProducts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getCallCreditProducts_result(err);
          output.writeMessageBegin("getCallCreditProducts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCallCreditProducts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCallCreditProducts(args.appStoreCode, args.pgCode, args.country, args.language, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getCallCreditProducts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCallCreditProducts", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCallCreditProducts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCompactContacts (seqid, input, output) {
    const args = new CallService_getCompactContacts_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCompactContacts.length === 1) {
      Promise.resolve(this._handler.getCompactContacts.bind(this._handler)(
        args.lastModifiedTimestamp
      )).then(result => {
        const result_obj = new CallService_getCompactContacts_result({success: result});
        output.writeMessageBegin("getCompactContacts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getCompactContacts_result(err);
          output.writeMessageBegin("getCompactContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCompactContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCompactContacts(args.lastModifiedTimestamp, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getCompactContacts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCompactContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCompactContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_notifyNotiCenterEvent (seqid, input, output) {
    const args = new CallService_notifyNotiCenterEvent_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.notifyNotiCenterEvent.length === 1) {
      Promise.resolve(this._handler.notifyNotiCenterEvent.bind(this._handler)(
        args.event
      )).then(result => {
        const result_obj = new CallService_notifyNotiCenterEvent_result({success: result});
        output.writeMessageBegin("notifyNotiCenterEvent", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_notifyNotiCenterEvent_result(err);
          output.writeMessageBegin("notifyNotiCenterEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyNotiCenterEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.notifyNotiCenterEvent(args.event, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_notifyNotiCenterEvent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("notifyNotiCenterEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyNotiCenterEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_isInContact (seqid, input, output) {
    const args = new CallService_isInContact_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.isInContact.length === 1) {
      Promise.resolve(this._handler.isInContact.bind(this._handler)(
        args.mid
      )).then(result => {
        const result_obj = new CallService_isInContact_result({success: result});
        output.writeMessageBegin("isInContact", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_isInContact_result(err);
          output.writeMessageBegin("isInContact", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isInContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.isInContact(args.mid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_isInContact_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("isInContact", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isInContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_lookupGroupMembers (seqid, input, output) {
    const args = new CallService_lookupGroupMembers_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.lookupGroupMembers.length === 2) {
      Promise.resolve(this._handler.lookupGroupMembers.bind(this._handler)(
        args.groupId,
        args.mids
      )).then(result => {
        const result_obj = new CallService_lookupGroupMembers_result({success: result});
        output.writeMessageBegin("lookupGroupMembers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_lookupGroupMembers_result(err);
          output.writeMessageBegin("lookupGroupMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookupGroupMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.lookupGroupMembers(args.groupId, args.mids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_lookupGroupMembers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("lookupGroupMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookupGroupMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getRoomInformation (seqid, input, output) {
    const args = new CallService_getRoomInformation_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getRoomInformation.length === 1) {
      Promise.resolve(this._handler.getRoomInformation.bind(this._handler)(
        args.roomMid
      )).then(result => {
        const result_obj = new CallService_getRoomInformation_result({success: result});
        output.writeMessageBegin("getRoomInformation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getRoomInformation_result(err);
          output.writeMessageBegin("getRoomInformation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRoomInformation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getRoomInformation(args.roomMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getRoomInformation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getRoomInformation", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRoomInformation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getGroupCall (seqid, input, output) {
    const args = new CallService_getGroupCall_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getGroupCall.length === 1) {
      Promise.resolve(this._handler.getGroupCall.bind(this._handler)(
        args.chatMid
      )).then(result => {
        const result_obj = new CallService_getGroupCall_result({success: result});
        output.writeMessageBegin("getGroupCall", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getGroupCall_result(err);
          output.writeMessageBegin("getGroupCall", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupCall", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getGroupCall(args.chatMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getGroupCall_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getGroupCall", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupCall", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_isAllowSecondaryDeviceLogin (seqid, input, output) {
    const args = new CallService_isAllowSecondaryDeviceLogin_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.isAllowSecondaryDeviceLogin.length === 0) {
      Promise.resolve(this._handler.isAllowSecondaryDeviceLogin.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_isAllowSecondaryDeviceLogin_result({success: result});
        output.writeMessageBegin("isAllowSecondaryDeviceLogin", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_isAllowSecondaryDeviceLogin_result(err);
          output.writeMessageBegin("isAllowSecondaryDeviceLogin", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isAllowSecondaryDeviceLogin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.isAllowSecondaryDeviceLogin((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_isAllowSecondaryDeviceLogin_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("isAllowSecondaryDeviceLogin", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isAllowSecondaryDeviceLogin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPrimaryClientForChannel (seqid, input, output) {
    const args = new CallService_getPrimaryClientForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPrimaryClientForChannel.length === 0) {
      Promise.resolve(this._handler.getPrimaryClientForChannel.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getPrimaryClientForChannel_result({success: result});
        output.writeMessageBegin("getPrimaryClientForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getPrimaryClientForChannel_result(err);
          output.writeMessageBegin("getPrimaryClientForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPrimaryClientForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPrimaryClientForChannel((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getPrimaryClientForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPrimaryClientForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPrimaryClientForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_createRoomWithBuddy (seqid, input, output) {
    const args = new CallService_createRoomWithBuddy_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.createRoomWithBuddy.length === 3) {
      Promise.resolve(this._handler.createRoomWithBuddy.bind(this._handler)(
        args.reqSeq,
        args.buddyMid,
        args.contactIds
      )).then(result => {
        const result_obj = new CallService_createRoomWithBuddy_result({success: result});
        output.writeMessageBegin("createRoomWithBuddy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_createRoomWithBuddy_result(err);
          output.writeMessageBegin("createRoomWithBuddy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createRoomWithBuddy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.createRoomWithBuddy(args.reqSeq, args.buddyMid, args.contactIds, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_createRoomWithBuddy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("createRoomWithBuddy", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createRoomWithBuddy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getDisplayName (seqid, input, output) {
    const args = new CallService_getDisplayName_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getDisplayName.length === 1) {
      Promise.resolve(this._handler.getDisplayName.bind(this._handler)(
        args.mid
      )).then(result => {
        const result_obj = new CallService_getDisplayName_result({success: result});
        output.writeMessageBegin("getDisplayName", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getDisplayName_result(err);
          output.writeMessageBegin("getDisplayName", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDisplayName", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getDisplayName(args.mid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getDisplayName_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getDisplayName", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDisplayName", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPaidCallMetadata (seqid, input, output) {
    const args = new CallService_getPaidCallMetadata_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPaidCallMetadata.length === 1) {
      Promise.resolve(this._handler.getPaidCallMetadata.bind(this._handler)(
        args.language
      )).then(result => {
        const result_obj = new CallService_getPaidCallMetadata_result({success: result});
        output.writeMessageBegin("getPaidCallMetadata", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getPaidCallMetadata_result(err);
          output.writeMessageBegin("getPaidCallMetadata", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPaidCallMetadata", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPaidCallMetadata(args.language, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getPaidCallMetadata_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPaidCallMetadata", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPaidCallMetadata", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getMid (seqid, input, output) {
    const args = new CallService_getMid_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getMid.length === 0) {
      Promise.resolve(this._handler.getMid.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getMid_result({success: result});
        output.writeMessageBegin("getMid", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getMid_result(err);
          output.writeMessageBegin("getMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getMid((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getMid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getUserCountryForBilling (seqid, input, output) {
    const args = new CallService_getUserCountryForBilling_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getUserCountryForBilling.length === 2) {
      Promise.resolve(this._handler.getUserCountryForBilling.bind(this._handler)(
        args.country,
        args.remoteIp
      )).then(result => {
        const result_obj = new CallService_getUserCountryForBilling_result({success: result});
        output.writeMessageBegin("getUserCountryForBilling", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getUserCountryForBilling_result(err);
          output.writeMessageBegin("getUserCountryForBilling", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserCountryForBilling", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getUserCountryForBilling(args.country, args.remoteIp, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getUserCountryForBilling_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getUserCountryForBilling", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserCountryForBilling", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getFavoriteGroupIdsForChannel (seqid, input, output) {
    const args = new CallService_getFavoriteGroupIdsForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getFavoriteGroupIdsForChannel.length === 0) {
      Promise.resolve(this._handler.getFavoriteGroupIdsForChannel.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getFavoriteGroupIdsForChannel_result({success: result});
        output.writeMessageBegin("getFavoriteGroupIdsForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getFavoriteGroupIdsForChannel_result(err);
          output.writeMessageBegin("getFavoriteGroupIdsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFavoriteGroupIdsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getFavoriteGroupIdsForChannel((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getFavoriteGroupIdsForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getFavoriteGroupIdsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFavoriteGroupIdsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPaidCallHistory (seqid, input, output) {
    const args = new CallService_getPaidCallHistory_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPaidCallHistory.length === 3) {
      Promise.resolve(this._handler.getPaidCallHistory.bind(this._handler)(
        args.start,
        args.size,
        args.language
      )).then(result => {
        const result_obj = new CallService_getPaidCallHistory_result({success: result});
        output.writeMessageBegin("getPaidCallHistory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getPaidCallHistory_result(err);
          output.writeMessageBegin("getPaidCallHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPaidCallHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPaidCallHistory(args.start, args.size, args.language, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getPaidCallHistory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPaidCallHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPaidCallHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendPinCodeOperation (seqid, input, output) {
    const args = new CallService_sendPinCodeOperation_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendPinCodeOperation.length === 1) {
      Promise.resolve(this._handler.sendPinCodeOperation.bind(this._handler)(
        args.verifier
      )).then(result => {
        const result_obj = new CallService_sendPinCodeOperation_result({success: result});
        output.writeMessageBegin("sendPinCodeOperation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_sendPinCodeOperation_result(err);
          output.writeMessageBegin("sendPinCodeOperation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendPinCodeOperation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendPinCodeOperation(args.verifier, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_sendPinCodeOperation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendPinCodeOperation", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendPinCodeOperation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_inviteIntoGroupCall (seqid, input, output) {
    const args = new CallService_inviteIntoGroupCall_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.inviteIntoGroupCall.length === 3) {
      Promise.resolve(this._handler.inviteIntoGroupCall.bind(this._handler)(
        args.chatMid,
        args.memberMids,
        args.mediaType
      )).then(result => {
        const result_obj = new CallService_inviteIntoGroupCall_result({success: result});
        output.writeMessageBegin("inviteIntoGroupCall", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_inviteIntoGroupCall_result(err);
          output.writeMessageBegin("inviteIntoGroupCall", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inviteIntoGroupCall", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.inviteIntoGroupCall(args.chatMid, args.memberMids, args.mediaType, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_inviteIntoGroupCall_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("inviteIntoGroupCall", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inviteIntoGroupCall", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getFriendMids (seqid, input, output) {
    const args = new CallService_getFriendMids_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getFriendMids.length === 0) {
      Promise.resolve(this._handler.getFriendMids.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getFriendMids_result({success: result});
        output.writeMessageBegin("getFriendMids", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getFriendMids_result(err);
          output.writeMessageBegin("getFriendMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFriendMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getFriendMids((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getFriendMids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getFriendMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFriendMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getMetaProfile (seqid, input, output) {
    const args = new CallService_getMetaProfile_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getMetaProfile.length === 0) {
      Promise.resolve(this._handler.getMetaProfile.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getMetaProfile_result({success: result});
        output.writeMessageBegin("getMetaProfile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getMetaProfile_result(err);
          output.writeMessageBegin("getMetaProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMetaProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getMetaProfile((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getMetaProfile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getMetaProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMetaProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendMessageForChannel (seqid, input, output) {
    const args = new CallService_sendMessageForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendMessageForChannel.length === 1) {
      Promise.resolve(this._handler.sendMessageForChannel.bind(this._handler)(
        args.message
      )).then(result => {
        const result_obj = new CallService_sendMessageForChannel_result({success: result});
        output.writeMessageBegin("sendMessageForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_sendMessageForChannel_result(err);
          output.writeMessageBegin("sendMessageForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendMessageForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendMessageForChannel(args.message, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_sendMessageForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendMessageForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendMessageForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_activeBuddySubscriberCount (seqid, input, output) {
    const args = new CallService_activeBuddySubscriberCount_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.activeBuddySubscriberCount.length === 0) {
      Promise.resolve(this._handler.activeBuddySubscriberCount.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_activeBuddySubscriberCount_result({success: result});
        output.writeMessageBegin("activeBuddySubscriberCount", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_activeBuddySubscriberCount_result(err);
          output.writeMessageBegin("activeBuddySubscriberCount", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("activeBuddySubscriberCount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.activeBuddySubscriberCount((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_activeBuddySubscriberCount_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("activeBuddySubscriberCount", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("activeBuddySubscriberCount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCallCreditPurchaseHistory (seqid, input, output) {
    const args = new CallService_getCallCreditPurchaseHistory_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCallCreditPurchaseHistory.length === 1) {
      Promise.resolve(this._handler.getCallCreditPurchaseHistory.bind(this._handler)(
        args.request
      )).then(result => {
        const result_obj = new CallService_getCallCreditPurchaseHistory_result({success: result});
        output.writeMessageBegin("getCallCreditPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getCallCreditPurchaseHistory_result(err);
          output.writeMessageBegin("getCallCreditPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCallCreditPurchaseHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCallCreditPurchaseHistory(args.request, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getCallCreditPurchaseHistory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCallCreditPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCallCreditPurchaseHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_isRoomMember (seqid, input, output) {
    const args = new CallService_isRoomMember_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.isRoomMember.length === 1) {
      Promise.resolve(this._handler.isRoomMember.bind(this._handler)(
        args.roomId
      )).then(result => {
        const result_obj = new CallService_isRoomMember_result({success: result});
        output.writeMessageBegin("isRoomMember", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_isRoomMember_result(err);
          output.writeMessageBegin("isRoomMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isRoomMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.isRoomMember(args.roomId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_isRoomMember_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("isRoomMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isRoomMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendSystemOAMessage (seqid, input, output) {
    const args = new CallService_sendSystemOAMessage_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendSystemOAMessage.length === 1) {
      Promise.resolve(this._handler.sendSystemOAMessage.bind(this._handler)(
        args.message
      )).then(result => {
        const result_obj = new CallService_sendSystemOAMessage_result({success: result});
        output.writeMessageBegin("sendSystemOAMessage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_sendSystemOAMessage_result(err);
          output.writeMessageBegin("sendSystemOAMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendSystemOAMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendSystemOAMessage(args.message, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_sendSystemOAMessage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendSystemOAMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendSystemOAMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_acquirePaidCallRoute (seqid, input, output) {
    const args = new CallService_acquirePaidCallRoute_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.acquirePaidCallRoute.length === 7) {
      Promise.resolve(this._handler.acquirePaidCallRoute.bind(this._handler)(
        args.paidCallType,
        args.dialedNumber,
        args.language,
        args.networkCode,
        args.disableCallerId,
        args.referer,
        args.adSessionId
      )).then(result => {
        const result_obj = new CallService_acquirePaidCallRoute_result({success: result});
        output.writeMessageBegin("acquirePaidCallRoute", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_acquirePaidCallRoute_result(err);
          output.writeMessageBegin("acquirePaidCallRoute", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acquirePaidCallRoute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.acquirePaidCallRoute(args.paidCallType, args.dialedNumber, args.language, args.networkCode, args.disableCallerId, args.referer, args.adSessionId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_acquirePaidCallRoute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("acquirePaidCallRoute", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acquirePaidCallRoute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getGroupsForChannel (seqid, input, output) {
    const args = new CallService_getGroupsForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getGroupsForChannel.length === 1) {
      Promise.resolve(this._handler.getGroupsForChannel.bind(this._handler)(
        args.groupIds
      )).then(result => {
        const result_obj = new CallService_getGroupsForChannel_result({success: result});
        output.writeMessageBegin("getGroupsForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getGroupsForChannel_result(err);
          output.writeMessageBegin("getGroupsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getGroupsForChannel(args.groupIds, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getGroupsForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getGroupsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getUserCreateTime (seqid, input, output) {
    const args = new CallService_getUserCreateTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getUserCreateTime.length === 0) {
      Promise.resolve(this._handler.getUserCreateTime.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getUserCreateTime_result({success: result});
        output.writeMessageBegin("getUserCreateTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getUserCreateTime_result(err);
          output.writeMessageBegin("getUserCreateTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserCreateTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getUserCreateTime((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getUserCreateTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getUserCreateTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserCreateTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_registerChannelCP (seqid, input, output) {
    const args = new CallService_registerChannelCP_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.registerChannelCP.length === 2) {
      Promise.resolve(this._handler.registerChannelCP.bind(this._handler)(
        args.cpId,
        args.registerPassword
      )).then(result => {
        const result_obj = new CallService_registerChannelCP_result({success: result});
        output.writeMessageBegin("registerChannelCP", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_registerChannelCP_result(err);
          output.writeMessageBegin("registerChannelCP", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerChannelCP", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.registerChannelCP(args.cpId, args.registerPassword, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_registerChannelCP_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("registerChannelCP", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerChannelCP", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_reserveCallCreditPurchase (seqid, input, output) {
    const args = new CallService_reserveCallCreditPurchase_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.reserveCallCreditPurchase.length === 1) {
      Promise.resolve(this._handler.reserveCallCreditPurchase.bind(this._handler)(
        args.request
      )).then(result => {
        const result_obj = new CallService_reserveCallCreditPurchase_result({success: result});
        output.writeMessageBegin("reserveCallCreditPurchase", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_reserveCallCreditPurchase_result(err);
          output.writeMessageBegin("reserveCallCreditPurchase", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reserveCallCreditPurchase", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.reserveCallCreditPurchase(args.request, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_reserveCallCreditPurchase_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("reserveCallCreditPurchase", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reserveCallCreditPurchase", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_acquirePaidCallCurrencyExchangeRate (seqid, input, output) {
    const args = new CallService_acquirePaidCallCurrencyExchangeRate_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.acquirePaidCallCurrencyExchangeRate.length === 1) {
      Promise.resolve(this._handler.acquirePaidCallCurrencyExchangeRate.bind(this._handler)(
        args.language
      )).then(result => {
        const result_obj = new CallService_acquirePaidCallCurrencyExchangeRate_result({success: result});
        output.writeMessageBegin("acquirePaidCallCurrencyExchangeRate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_acquirePaidCallCurrencyExchangeRate_result(err);
          output.writeMessageBegin("acquirePaidCallCurrencyExchangeRate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acquirePaidCallCurrencyExchangeRate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.acquirePaidCallCurrencyExchangeRate(args.language, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_acquirePaidCallCurrencyExchangeRate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("acquirePaidCallCurrencyExchangeRate", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acquirePaidCallCurrencyExchangeRate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getRoomMemberMidsForAppPlatform (seqid, input, output) {
    const args = new CallService_getRoomMemberMidsForAppPlatform_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getRoomMemberMidsForAppPlatform.length === 1) {
      Promise.resolve(this._handler.getRoomMemberMidsForAppPlatform.bind(this._handler)(
        args.roomId
      )).then(result => {
        const result_obj = new CallService_getRoomMemberMidsForAppPlatform_result({success: result});
        output.writeMessageBegin("getRoomMemberMidsForAppPlatform", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getRoomMemberMidsForAppPlatform_result(err);
          output.writeMessageBegin("getRoomMemberMidsForAppPlatform", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRoomMemberMidsForAppPlatform", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getRoomMemberMidsForAppPlatform(args.roomId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getRoomMemberMidsForAppPlatform_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getRoomMemberMidsForAppPlatform", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRoomMemberMidsForAppPlatform", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPaidCallBalanceList (seqid, input, output) {
    const args = new CallService_getPaidCallBalanceList_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPaidCallBalanceList.length === 1) {
      Promise.resolve(this._handler.getPaidCallBalanceList.bind(this._handler)(
        args.language
      )).then(result => {
        const result_obj = new CallService_getPaidCallBalanceList_result({success: result});
        output.writeMessageBegin("getPaidCallBalanceList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getPaidCallBalanceList_result(err);
          output.writeMessageBegin("getPaidCallBalanceList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPaidCallBalanceList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPaidCallBalanceList(args.language, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getPaidCallBalanceList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPaidCallBalanceList", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPaidCallBalanceList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPersonalInfos (seqid, input, output) {
    const args = new CallService_getPersonalInfos_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPersonalInfos.length === 1) {
      Promise.resolve(this._handler.getPersonalInfos.bind(this._handler)(
        args.requiredPersonalInfos
      )).then(result => {
        const result_obj = new CallService_getPersonalInfos_result({success: result});
        output.writeMessageBegin("getPersonalInfos", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getPersonalInfos_result(err);
          output.writeMessageBegin("getPersonalInfos", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonalInfos", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPersonalInfos(args.requiredPersonalInfos, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getPersonalInfos_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPersonalInfos", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPersonalInfos", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPrimaryClientsForChannel (seqid, input, output) {
    const args = new CallService_getPrimaryClientsForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPrimaryClientsForChannel.length === 1) {
      Promise.resolve(this._handler.getPrimaryClientsForChannel.bind(this._handler)(
        args.userMids
      )).then(result => {
        const result_obj = new CallService_getPrimaryClientsForChannel_result({success: result});
        output.writeMessageBegin("getPrimaryClientsForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getPrimaryClientsForChannel_result(err);
          output.writeMessageBegin("getPrimaryClientsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPrimaryClientsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPrimaryClientsForChannel(args.userMids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getPrimaryClientsForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPrimaryClientsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPrimaryClientsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_addBuddyToContact (seqid, input, output) {
    const args = new CallService_addBuddyToContact_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addBuddyToContact.length === 1) {
      Promise.resolve(this._handler.addBuddyToContact.bind(this._handler)(
        args.buddyMid
      )).then(result => {
        const result_obj = new CallService_addBuddyToContact_result({success: result});
        output.writeMessageBegin("addBuddyToContact", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_addBuddyToContact_result(err);
          output.writeMessageBegin("addBuddyToContact", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addBuddyToContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.addBuddyToContact(args.buddyMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_addBuddyToContact_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("addBuddyToContact", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addBuddyToContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getGroupMemberMidsForAppPlatform (seqid, input, output) {
    const args = new CallService_getGroupMemberMidsForAppPlatform_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getGroupMemberMidsForAppPlatform.length === 1) {
      Promise.resolve(this._handler.getGroupMemberMidsForAppPlatform.bind(this._handler)(
        args.groupId
      )).then(result => {
        const result_obj = new CallService_getGroupMemberMidsForAppPlatform_result({success: result});
        output.writeMessageBegin("getGroupMemberMidsForAppPlatform", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getGroupMemberMidsForAppPlatform_result(err);
          output.writeMessageBegin("getGroupMemberMidsForAppPlatform", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupMemberMidsForAppPlatform", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getGroupMemberMidsForAppPlatform(args.groupId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getGroupMemberMidsForAppPlatform_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getGroupMemberMidsForAppPlatform", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupMemberMidsForAppPlatform", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getUserLanguage (seqid, input, output) {
    const args = new CallService_getUserLanguage_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getUserLanguage.length === 0) {
      Promise.resolve(this._handler.getUserLanguage.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getUserLanguage_result({success: result});
        output.writeMessageBegin("getUserLanguage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getUserLanguage_result(err);
          output.writeMessageBegin("getUserLanguage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserLanguage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getUserLanguage((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getUserLanguage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getUserLanguage", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserLanguage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_lookupPaidCall (seqid, input, output) {
    const args = new CallService_lookupPaidCall_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.lookupPaidCall.length === 3) {
      Promise.resolve(this._handler.lookupPaidCall.bind(this._handler)(
        args.dialedNumber,
        args.language,
        args.referer
      )).then(result => {
        const result_obj = new CallService_lookupPaidCall_result({success: result});
        output.writeMessageBegin("lookupPaidCall", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_lookupPaidCall_result(err);
          output.writeMessageBegin("lookupPaidCall", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookupPaidCall", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.lookupPaidCall(args.dialedNumber, args.language, args.referer, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_lookupPaidCall_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("lookupPaidCall", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookupPaidCall", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getExtendedProfile (seqid, input, output) {
    const args = new CallService_getExtendedProfile_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getExtendedProfile.length === 0) {
      Promise.resolve(this._handler.getExtendedProfile.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getExtendedProfile_result({success: result});
        output.writeMessageBegin("getExtendedProfile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getExtendedProfile_result(err);
          output.writeMessageBegin("getExtendedProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getExtendedProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getExtendedProfile((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getExtendedProfile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getExtendedProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getExtendedProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getReverseCompactContacts (seqid, input, output) {
    const args = new CallService_getReverseCompactContacts_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getReverseCompactContacts.length === 1) {
      Promise.resolve(this._handler.getReverseCompactContacts.bind(this._handler)(
        args.ids
      )).then(result => {
        const result_obj = new CallService_getReverseCompactContacts_result({success: result});
        output.writeMessageBegin("getReverseCompactContacts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getReverseCompactContacts_result(err);
          output.writeMessageBegin("getReverseCompactContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getReverseCompactContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getReverseCompactContacts(args.ids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getReverseCompactContacts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getReverseCompactContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getReverseCompactContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPaidCallAdStatus (seqid, input, output) {
    const args = new CallService_getPaidCallAdStatus_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPaidCallAdStatus.length === 0) {
      Promise.resolve(this._handler.getPaidCallAdStatus.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getPaidCallAdStatus_result({success: result});
        output.writeMessageBegin("getPaidCallAdStatus", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getPaidCallAdStatus_result(err);
          output.writeMessageBegin("getPaidCallAdStatus", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPaidCallAdStatus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPaidCallAdStatus((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getPaidCallAdStatus_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPaidCallAdStatus", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPaidCallAdStatus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findContactByUseridWithoutAbuseBlockForChannel (seqid, input, output) {
    const args = new CallService_findContactByUseridWithoutAbuseBlockForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findContactByUseridWithoutAbuseBlockForChannel.length === 1) {
      Promise.resolve(this._handler.findContactByUseridWithoutAbuseBlockForChannel.bind(this._handler)(
        args.userid
      )).then(result => {
        const result_obj = new CallService_findContactByUseridWithoutAbuseBlockForChannel_result({success: result});
        output.writeMessageBegin("findContactByUseridWithoutAbuseBlockForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_findContactByUseridWithoutAbuseBlockForChannel_result(err);
          output.writeMessageBegin("findContactByUseridWithoutAbuseBlockForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findContactByUseridWithoutAbuseBlockForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findContactByUseridWithoutAbuseBlockForChannel(args.userid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_findContactByUseridWithoutAbuseBlockForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findContactByUseridWithoutAbuseBlockForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findContactByUseridWithoutAbuseBlockForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getGroupMemberMids (seqid, input, output) {
    const args = new CallService_getGroupMemberMids_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getGroupMemberMids.length === 1) {
      Promise.resolve(this._handler.getGroupMemberMids.bind(this._handler)(
        args.groupId
      )).then(result => {
        const result_obj = new CallService_getGroupMemberMids_result({success: result});
        output.writeMessageBegin("getGroupMemberMids", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getGroupMemberMids_result(err);
          output.writeMessageBegin("getGroupMemberMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupMemberMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getGroupMemberMids(args.groupId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getGroupMemberMids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getGroupMemberMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupMemberMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendMessageWithoutRelationship (seqid, input, output) {
    const args = new CallService_sendMessageWithoutRelationship_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendMessageWithoutRelationship.length === 1) {
      Promise.resolve(this._handler.sendMessageWithoutRelationship.bind(this._handler)(
        args.message
      )).then(result => {
        const result_obj = new CallService_sendMessageWithoutRelationship_result({success: result});
        output.writeMessageBegin("sendMessageWithoutRelationship", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_sendMessageWithoutRelationship_result(err);
          output.writeMessageBegin("sendMessageWithoutRelationship", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendMessageWithoutRelationship", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendMessageWithoutRelationship(args.message, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_sendMessageWithoutRelationship_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendMessageWithoutRelationship", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendMessageWithoutRelationship", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_displayBuddySubscriberCountInBulk (seqid, input, output) {
    const args = new CallService_displayBuddySubscriberCountInBulk_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.displayBuddySubscriberCountInBulk.length === 1) {
      Promise.resolve(this._handler.displayBuddySubscriberCountInBulk.bind(this._handler)(
        args.mids
      )).then(result => {
        const result_obj = new CallService_displayBuddySubscriberCountInBulk_result({success: result});
        output.writeMessageBegin("displayBuddySubscriberCountInBulk", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_displayBuddySubscriberCountInBulk_result(err);
          output.writeMessageBegin("displayBuddySubscriberCountInBulk", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("displayBuddySubscriberCountInBulk", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.displayBuddySubscriberCountInBulk(args.mids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_displayBuddySubscriberCountInBulk_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("displayBuddySubscriberCountInBulk", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("displayBuddySubscriberCountInBulk", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_lookupRoomMembers (seqid, input, output) {
    const args = new CallService_lookupRoomMembers_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.lookupRoomMembers.length === 2) {
      Promise.resolve(this._handler.lookupRoomMembers.bind(this._handler)(
        args.roomId,
        args.mids
      )).then(result => {
        const result_obj = new CallService_lookupRoomMembers_result({success: result});
        output.writeMessageBegin("lookupRoomMembers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_lookupRoomMembers_result(err);
          output.writeMessageBegin("lookupRoomMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookupRoomMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.lookupRoomMembers(args.roomId, args.mids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_lookupRoomMembers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("lookupRoomMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookupRoomMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getFavoriteMidsForChannel (seqid, input, output) {
    const args = new CallService_getFavoriteMidsForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getFavoriteMidsForChannel.length === 0) {
      Promise.resolve(this._handler.getFavoriteMidsForChannel.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getFavoriteMidsForChannel_result({success: result});
        output.writeMessageBegin("getFavoriteMidsForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getFavoriteMidsForChannel_result(err);
          output.writeMessageBegin("getFavoriteMidsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFavoriteMidsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getFavoriteMidsForChannel((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getFavoriteMidsForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getFavoriteMidsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFavoriteMidsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getAllContactIdsForChannel (seqid, input, output) {
    const args = new CallService_getAllContactIdsForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getAllContactIdsForChannel.length === 0) {
      Promise.resolve(this._handler.getAllContactIdsForChannel.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getAllContactIdsForChannel_result({success: result});
        output.writeMessageBegin("getAllContactIdsForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getAllContactIdsForChannel_result(err);
          output.writeMessageBegin("getAllContactIdsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllContactIdsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getAllContactIdsForChannel((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getAllContactIdsForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getAllContactIdsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllContactIdsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_displayBuddySubscriberCount (seqid, input, output) {
    const args = new CallService_displayBuddySubscriberCount_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.displayBuddySubscriberCount.length === 0) {
      Promise.resolve(this._handler.displayBuddySubscriberCount.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_displayBuddySubscriberCount_result({success: result});
        output.writeMessageBegin("displayBuddySubscriberCount", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_displayBuddySubscriberCount_result(err);
          output.writeMessageBegin("displayBuddySubscriberCount", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("displayBuddySubscriberCount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.displayBuddySubscriberCount((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_displayBuddySubscriberCount_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("displayBuddySubscriberCount", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("displayBuddySubscriberCount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getProfileForChannel (seqid, input, output) {
    const args = new CallService_getProfileForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getProfileForChannel.length === 0) {
      Promise.resolve(this._handler.getProfileForChannel.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getProfileForChannel_result({success: result});
        output.writeMessageBegin("getProfileForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getProfileForChannel_result(err);
          output.writeMessageBegin("getProfileForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProfileForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getProfileForChannel((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getProfileForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getProfileForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProfileForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getUserTickets (seqid, input, output) {
    const args = new CallService_getUserTickets_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getUserTickets.length === 1) {
      Promise.resolve(this._handler.getUserTickets.bind(this._handler)(
        args.userMids
      )).then(result => {
        const result_obj = new CallService_getUserTickets_result({success: result});
        output.writeMessageBegin("getUserTickets", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getUserTickets_result(err);
          output.writeMessageBegin("getUserTickets", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserTickets", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getUserTickets(args.userMids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getUserTickets_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getUserTickets", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserTickets", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getOAFriendMids (seqid, input, output) {
    const args = new CallService_getOAFriendMids_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getOAFriendMids.length === 0) {
      Promise.resolve(this._handler.getOAFriendMids.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getOAFriendMids_result({success: result});
        output.writeMessageBegin("getOAFriendMids", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getOAFriendMids_result(err);
          output.writeMessageBegin("getOAFriendMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getOAFriendMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getOAFriendMids((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getOAFriendMids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getOAFriendMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getOAFriendMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_searchPaidCallUserRate (seqid, input, output) {
    const args = new CallService_searchPaidCallUserRate_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.searchPaidCallUserRate.length === 2) {
      Promise.resolve(this._handler.searchPaidCallUserRate.bind(this._handler)(
        args.countryCode,
        args.language
      )).then(result => {
        const result_obj = new CallService_searchPaidCallUserRate_result({success: result});
        output.writeMessageBegin("searchPaidCallUserRate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_searchPaidCallUserRate_result(err);
          output.writeMessageBegin("searchPaidCallUserRate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("searchPaidCallUserRate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.searchPaidCallUserRate(args.countryCode, args.language, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_searchPaidCallUserRate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("searchPaidCallUserRate", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("searchPaidCallUserRate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getJoinedGroupIdsForChannel (seqid, input, output) {
    const args = new CallService_getJoinedGroupIdsForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getJoinedGroupIdsForChannel.length === 0) {
      Promise.resolve(this._handler.getJoinedGroupIdsForChannel.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getJoinedGroupIdsForChannel_result({success: result});
        output.writeMessageBegin("getJoinedGroupIdsForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getJoinedGroupIdsForChannel_result(err);
          output.writeMessageBegin("getJoinedGroupIdsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getJoinedGroupIdsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getJoinedGroupIdsForChannel((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getJoinedGroupIdsForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getJoinedGroupIdsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getJoinedGroupIdsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_acquireGroupCallRoute (seqid, input, output) {
    const args = new CallService_acquireGroupCallRoute_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.acquireGroupCallRoute.length === 2) {
      Promise.resolve(this._handler.acquireGroupCallRoute.bind(this._handler)(
        args.chatMid,
        args.mediaType
      )).then(result => {
        const result_obj = new CallService_acquireGroupCallRoute_result({success: result});
        output.writeMessageBegin("acquireGroupCallRoute", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_acquireGroupCallRoute_result(err);
          output.writeMessageBegin("acquireGroupCallRoute", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acquireGroupCallRoute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.acquireGroupCallRoute(args.chatMid, args.mediaType, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_acquireGroupCallRoute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("acquireGroupCallRoute", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acquireGroupCallRoute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getUserMidsWhoAddedMe (seqid, input, output) {
    const args = new CallService_getUserMidsWhoAddedMe_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getUserMidsWhoAddedMe.length === 0) {
      Promise.resolve(this._handler.getUserMidsWhoAddedMe.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getUserMidsWhoAddedMe_result({success: result});
        output.writeMessageBegin("getUserMidsWhoAddedMe", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getUserMidsWhoAddedMe_result(err);
          output.writeMessageBegin("getUserMidsWhoAddedMe", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserMidsWhoAddedMe", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getUserMidsWhoAddedMe((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getUserMidsWhoAddedMe_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getUserMidsWhoAddedMe", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserMidsWhoAddedMe", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getIdentityCredential (seqid, input, output) {
    const args = new CallService_getIdentityCredential_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getIdentityCredential.length === 0) {
      Promise.resolve(this._handler.getIdentityCredential.bind(this._handler)(
      )).then(result => {
        const result_obj = new CallService_getIdentityCredential_result({success: result});
        output.writeMessageBegin("getIdentityCredential", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getIdentityCredential_result(err);
          output.writeMessageBegin("getIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getIdentityCredential((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getIdentityCredential_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_addOperationForChannel (seqid, input, output) {
    const args = new CallService_addOperationForChannel_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addOperationForChannel.length === 4) {
      Promise.resolve(this._handler.addOperationForChannel.bind(this._handler)(
        args.opType,
        args.param1,
        args.param2,
        args.param3
      )).then(result => {
        const result_obj = new CallService_addOperationForChannel_result({success: result});
        output.writeMessageBegin("addOperationForChannel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_addOperationForChannel_result(err);
          output.writeMessageBegin("addOperationForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addOperationForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.addOperationForChannel(args.opType, args.param1, args.param2, args.param3, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_addOperationForChannel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("addOperationForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addOperationForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getSimpleChannelContacts (seqid, input, output) {
    const args = new CallService_getSimpleChannelContacts_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getSimpleChannelContacts.length === 2) {
      Promise.resolve(this._handler.getSimpleChannelContacts.bind(this._handler)(
        args.ids,
        args.statusSticonFallbackDisabled
      )).then(result => {
        const result_obj = new CallService_getSimpleChannelContacts_result({success: result});
        output.writeMessageBegin("getSimpleChannelContacts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getSimpleChannelContacts_result(err);
          output.writeMessageBegin("getSimpleChannelContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSimpleChannelContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getSimpleChannelContacts(args.ids, args.statusSticonFallbackDisabled, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getSimpleChannelContacts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getSimpleChannelContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSimpleChannelContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getUserLastSentMessageTimeStamp (seqid, input, output) {
    const args = new CallService_getUserLastSentMessageTimeStamp_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getUserLastSentMessageTimeStamp.length === 1) {
      Promise.resolve(this._handler.getUserLastSentMessageTimeStamp.bind(this._handler)(
        args.mid
      )).then(result => {
        const result_obj = new CallService_getUserLastSentMessageTimeStamp_result({success: result});
        output.writeMessageBegin("getUserLastSentMessageTimeStamp", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new CallService_getUserLastSentMessageTimeStamp_result(err);
          output.writeMessageBegin("getUserLastSentMessageTimeStamp", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserLastSentMessageTimeStamp", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getUserLastSentMessageTimeStamp(args.mid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new CallService_getUserLastSentMessageTimeStamp_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getUserLastSentMessageTimeStamp", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserLastSentMessageTimeStamp", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
