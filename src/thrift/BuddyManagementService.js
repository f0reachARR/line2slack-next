//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = require('./talk_types');
//HELPER FUNCTIONS AND STRUCTURES

const BuddyManagementService_unregisterBuddy_args = class {
  constructor(args) {
    this.requestId = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_unregisterBuddy_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_unregisterBuddy_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_unregisterBuddy_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyContentMessageToMidsAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.msg = null;
    this.content = null;
    this.mids = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = new ttypes.Message(args.msg);
      }
      if (args.content !== undefined && args.content !== null) {
        this.content = args.content;
      }
      if (args.mids !== undefined && args.mids !== null) {
        this.mids = Thrift.copyList(args.mids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.msg = new ttypes.Message();
          this.msg.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.content = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.mids = [];
          const _rtmp31452 = input.readListBegin();
          const _size1451 = _rtmp31452.size || 0;
          for (let _i1453 = 0; _i1453 < _size1451; ++_i1453) {
            let elem1454 = null;
            elem1454 = input.readString();
            this.mids.push(elem1454);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToMidsAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
      this.msg.write(output);
      output.writeFieldEnd();
    }
    if (this.content !== null && this.content !== undefined) {
      output.writeFieldBegin('content', Thrift.Type.STRING, 3);
      output.writeBinary(this.content);
      output.writeFieldEnd();
    }
    if (this.mids !== null && this.mids !== undefined) {
      output.writeFieldBegin('mids', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.mids.length);
      for (let iter1455 in this.mids) {
        if (this.mids.hasOwnProperty(iter1455)) {
          iter1455 = this.mids[iter1455];
          output.writeString(iter1455);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyContentMessageToMidsAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToMidsAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getAllBuddyMembers_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getAllBuddyMembers_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getAllBuddyMembers_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp31457 = input.readListBegin();
          const _size1456 = _rtmp31457.size || 0;
          for (let _i1458 = 0; _i1458 < _size1456; ++_i1458) {
            let elem1459 = null;
            elem1459 = input.readString();
            this.success.push(elem1459);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getAllBuddyMembers_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter1460 in this.success) {
        if (this.success.hasOwnProperty(iter1460)) {
          iter1460 = this.success[iter1460];
          output.writeString(iter1460);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getActiveMemberMidsByBuddyMid_args = class {
  constructor(args) {
    this.buddyMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getActiveMemberMidsByBuddyMid_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getActiveMemberMidsByBuddyMid_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp31462 = input.readListBegin();
          const _size1461 = _rtmp31462.size || 0;
          for (let _i1463 = 0; _i1463 < _size1461; ++_i1463) {
            let elem1464 = null;
            elem1464 = input.readString();
            this.success.push(elem1464);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getActiveMemberMidsByBuddyMid_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter1465 in this.success) {
        if (this.success.hasOwnProperty(iter1465)) {
          iter1465 = this.success[iter1465];
          output.writeString(iter1465);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyProfileAttributes_args = class {
  constructor(args) {
    this.requestId = null;
    this.attributes = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.attributes !== undefined && args.attributes !== null) {
        this.attributes = Thrift.copyMap(args.attributes, [null]);
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.MAP) {
          this.attributes = {};
          const _rtmp31467 = input.readMapBegin();
          const _size1466 = _rtmp31467.size || 0;
          for (let _i1468 = 0; _i1468 < _size1466; ++_i1468) {
            let key1469 = null;
            let val1470 = null;
            key1469 = input.readString();
            val1470 = input.readString();
            this.attributes[key1469] = val1470;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyProfileAttributes_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.attributes !== null && this.attributes !== undefined) {
      output.writeFieldBegin('attributes', Thrift.Type.MAP, 2);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
      for (let kiter1471 in this.attributes) {
        if (this.attributes.hasOwnProperty(kiter1471)) {
          let viter1472 = this.attributes[kiter1471];
          output.writeString(kiter1471);
          output.writeString(viter1472);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 3);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyProfileAttributes_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.UpdateBuddyProfileResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.UpdateBuddyProfileResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyProfileAttributes_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_storePrivateMessages_args = class {
  constructor(args) {
    this.requestId = null;
    this.privateBotMessages = null;
    this.toMid = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.privateBotMessages !== undefined && args.privateBotMessages !== null) {
        this.privateBotMessages = Thrift.copyList(args.privateBotMessages, [ttypes.PrivateBotMessage]);
      }
      if (args.toMid !== undefined && args.toMid !== null) {
        this.toMid = args.toMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.privateBotMessages = [];
          const _rtmp31474 = input.readListBegin();
          const _size1473 = _rtmp31474.size || 0;
          for (let _i1475 = 0; _i1475 < _size1473; ++_i1475) {
            let elem1476 = null;
            elem1476 = new ttypes.PrivateBotMessage();
            elem1476.read(input);
            this.privateBotMessages.push(elem1476);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.toMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_storePrivateMessages_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.privateBotMessages !== null && this.privateBotMessages !== undefined) {
      output.writeFieldBegin('privateBotMessages', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.privateBotMessages.length);
      for (let iter1477 in this.privateBotMessages) {
        if (this.privateBotMessages.hasOwnProperty(iter1477)) {
          iter1477 = this.privateBotMessages[iter1477];
          iter1477.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.toMid !== null && this.toMid !== undefined) {
      output.writeFieldBegin('toMid', Thrift.Type.STRING, 3);
      output.writeString(this.toMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_storePrivateMessages_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.MessageStoreResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.MessageStoreResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_storePrivateMessages_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyProfileImageAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.image = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.image !== undefined && args.image !== null) {
        this.image = args.image;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.image = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyProfileImageAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.image !== null && this.image !== undefined) {
      output.writeFieldBegin('image', Thrift.Type.STRING, 2);
      output.writeBinary(this.image);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 3);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyProfileImageAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyProfileImageAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_notifyBuddyBlocked_args = class {
  constructor(args) {
    this.buddyMid = null;
    this.blockerMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.blockerMid !== undefined && args.blockerMid !== null) {
        this.blockerMid = args.blockerMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.blockerMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_notifyBuddyBlocked_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.blockerMid !== null && this.blockerMid !== undefined) {
      output.writeFieldBegin('blockerMid', Thrift.Type.STRING, 2);
      output.writeString(this.blockerMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_notifyBuddyBlocked_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_notifyBuddyBlocked_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getMemberCountByBuddyMid_args = class {
  constructor(args) {
    this.buddyMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getMemberCountByBuddyMid_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getMemberCountByBuddyMid_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getMemberCountByBuddyMid_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_isBuddyOnAirByMid_args = class {
  constructor(args) {
    this.buddyMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_isBuddyOnAirByMid_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_isBuddyOnAirByMid_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_isBuddyOnAirByMid_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitPrivateMessages_args = class {
  constructor(args) {
    this.requestId = null;
    this.privateMessageStoreRequestId = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.privateMessageStoreRequestId !== undefined && args.privateMessageStoreRequestId !== null) {
        this.privateMessageStoreRequestId = args.privateMessageStoreRequestId;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.privateMessageStoreRequestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitPrivateMessages_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.privateMessageStoreRequestId !== null && this.privateMessageStoreRequestId !== undefined) {
      output.writeFieldBegin('privateMessageStoreRequestId', Thrift.Type.STRING, 2);
      output.writeString(this.privateMessageStoreRequestId);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 3);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitPrivateMessages_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitPrivateMessages_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitPublicMessagesToMids_args = class {
  constructor(args) {
    this.requestId = null;
    this.publicMessageStoreRequestId = null;
    this.toMids = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.publicMessageStoreRequestId !== undefined && args.publicMessageStoreRequestId !== null) {
        this.publicMessageStoreRequestId = args.publicMessageStoreRequestId;
      }
      if (args.toMids !== undefined && args.toMids !== null) {
        this.toMids = Thrift.copyList(args.toMids, [null]);
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.publicMessageStoreRequestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.toMids = [];
          const _rtmp31479 = input.readListBegin();
          const _size1478 = _rtmp31479.size || 0;
          for (let _i1480 = 0; _i1480 < _size1478; ++_i1480) {
            let elem1481 = null;
            elem1481 = input.readString();
            this.toMids.push(elem1481);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitPublicMessagesToMids_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.publicMessageStoreRequestId !== null && this.publicMessageStoreRequestId !== undefined) {
      output.writeFieldBegin('publicMessageStoreRequestId', Thrift.Type.STRING, 2);
      output.writeString(this.publicMessageStoreRequestId);
      output.writeFieldEnd();
    }
    if (this.toMids !== null && this.toMids !== undefined) {
      output.writeFieldBegin('toMids', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.toMids.length);
      for (let iter1482 in this.toMids) {
        if (this.toMids.hasOwnProperty(iter1482)) {
          iter1482 = this.toMids[iter1482];
          output.writeString(iter1482);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 4);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitPublicMessagesToMids_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitPublicMessagesToMids_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_addBuddyMember_args = class {
  constructor(args) {
    this.requestId = null;
    this.userMid = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.userMid !== undefined && args.userMid !== null) {
        this.userMid = args.userMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_addBuddyMember_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.userMid !== null && this.userMid !== undefined) {
      output.writeFieldBegin('userMid', Thrift.Type.STRING, 2);
      output.writeString(this.userMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_addBuddyMember_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_addBuddyMember_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_linkAndSendBuddyContentMessageToMids_args = class {
  constructor(args) {
    this.requestId = null;
    this.msg = null;
    this.sourceContentId = null;
    this.mids = null;
    this.usePermanent = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = new ttypes.Message(args.msg);
      }
      if (args.sourceContentId !== undefined && args.sourceContentId !== null) {
        this.sourceContentId = args.sourceContentId;
      }
      if (args.mids !== undefined && args.mids !== null) {
        this.mids = Thrift.copyList(args.mids, [null]);
      }
      if (args.usePermanent !== undefined && args.usePermanent !== null) {
        this.usePermanent = args.usePermanent;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.msg = new ttypes.Message();
          this.msg.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.sourceContentId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.mids = [];
          const _rtmp31484 = input.readListBegin();
          const _size1483 = _rtmp31484.size || 0;
          for (let _i1485 = 0; _i1485 < _size1483; ++_i1485) {
            let elem1486 = null;
            elem1486 = input.readString();
            this.mids.push(elem1486);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.usePermanent = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToMids_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
      this.msg.write(output);
      output.writeFieldEnd();
    }
    if (this.sourceContentId !== null && this.sourceContentId !== undefined) {
      output.writeFieldBegin('sourceContentId', Thrift.Type.STRING, 3);
      output.writeString(this.sourceContentId);
      output.writeFieldEnd();
    }
    if (this.mids !== null && this.mids !== undefined) {
      output.writeFieldBegin('mids', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.mids.length);
      for (let iter1487 in this.mids) {
        if (this.mids.hasOwnProperty(iter1487)) {
          iter1487 = this.mids[iter1487];
          output.writeString(iter1487);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.usePermanent !== null && this.usePermanent !== undefined) {
      output.writeFieldBegin('usePermanent', Thrift.Type.BOOL, 5);
      output.writeBool(this.usePermanent);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_linkAndSendBuddyContentMessageToMids_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SendBuddyMessageResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SendBuddyMessageResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToMids_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_storeMessages_args = class {
  constructor(args) {
    this.requestIds = null;
    this.messageRequests = null;
    if (args) {
      if (args.requestIds !== undefined && args.requestIds !== null) {
        this.requestIds = Thrift.copyList(args.requestIds, [null]);
      }
      if (args.messageRequests !== undefined && args.messageRequests !== null) {
        this.messageRequests = Thrift.copyList(args.messageRequests, [ttypes.BuddyMessageRequest]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.requestIds = [];
          const _rtmp31489 = input.readListBegin();
          const _size1488 = _rtmp31489.size || 0;
          for (let _i1490 = 0; _i1490 < _size1488; ++_i1490) {
            let elem1491 = null;
            elem1491 = input.readString();
            this.requestIds.push(elem1491);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.messageRequests = [];
          const _rtmp31493 = input.readListBegin();
          const _size1492 = _rtmp31493.size || 0;
          for (let _i1494 = 0; _i1494 < _size1492; ++_i1494) {
            let elem1495 = null;
            elem1495 = new ttypes.BuddyMessageRequest();
            elem1495.read(input);
            this.messageRequests.push(elem1495);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_storeMessages_args');
    if (this.requestIds !== null && this.requestIds !== undefined) {
      output.writeFieldBegin('requestIds', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.requestIds.length);
      for (let iter1496 in this.requestIds) {
        if (this.requestIds.hasOwnProperty(iter1496)) {
          iter1496 = this.requestIds[iter1496];
          output.writeString(iter1496);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.messageRequests !== null && this.messageRequests !== undefined) {
      output.writeFieldBegin('messageRequests', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.messageRequests.length);
      for (let iter1497 in this.messageRequests) {
        if (this.messageRequests.hasOwnProperty(iter1497)) {
          iter1497 = this.messageRequests[iter1497];
          iter1497.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_storeMessages_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.SendBuddyMessageResult]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp31499 = input.readListBegin();
          const _size1498 = _rtmp31499.size || 0;
          for (let _i1500 = 0; _i1500 < _size1498; ++_i1500) {
            let elem1501 = null;
            elem1501 = new ttypes.SendBuddyMessageResult();
            elem1501.read(input);
            this.success.push(elem1501);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_storeMessages_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter1502 in this.success) {
        if (this.success.hasOwnProperty(iter1502)) {
          iter1502 = this.success[iter1502];
          iter1502.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_storeMessage_args = class {
  constructor(args) {
    this.requestId = null;
    this.messageRequest = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.messageRequest !== undefined && args.messageRequest !== null) {
        this.messageRequest = new ttypes.BuddyMessageRequest(args.messageRequest);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.messageRequest = new ttypes.BuddyMessageRequest();
          this.messageRequest.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_storeMessage_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.messageRequest !== null && this.messageRequest !== undefined) {
      output.writeFieldBegin('messageRequest', Thrift.Type.STRUCT, 2);
      this.messageRequest.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_storeMessage_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SendBuddyMessageResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SendBuddyMessageResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_storeMessage_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_registerBuddy_args = class {
  constructor(args) {
    this.buddyId = null;
    this.searchId = null;
    this.displayName = null;
    this.statusMeessage = null;
    this.picture = null;
    this.settings = null;
    if (args) {
      if (args.buddyId !== undefined && args.buddyId !== null) {
        this.buddyId = args.buddyId;
      }
      if (args.searchId !== undefined && args.searchId !== null) {
        this.searchId = args.searchId;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.statusMeessage !== undefined && args.statusMeessage !== null) {
        this.statusMeessage = args.statusMeessage;
      }
      if (args.picture !== undefined && args.picture !== null) {
        this.picture = args.picture;
      }
      if (args.settings !== undefined && args.settings !== null) {
        this.settings = Thrift.copyMap(args.settings, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.searchId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.statusMeessage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.picture = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.MAP) {
          this.settings = {};
          const _rtmp31504 = input.readMapBegin();
          const _size1503 = _rtmp31504.size || 0;
          for (let _i1505 = 0; _i1505 < _size1503; ++_i1505) {
            let key1506 = null;
            let val1507 = null;
            key1506 = input.readString();
            val1507 = input.readString();
            this.settings[key1506] = val1507;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_registerBuddy_args');
    if (this.buddyId !== null && this.buddyId !== undefined) {
      output.writeFieldBegin('buddyId', Thrift.Type.STRING, 2);
      output.writeString(this.buddyId);
      output.writeFieldEnd();
    }
    if (this.searchId !== null && this.searchId !== undefined) {
      output.writeFieldBegin('searchId', Thrift.Type.STRING, 3);
      output.writeString(this.searchId);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 4);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.statusMeessage !== null && this.statusMeessage !== undefined) {
      output.writeFieldBegin('statusMeessage', Thrift.Type.STRING, 5);
      output.writeString(this.statusMeessage);
      output.writeFieldEnd();
    }
    if (this.picture !== null && this.picture !== undefined) {
      output.writeFieldBegin('picture', Thrift.Type.STRING, 6);
      output.writeBinary(this.picture);
      output.writeFieldEnd();
    }
    if (this.settings !== null && this.settings !== undefined) {
      output.writeFieldBegin('settings', Thrift.Type.MAP, 7);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.settings));
      for (let kiter1508 in this.settings) {
        if (this.settings.hasOwnProperty(kiter1508)) {
          let viter1509 = this.settings[kiter1508];
          output.writeString(kiter1508);
          output.writeString(viter1509);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_registerBuddy_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_registerBuddy_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getUnregisterBuddyResult_args = class {
  constructor(args) {
    this.unregisterBuddyRequestId = null;
    this.buddyMid = null;
    if (args) {
      if (args.unregisterBuddyRequestId !== undefined && args.unregisterBuddyRequestId !== null) {
        this.unregisterBuddyRequestId = args.unregisterBuddyRequestId;
      }
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.unregisterBuddyRequestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getUnregisterBuddyResult_args');
    if (this.unregisterBuddyRequestId !== null && this.unregisterBuddyRequestId !== undefined) {
      output.writeFieldBegin('unregisterBuddyRequestId', Thrift.Type.STRING, 1);
      output.writeString(this.unregisterBuddyRequestId);
      output.writeFieldEnd();
    }
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getUnregisterBuddyResult_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.UnregisterBuddyResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.UnregisterBuddyResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getUnregisterBuddyResult_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddySearchId_args = class {
  constructor(args) {
    this.requestId = null;
    this.searchId = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.searchId !== undefined && args.searchId !== null) {
        this.searchId = args.searchId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.searchId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddySearchId_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.searchId !== null && this.searchId !== undefined) {
      output.writeFieldBegin('searchId', Thrift.Type.STRING, 2);
      output.writeString(this.searchId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddySearchId_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddySearchId_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_uploadBuddyContent_args = class {
  constructor(args) {
    this.contentType = null;
    this.content = null;
    if (args) {
      if (args.contentType !== undefined && args.contentType !== null) {
        this.contentType = args.contentType;
      }
      if (args.content !== undefined && args.content !== null) {
        this.content = args.content;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.contentType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.content = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_uploadBuddyContent_args');
    if (this.contentType !== null && this.contentType !== undefined) {
      output.writeFieldBegin('contentType', Thrift.Type.I32, 2);
      output.writeI32(this.contentType);
      output.writeFieldEnd();
    }
    if (this.content !== null && this.content !== undefined) {
      output.writeFieldBegin('content', Thrift.Type.STRING, 3);
      output.writeBinary(this.content);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_uploadBuddyContent_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_uploadBuddyContent_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyProfileImage_args = class {
  constructor(args) {
    this.requestId = null;
    this.image = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.image !== undefined && args.image !== null) {
        this.image = args.image;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.image = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyProfileImage_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.image !== null && this.image !== undefined) {
      output.writeFieldBegin('image', Thrift.Type.STRING, 2);
      output.writeBinary(this.image);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 3);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyProfileImage_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.UpdateBuddyProfileResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.UpdateBuddyProfileResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyProfileImage_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyMessageToAll_args = class {
  constructor(args) {
    this.requestId = null;
    this.msg = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = new ttypes.Message(args.msg);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.msg = new ttypes.Message();
          this.msg.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyMessageToAll_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
      this.msg.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyMessageToAll_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SendBuddyMessageResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SendBuddyMessageResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyMessageToAll_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitSendMessagesToAll_args = class {
  constructor(args) {
    this.requestId = null;
    this.commitRequestIdList = null;
    this.priority = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.commitRequestIdList !== undefined && args.commitRequestIdList !== null) {
        this.commitRequestIdList = Thrift.copyList(args.commitRequestIdList, [null]);
      }
      if (args.priority !== undefined && args.priority !== null) {
        this.priority = args.priority;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.commitRequestIdList = [];
          const _rtmp31511 = input.readListBegin();
          const _size1510 = _rtmp31511.size || 0;
          for (let _i1512 = 0; _i1512 < _size1510; ++_i1512) {
            let elem1513 = null;
            elem1513 = input.readString();
            this.commitRequestIdList.push(elem1513);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.priority = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitSendMessagesToAll_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.commitRequestIdList !== null && this.commitRequestIdList !== undefined) {
      output.writeFieldBegin('commitRequestIdList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.commitRequestIdList.length);
      for (let iter1514 in this.commitRequestIdList) {
        if (this.commitRequestIdList.hasOwnProperty(iter1514)) {
          iter1514 = this.commitRequestIdList[iter1514];
          output.writeString(iter1514);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.priority !== null && this.priority !== undefined) {
      output.writeFieldBegin('priority', Thrift.Type.I32, 3);
      output.writeI32(this.priority);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 4);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitSendMessagesToAll_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SendBuddyMessageResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SendBuddyMessageResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitSendMessagesToAll_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_downloadMessageContent_args = class {
  constructor(args) {
    this.requestId = null;
    this.messageId = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.messageId !== undefined && args.messageId !== null) {
        this.messageId = args.messageId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.messageId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_downloadMessageContent_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.messageId !== null && this.messageId !== undefined) {
      output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
      output.writeString(this.messageId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_downloadMessageContent_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_downloadMessageContent_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeBinary(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyProfileRichMenu_args = class {
  constructor(args) {
    this.requestId = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyProfileRichMenu_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 2);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyProfileRichMenu_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.UpdateBuddyProfileResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.UpdateBuddyProfileResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyProfileRichMenu_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_setBuddyOnAir_args = class {
  constructor(args) {
    this.requestId = null;
    this.onAir = null;
    this.label = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.onAir !== undefined && args.onAir !== null) {
        this.onAir = args.onAir;
      }
      if (args.label !== undefined && args.label !== null) {
        this.label = args.label;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.onAir = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.label = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_setBuddyOnAir_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.onAir !== null && this.onAir !== undefined) {
      output.writeFieldBegin('onAir', Thrift.Type.BOOL, 2);
      output.writeBool(this.onAir);
      output.writeFieldEnd();
    }
    if (this.label !== null && this.label !== undefined) {
      output.writeFieldBegin('label', Thrift.Type.I32, 3);
      output.writeI32(this.label);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_setBuddyOnAir_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SetBuddyOnAirResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SetBuddyOnAirResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_setBuddyOnAir_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_unblockBuddyMember_args = class {
  constructor(args) {
    this.requestId = null;
    this.mid = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_unblockBuddyMember_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_unblockBuddyMember_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_unblockBuddyMember_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_linkAndSendBuddyContentMessageToAll_args = class {
  constructor(args) {
    this.requestId = null;
    this.msg = null;
    this.sourceContentId = null;
    this.usePermanent = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = new ttypes.Message(args.msg);
      }
      if (args.sourceContentId !== undefined && args.sourceContentId !== null) {
        this.sourceContentId = args.sourceContentId;
      }
      if (args.usePermanent !== undefined && args.usePermanent !== null) {
        this.usePermanent = args.usePermanent;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.msg = new ttypes.Message();
          this.msg.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.sourceContentId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.usePermanent = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToAll_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
      this.msg.write(output);
      output.writeFieldEnd();
    }
    if (this.sourceContentId !== null && this.sourceContentId !== undefined) {
      output.writeFieldBegin('sourceContentId', Thrift.Type.STRING, 3);
      output.writeString(this.sourceContentId);
      output.writeFieldEnd();
    }
    if (this.usePermanent !== null && this.usePermanent !== undefined) {
      output.writeFieldBegin('usePermanent', Thrift.Type.BOOL, 4);
      output.writeBool(this.usePermanent);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_linkAndSendBuddyContentMessageToAll_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SendBuddyMessageResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SendBuddyMessageResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToAll_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_removeBuddyMember_args = class {
  constructor(args) {
    this.requestId = null;
    this.userMid = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.userMid !== undefined && args.userMid !== null) {
        this.userMid = args.userMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_removeBuddyMember_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.userMid !== null && this.userMid !== undefined) {
      output.writeFieldBegin('userMid', Thrift.Type.STRING, 2);
      output.writeString(this.userMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_removeBuddyMember_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_removeBuddyMember_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitSendMessagesToMidAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.storeMessagesRequestIds = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.storeMessagesRequestIds !== undefined && args.storeMessagesRequestIds !== null) {
        this.storeMessagesRequestIds = Thrift.copyList(args.storeMessagesRequestIds, [null]);
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.storeMessagesRequestIds = [];
          const _rtmp31516 = input.readListBegin();
          const _size1515 = _rtmp31516.size || 0;
          for (let _i1517 = 0; _i1517 < _size1515; ++_i1517) {
            let elem1518 = null;
            elem1518 = input.readString();
            this.storeMessagesRequestIds.push(elem1518);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitSendMessagesToMidAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.storeMessagesRequestIds !== null && this.storeMessagesRequestIds !== undefined) {
      output.writeFieldBegin('storeMessagesRequestIds', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.storeMessagesRequestIds.length);
      for (let iter1519 in this.storeMessagesRequestIds) {
        if (this.storeMessagesRequestIds.hasOwnProperty(iter1519)) {
          iter1519 = this.storeMessagesRequestIds[iter1519];
          output.writeString(iter1519);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 3);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitSendMessagesToMidAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitSendMessagesToMidAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getUpdateBuddyProfileResult_args = class {
  constructor(args) {
    this.updateBuddyProfileRequestId = null;
    if (args) {
      if (args.updateBuddyProfileRequestId !== undefined && args.updateBuddyProfileRequestId !== null) {
        this.updateBuddyProfileRequestId = args.updateBuddyProfileRequestId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.updateBuddyProfileRequestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getUpdateBuddyProfileResult_args');
    if (this.updateBuddyProfileRequestId !== null && this.updateBuddyProfileRequestId !== undefined) {
      output.writeFieldBegin('updateBuddyProfileRequestId', Thrift.Type.STRING, 1);
      output.writeString(this.updateBuddyProfileRequestId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getUpdateBuddyProfileResult_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.UpdateBuddyProfileResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.UpdateBuddyProfileResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getUpdateBuddyProfileResult_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_notifyBuddyUnblocked_args = class {
  constructor(args) {
    this.buddyMid = null;
    this.blockerMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.blockerMid !== undefined && args.blockerMid !== null) {
        this.blockerMid = args.blockerMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.blockerMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_notifyBuddyUnblocked_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.blockerMid !== null && this.blockerMid !== undefined) {
      output.writeFieldBegin('blockerMid', Thrift.Type.STRING, 2);
      output.writeString(this.blockerMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_notifyBuddyUnblocked_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_notifyBuddyUnblocked_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyProfileRichMenuAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyProfileRichMenuAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 2);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyProfileRichMenuAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyProfileRichMenuAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getBuddyProfile_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getBuddyProfile_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getBuddyProfile_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyProfile(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyProfile();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getBuddyProfile_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getBlockedBuddyMembers_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getBlockedBuddyMembers_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getBlockedBuddyMembers_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp31521 = input.readListBegin();
          const _size1520 = _rtmp31521.size || 0;
          for (let _i1522 = 0; _i1522 < _size1520; ++_i1522) {
            let elem1523 = null;
            elem1523 = input.readString();
            this.success.push(elem1523);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getBlockedBuddyMembers_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter1524 in this.success) {
        if (this.success.hasOwnProperty(iter1524)) {
          iter1524 = this.success[iter1524];
          output.writeString(iter1524);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitPublicMessagesToAll_args = class {
  constructor(args) {
    this.requestId = null;
    this.publicMessageStoreRequestId = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.publicMessageStoreRequestId !== undefined && args.publicMessageStoreRequestId !== null) {
        this.publicMessageStoreRequestId = args.publicMessageStoreRequestId;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.publicMessageStoreRequestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitPublicMessagesToAll_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.publicMessageStoreRequestId !== null && this.publicMessageStoreRequestId !== undefined) {
      output.writeFieldBegin('publicMessageStoreRequestId', Thrift.Type.STRING, 2);
      output.writeString(this.publicMessageStoreRequestId);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 3);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitPublicMessagesToAll_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitPublicMessagesToAll_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.msg = null;
    this.sourceContentId = null;
    this.usePermanent = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = new ttypes.Message(args.msg);
      }
      if (args.sourceContentId !== undefined && args.sourceContentId !== null) {
        this.sourceContentId = args.sourceContentId;
      }
      if (args.usePermanent !== undefined && args.usePermanent !== null) {
        this.usePermanent = args.usePermanent;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.msg = new ttypes.Message();
          this.msg.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.sourceContentId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.usePermanent = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
      this.msg.write(output);
      output.writeFieldEnd();
    }
    if (this.sourceContentId !== null && this.sourceContentId !== undefined) {
      output.writeFieldBegin('sourceContentId', Thrift.Type.STRING, 3);
      output.writeString(this.sourceContentId);
      output.writeFieldEnd();
    }
    if (this.usePermanent !== null && this.usePermanent !== undefined) {
      output.writeFieldBegin('usePermanent', Thrift.Type.BOOL, 4);
      output.writeBool(this.usePermanent);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyContentMessageToAllAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.msg = null;
    this.content = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = new ttypes.Message(args.msg);
      }
      if (args.content !== undefined && args.content !== null) {
        this.content = args.content;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.msg = new ttypes.Message();
          this.msg.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.content = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToAllAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
      this.msg.write(output);
      output.writeFieldEnd();
    }
    if (this.content !== null && this.content !== undefined) {
      output.writeFieldBegin('content', Thrift.Type.STRING, 3);
      output.writeBinary(this.content);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyContentMessageToAllAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToAllAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getSetBuddyOnAirResult_args = class {
  constructor(args) {
    this.setBuddyOnAirRequestId = null;
    if (args) {
      if (args.setBuddyOnAirRequestId !== undefined && args.setBuddyOnAirRequestId !== null) {
        this.setBuddyOnAirRequestId = args.setBuddyOnAirRequestId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.setBuddyOnAirRequestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getSetBuddyOnAirResult_args');
    if (this.setBuddyOnAirRequestId !== null && this.setBuddyOnAirRequestId !== undefined) {
      output.writeFieldBegin('setBuddyOnAirRequestId', Thrift.Type.STRING, 1);
      output.writeString(this.setBuddyOnAirRequestId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getSetBuddyOnAirResult_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SetBuddyOnAirResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SetBuddyOnAirResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getSetBuddyOnAirResult_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitSendMessagesToMidsAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.commitRequestIdList = null;
    this.mids = null;
    this.priority = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.commitRequestIdList !== undefined && args.commitRequestIdList !== null) {
        this.commitRequestIdList = Thrift.copyList(args.commitRequestIdList, [null]);
      }
      if (args.mids !== undefined && args.mids !== null) {
        this.mids = Thrift.copyList(args.mids, [null]);
      }
      if (args.priority !== undefined && args.priority !== null) {
        this.priority = args.priority;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.commitRequestIdList = [];
          const _rtmp31526 = input.readListBegin();
          const _size1525 = _rtmp31526.size || 0;
          for (let _i1527 = 0; _i1527 < _size1525; ++_i1527) {
            let elem1528 = null;
            elem1528 = input.readString();
            this.commitRequestIdList.push(elem1528);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.mids = [];
          const _rtmp31530 = input.readListBegin();
          const _size1529 = _rtmp31530.size || 0;
          for (let _i1531 = 0; _i1531 < _size1529; ++_i1531) {
            let elem1532 = null;
            elem1532 = input.readString();
            this.mids.push(elem1532);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.priority = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitSendMessagesToMidsAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.commitRequestIdList !== null && this.commitRequestIdList !== undefined) {
      output.writeFieldBegin('commitRequestIdList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.commitRequestIdList.length);
      for (let iter1533 in this.commitRequestIdList) {
        if (this.commitRequestIdList.hasOwnProperty(iter1533)) {
          iter1533 = this.commitRequestIdList[iter1533];
          output.writeString(iter1533);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.mids !== null && this.mids !== undefined) {
      output.writeFieldBegin('mids', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.mids.length);
      for (let iter1534 in this.mids) {
        if (this.mids.hasOwnProperty(iter1534)) {
          iter1534 = this.mids[iter1534];
          output.writeString(iter1534);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.priority !== null && this.priority !== undefined) {
      output.writeFieldBegin('priority', Thrift.Type.I32, 4);
      output.writeI32(this.priority);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 5);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitSendMessagesToMidsAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitSendMessagesToMidsAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitSendMessagesToStoredMidsAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.commitRequestIdList = null;
    this.storedMidFilename = null;
    this.priority = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.commitRequestIdList !== undefined && args.commitRequestIdList !== null) {
        this.commitRequestIdList = Thrift.copyList(args.commitRequestIdList, [null]);
      }
      if (args.storedMidFilename !== undefined && args.storedMidFilename !== null) {
        this.storedMidFilename = args.storedMidFilename;
      }
      if (args.priority !== undefined && args.priority !== null) {
        this.priority = args.priority;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.commitRequestIdList = [];
          const _rtmp31536 = input.readListBegin();
          const _size1535 = _rtmp31536.size || 0;
          for (let _i1537 = 0; _i1537 < _size1535; ++_i1537) {
            let elem1538 = null;
            elem1538 = input.readString();
            this.commitRequestIdList.push(elem1538);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.storedMidFilename = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.priority = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitSendMessagesToStoredMidsAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.commitRequestIdList !== null && this.commitRequestIdList !== undefined) {
      output.writeFieldBegin('commitRequestIdList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.commitRequestIdList.length);
      for (let iter1539 in this.commitRequestIdList) {
        if (this.commitRequestIdList.hasOwnProperty(iter1539)) {
          iter1539 = this.commitRequestIdList[iter1539];
          output.writeString(iter1539);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.storedMidFilename !== null && this.storedMidFilename !== undefined) {
      output.writeFieldBegin('storedMidFilename', Thrift.Type.STRING, 3);
      output.writeString(this.storedMidFilename);
      output.writeFieldEnd();
    }
    if (this.priority !== null && this.priority !== undefined) {
      output.writeFieldBegin('priority', Thrift.Type.I32, 4);
      output.writeI32(this.priority);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 5);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitSendMessagesToStoredMidsAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitSendMessagesToStoredMidsAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyAdminProfileAttribute_args = class {
  constructor(args) {
    this.requestId = null;
    this.attributes = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.attributes !== undefined && args.attributes !== null) {
        this.attributes = Thrift.copyMap(args.attributes, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.MAP) {
          this.attributes = {};
          const _rtmp31541 = input.readMapBegin();
          const _size1540 = _rtmp31541.size || 0;
          for (let _i1542 = 0; _i1542 < _size1540; ++_i1542) {
            let key1543 = null;
            let val1544 = null;
            key1543 = input.readString();
            val1544 = input.readString();
            this.attributes[key1543] = val1544;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyAdminProfileAttribute_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.attributes !== null && this.attributes !== undefined) {
      output.writeFieldBegin('attributes', Thrift.Type.MAP, 2);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
      for (let kiter1545 in this.attributes) {
        if (this.attributes.hasOwnProperty(kiter1545)) {
          let viter1546 = this.attributes[kiter1545];
          output.writeString(kiter1545);
          output.writeString(viter1546);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyAdminProfileAttribute_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyAdminProfileAttribute_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_setBuddyOnAirAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.onAir = null;
    this.label = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.onAir !== undefined && args.onAir !== null) {
        this.onAir = args.onAir;
      }
      if (args.label !== undefined && args.label !== null) {
        this.label = args.label;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.onAir = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.label = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_setBuddyOnAirAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.onAir !== null && this.onAir !== undefined) {
      output.writeFieldBegin('onAir', Thrift.Type.BOOL, 2);
      output.writeBool(this.onAir);
      output.writeFieldEnd();
    }
    if (this.label !== null && this.label !== undefined) {
      output.writeFieldBegin('label', Thrift.Type.I32, 3);
      output.writeI32(this.label);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_setBuddyOnAirAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_setBuddyOnAirAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitSendMessagesToMids_args = class {
  constructor(args) {
    this.requestId = null;
    this.commitRequestIdList = null;
    this.mids = null;
    this.priority = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.commitRequestIdList !== undefined && args.commitRequestIdList !== null) {
        this.commitRequestIdList = Thrift.copyList(args.commitRequestIdList, [null]);
      }
      if (args.mids !== undefined && args.mids !== null) {
        this.mids = Thrift.copyList(args.mids, [null]);
      }
      if (args.priority !== undefined && args.priority !== null) {
        this.priority = args.priority;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.commitRequestIdList = [];
          const _rtmp31548 = input.readListBegin();
          const _size1547 = _rtmp31548.size || 0;
          for (let _i1549 = 0; _i1549 < _size1547; ++_i1549) {
            let elem1550 = null;
            elem1550 = input.readString();
            this.commitRequestIdList.push(elem1550);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.mids = [];
          const _rtmp31552 = input.readListBegin();
          const _size1551 = _rtmp31552.size || 0;
          for (let _i1553 = 0; _i1553 < _size1551; ++_i1553) {
            let elem1554 = null;
            elem1554 = input.readString();
            this.mids.push(elem1554);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.priority = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitSendMessagesToMids_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.commitRequestIdList !== null && this.commitRequestIdList !== undefined) {
      output.writeFieldBegin('commitRequestIdList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.commitRequestIdList.length);
      for (let iter1555 in this.commitRequestIdList) {
        if (this.commitRequestIdList.hasOwnProperty(iter1555)) {
          iter1555 = this.commitRequestIdList[iter1555];
          output.writeString(iter1555);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.mids !== null && this.mids !== undefined) {
      output.writeFieldBegin('mids', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.mids.length);
      for (let iter1556 in this.mids) {
        if (this.mids.hasOwnProperty(iter1556)) {
          iter1556 = this.mids[iter1556];
          output.writeString(iter1556);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.priority !== null && this.priority !== undefined) {
      output.writeFieldBegin('priority', Thrift.Type.I32, 4);
      output.writeI32(this.priority);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 5);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitSendMessagesToMids_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SendBuddyMessageResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SendBuddyMessageResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitSendMessagesToMids_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyContentMessageToAll_args = class {
  constructor(args) {
    this.requestId = null;
    this.msg = null;
    this.content = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = new ttypes.Message(args.msg);
      }
      if (args.content !== undefined && args.content !== null) {
        this.content = args.content;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.msg = new ttypes.Message();
          this.msg.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.content = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToAll_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
      this.msg.write(output);
      output.writeFieldEnd();
    }
    if (this.content !== null && this.content !== undefined) {
      output.writeFieldBegin('content', Thrift.Type.STRING, 3);
      output.writeBinary(this.content);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyContentMessageToAll_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SendBuddyMessageResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SendBuddyMessageResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToAll_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddySettings_args = class {
  constructor(args) {
    this.settings = null;
    if (args) {
      if (args.settings !== undefined && args.settings !== null) {
        this.settings = Thrift.copyMap(args.settings, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.MAP) {
          this.settings = {};
          const _rtmp31558 = input.readMapBegin();
          const _size1557 = _rtmp31558.size || 0;
          for (let _i1559 = 0; _i1559 < _size1557; ++_i1559) {
            let key1560 = null;
            let val1561 = null;
            key1560 = input.readString();
            val1561 = input.readString();
            this.settings[key1560] = val1561;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddySettings_args');
    if (this.settings !== null && this.settings !== undefined) {
      output.writeFieldBegin('settings', Thrift.Type.MAP, 2);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.settings));
      for (let kiter1562 in this.settings) {
        if (this.settings.hasOwnProperty(kiter1562)) {
          let viter1563 = this.settings[kiter1562];
          output.writeString(kiter1562);
          output.writeString(viter1563);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddySettings_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddySettings_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_notifyBuddySubscribed_args = class {
  constructor(args) {
    this.buddyMid = null;
    this.subscriberMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.subscriberMid !== undefined && args.subscriberMid !== null) {
        this.subscriberMid = args.subscriberMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.subscriberMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_notifyBuddySubscribed_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.subscriberMid !== null && this.subscriberMid !== undefined) {
      output.writeFieldBegin('subscriberMid', Thrift.Type.STRING, 2);
      output.writeString(this.subscriberMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_notifyBuddySubscribed_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_notifyBuddySubscribed_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_registerBuddyAdmin_args = class {
  constructor(args) {
    this.buddyId = null;
    this.searchId = null;
    this.displayName = null;
    this.statusMessage = null;
    this.picture = null;
    if (args) {
      if (args.buddyId !== undefined && args.buddyId !== null) {
        this.buddyId = args.buddyId;
      }
      if (args.searchId !== undefined && args.searchId !== null) {
        this.searchId = args.searchId;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.statusMessage !== undefined && args.statusMessage !== null) {
        this.statusMessage = args.statusMessage;
      }
      if (args.picture !== undefined && args.picture !== null) {
        this.picture = args.picture;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.searchId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.statusMessage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.picture = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_registerBuddyAdmin_args');
    if (this.buddyId !== null && this.buddyId !== undefined) {
      output.writeFieldBegin('buddyId', Thrift.Type.STRING, 2);
      output.writeString(this.buddyId);
      output.writeFieldEnd();
    }
    if (this.searchId !== null && this.searchId !== undefined) {
      output.writeFieldBegin('searchId', Thrift.Type.STRING, 3);
      output.writeString(this.searchId);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 4);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.statusMessage !== null && this.statusMessage !== undefined) {
      output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
      output.writeString(this.statusMessage);
      output.writeFieldEnd();
    }
    if (this.picture !== null && this.picture !== undefined) {
      output.writeFieldBegin('picture', Thrift.Type.STRING, 6);
      output.writeBinary(this.picture);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_registerBuddyAdmin_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_registerBuddyAdmin_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getBlockerCountByBuddyMid_args = class {
  constructor(args) {
    this.buddyMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getBlockerCountByBuddyMid_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getBlockerCountByBuddyMid_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getBlockerCountByBuddyMid_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_reissueContactTicket_args = class {
  constructor(args) {
    this.expirationTime = null;
    this.maxUseCount = null;
    if (args) {
      if (args.expirationTime !== undefined && args.expirationTime !== null) {
        this.expirationTime = args.expirationTime;
      }
      if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
        this.maxUseCount = args.maxUseCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.expirationTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.maxUseCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_reissueContactTicket_args');
    if (this.expirationTime !== null && this.expirationTime !== undefined) {
      output.writeFieldBegin('expirationTime', Thrift.Type.I64, 3);
      output.writeI64(this.expirationTime);
      output.writeFieldEnd();
    }
    if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
      output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 4);
      output.writeI32(this.maxUseCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_reissueContactTicket_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_reissueContactTicket_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_validateContacts_args = class {
  constructor(args) {
    this.userMids = null;
    if (args) {
      if (args.userMids !== undefined && args.userMids !== null) {
        this.userMids = Thrift.copyList(args.userMids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.userMids = [];
          const _rtmp31565 = input.readListBegin();
          const _size1564 = _rtmp31565.size || 0;
          for (let _i1566 = 0; _i1566 < _size1564; ++_i1566) {
            let elem1567 = null;
            elem1567 = input.readString();
            this.userMids.push(elem1567);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_validateContacts_args');
    if (this.userMids !== null && this.userMids !== undefined) {
      output.writeFieldBegin('userMids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.userMids.length);
      for (let iter1568 in this.userMids) {
        if (this.userMids.hasOwnProperty(iter1568)) {
          iter1568 = this.userMids[iter1568];
          output.writeString(iter1568);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_validateContacts_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ValidateContactsResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ValidateContactsResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_validateContacts_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyMessageToMidsAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.msg = null;
    this.mids = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = new ttypes.Message(args.msg);
      }
      if (args.mids !== undefined && args.mids !== null) {
        this.mids = Thrift.copyList(args.mids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.msg = new ttypes.Message();
          this.msg.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.mids = [];
          const _rtmp31570 = input.readListBegin();
          const _size1569 = _rtmp31570.size || 0;
          for (let _i1571 = 0; _i1571 < _size1569; ++_i1571) {
            let elem1572 = null;
            elem1572 = input.readString();
            this.mids.push(elem1572);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyMessageToMidsAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
      this.msg.write(output);
      output.writeFieldEnd();
    }
    if (this.mids !== null && this.mids !== undefined) {
      output.writeFieldBegin('mids', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.mids.length);
      for (let iter1573 in this.mids) {
        if (this.mids.hasOwnProperty(iter1573)) {
          iter1573 = this.mids[iter1573];
          output.writeString(iter1573);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyMessageToMidsAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyMessageToMidsAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_unregisterBuddyAsync_args = class {
  constructor(args) {
    this.requestId = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_unregisterBuddyAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_unregisterBuddyAsync_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_unregisterBuddyAsync_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getProfileImageUrlHash_args = class {
  constructor(args) {
    this.requestId = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getProfileImageUrlHash_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getProfileImageUrlHash_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getProfileImageUrlHash_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_blockBuddyMember_args = class {
  constructor(args) {
    this.requestId = null;
    this.mid = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_blockBuddyMember_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_blockBuddyMember_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_blockBuddyMember_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendIndividualEventToAllAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.buddyMid = null;
    this.notificationStatus = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.notificationStatus !== undefined && args.notificationStatus !== null) {
        this.notificationStatus = args.notificationStatus;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.notificationStatus = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendIndividualEventToAllAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.notificationStatus !== null && this.notificationStatus !== undefined) {
      output.writeFieldBegin('notificationStatus', Thrift.Type.I32, 3);
      output.writeI32(this.notificationStatus);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendIndividualEventToAllAsync_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendIndividualEventToAllAsync_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendChatCheckedByWatermark_args = class {
  constructor(args) {
    this.seq = null;
    this.mid = null;
    this.watermark = null;
    this.sessionId = null;
    if (args) {
      if (args.seq !== undefined && args.seq !== null) {
        this.seq = args.seq;
      }
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.watermark !== undefined && args.watermark !== null) {
        this.watermark = args.watermark;
      }
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.seq = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.watermark = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BYTE) {
          this.sessionId = input.readByte();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendChatCheckedByWatermark_args');
    if (this.seq !== null && this.seq !== undefined) {
      output.writeFieldBegin('seq', Thrift.Type.I32, 1);
      output.writeI32(this.seq);
      output.writeFieldEnd();
    }
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.watermark !== null && this.watermark !== undefined) {
      output.writeFieldBegin('watermark', Thrift.Type.I64, 3);
      output.writeI64(this.watermark);
      output.writeFieldEnd();
    }
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.BYTE, 4);
      output.writeByte(this.sessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendChatCheckedByWatermark_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendChatCheckedByWatermark_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_deleteBotProfileImage_args = class {
  constructor(args) {
    this.requestId = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_deleteBotProfileImage_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_deleteBotProfileImage_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_deleteBotProfileImage_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyContentMessageToMids_args = class {
  constructor(args) {
    this.requestId = null;
    this.msg = null;
    this.content = null;
    this.mids = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = new ttypes.Message(args.msg);
      }
      if (args.content !== undefined && args.content !== null) {
        this.content = args.content;
      }
      if (args.mids !== undefined && args.mids !== null) {
        this.mids = Thrift.copyList(args.mids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.msg = new ttypes.Message();
          this.msg.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.content = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.mids = [];
          const _rtmp31575 = input.readListBegin();
          const _size1574 = _rtmp31575.size || 0;
          for (let _i1576 = 0; _i1576 < _size1574; ++_i1576) {
            let elem1577 = null;
            elem1577 = input.readString();
            this.mids.push(elem1577);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToMids_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
      this.msg.write(output);
      output.writeFieldEnd();
    }
    if (this.content !== null && this.content !== undefined) {
      output.writeFieldBegin('content', Thrift.Type.STRING, 3);
      output.writeBinary(this.content);
      output.writeFieldEnd();
    }
    if (this.mids !== null && this.mids !== undefined) {
      output.writeFieldBegin('mids', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.mids.length);
      for (let iter1578 in this.mids) {
        if (this.mids.hasOwnProperty(iter1578)) {
          iter1578 = this.mids[iter1578];
          output.writeString(iter1578);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyContentMessageToMids_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SendBuddyMessageResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SendBuddyMessageResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyContentMessageToMids_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_unregisterBuddyAdmin_args = class {
  constructor(args) {
    this.requestId = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_unregisterBuddyAdmin_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_unregisterBuddyAdmin_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_unregisterBuddyAdmin_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitPublicMessagesToStoredMids_args = class {
  constructor(args) {
    this.requestId = null;
    this.publicMessageStoreRequestId = null;
    this.storedMidFilename = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.publicMessageStoreRequestId !== undefined && args.publicMessageStoreRequestId !== null) {
        this.publicMessageStoreRequestId = args.publicMessageStoreRequestId;
      }
      if (args.storedMidFilename !== undefined && args.storedMidFilename !== null) {
        this.storedMidFilename = args.storedMidFilename;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.publicMessageStoreRequestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.storedMidFilename = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitPublicMessagesToStoredMids_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.publicMessageStoreRequestId !== null && this.publicMessageStoreRequestId !== undefined) {
      output.writeFieldBegin('publicMessageStoreRequestId', Thrift.Type.STRING, 2);
      output.writeString(this.publicMessageStoreRequestId);
      output.writeFieldEnd();
    }
    if (this.storedMidFilename !== null && this.storedMidFilename !== undefined) {
      output.writeFieldBegin('storedMidFilename', Thrift.Type.STRING, 3);
      output.writeString(this.storedMidFilename);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 4);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitPublicMessagesToStoredMids_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitPublicMessagesToStoredMids_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_removeBuddyMembers_args = class {
  constructor(args) {
    this.requestId = null;
    this.userMids = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.userMids !== undefined && args.userMids !== null) {
        this.userMids = Thrift.copyList(args.userMids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.userMids = [];
          const _rtmp31580 = input.readListBegin();
          const _size1579 = _rtmp31580.size || 0;
          for (let _i1581 = 0; _i1581 < _size1579; ++_i1581) {
            let elem1582 = null;
            elem1582 = input.readString();
            this.userMids.push(elem1582);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_removeBuddyMembers_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.userMids !== null && this.userMids !== undefined) {
      output.writeFieldBegin('userMids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.userMids.length);
      for (let iter1583 in this.userMids) {
        if (this.userMids.hasOwnProperty(iter1583)) {
          iter1583 = this.userMids[iter1583];
          output.writeString(iter1583);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_removeBuddyMembers_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_removeBuddyMembers_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_storePublicMessages_args = class {
  constructor(args) {
    this.requestId = null;
    this.messages = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.messages !== undefined && args.messages !== null) {
        this.messages = Thrift.copyList(args.messages, [ttypes.Message]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.messages = [];
          const _rtmp31585 = input.readListBegin();
          const _size1584 = _rtmp31585.size || 0;
          for (let _i1586 = 0; _i1586 < _size1584; ++_i1586) {
            let elem1587 = null;
            elem1587 = new ttypes.Message();
            elem1587.read(input);
            this.messages.push(elem1587);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_storePublicMessages_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.messages !== null && this.messages !== undefined) {
      output.writeFieldBegin('messages', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.messages.length);
      for (let iter1588 in this.messages) {
        if (this.messages.hasOwnProperty(iter1588)) {
          iter1588 = this.messages[iter1588];
          iter1588.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_storePublicMessages_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.MessageStoreResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.MessageStoreResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_storePublicMessages_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_addBuddyMembers_args = class {
  constructor(args) {
    this.requestId = null;
    this.userMids = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.userMids !== undefined && args.userMids !== null) {
        this.userMids = Thrift.copyList(args.userMids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.userMids = [];
          const _rtmp31590 = input.readListBegin();
          const _size1589 = _rtmp31590.size || 0;
          for (let _i1591 = 0; _i1591 < _size1589; ++_i1591) {
            let elem1592 = null;
            elem1592 = input.readString();
            this.userMids.push(elem1592);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_addBuddyMembers_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.userMids !== null && this.userMids !== undefined) {
      output.writeFieldBegin('userMids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.userMids.length);
      for (let iter1593 in this.userMids) {
        if (this.userMids.hasOwnProperty(iter1593)) {
          iter1593 = this.userMids[iter1593];
          output.writeString(iter1593);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_addBuddyMembers_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_addBuddyMembers_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getMessageCommitResult_args = class {
  constructor(args) {
    this.messageCommitRequestId = null;
    if (args) {
      if (args.messageCommitRequestId !== undefined && args.messageCommitRequestId !== null) {
        this.messageCommitRequestId = args.messageCommitRequestId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.messageCommitRequestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getMessageCommitResult_args');
    if (this.messageCommitRequestId !== null && this.messageCommitRequestId !== undefined) {
      output.writeFieldBegin('messageCommitRequestId', Thrift.Type.STRING, 1);
      output.writeString(this.messageCommitRequestId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getMessageCommitResult_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.MessageCommitResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.MessageCommitResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getMessageCommitResult_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getBuddyDetailByMid_args = class {
  constructor(args) {
    this.buddyMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getBuddyDetailByMid_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getBuddyDetailByMid_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyDetail(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyDetail();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getBuddyDetailByMid_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_notifyBuddySubscriberUnregistered_args = class {
  constructor(args) {
    this.buddyMid = null;
    this.userMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.userMid !== undefined && args.userMid !== null) {
        this.userMid = args.userMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_notifyBuddySubscriberUnregistered_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.userMid !== null && this.userMid !== undefined) {
      output.writeFieldBegin('userMid', Thrift.Type.STRING, 2);
      output.writeString(this.userMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_notifyBuddySubscriberUnregistered_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_notifyBuddySubscriberUnregistered_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyMessageToAllAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.msg = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = new ttypes.Message(args.msg);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.msg = new ttypes.Message();
          this.msg.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyMessageToAllAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
      this.msg.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyMessageToAllAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyMessageToAllAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyMessageToMids_args = class {
  constructor(args) {
    this.requestId = null;
    this.msg = null;
    this.mids = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = new ttypes.Message(args.msg);
      }
      if (args.mids !== undefined && args.mids !== null) {
        this.mids = Thrift.copyList(args.mids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.msg = new ttypes.Message();
          this.msg.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.mids = [];
          const _rtmp31595 = input.readListBegin();
          const _size1594 = _rtmp31595.size || 0;
          for (let _i1596 = 0; _i1596 < _size1594; ++_i1596) {
            let elem1597 = null;
            elem1597 = input.readString();
            this.mids.push(elem1597);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyMessageToMids_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
      this.msg.write(output);
      output.writeFieldEnd();
    }
    if (this.mids !== null && this.mids !== undefined) {
      output.writeFieldBegin('mids', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.mids.length);
      for (let iter1598 in this.mids) {
        if (this.mids.hasOwnProperty(iter1598)) {
          iter1598 = this.mids[iter1598];
          output.writeString(iter1598);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_sendBuddyMessageToMids_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SendBuddyMessageResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SendBuddyMessageResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_sendBuddyMessageToMids_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getBuddyProfilePopup_args = class {
  constructor(args) {
    this.buddyMid = null;
    this.lang = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.lang !== undefined && args.lang !== null) {
        this.lang = args.lang;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.lang = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getBuddyProfilePopup_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.lang !== null && this.lang !== undefined) {
      output.writeFieldBegin('lang', Thrift.Type.STRING, 3);
      output.writeString(this.lang);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getBuddyProfilePopup_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyProfilePopup(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyProfilePopup();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getBuddyProfilePopup_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitSendMessagesToAllAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.commitRequestIdList = null;
    this.priority = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.commitRequestIdList !== undefined && args.commitRequestIdList !== null) {
        this.commitRequestIdList = Thrift.copyList(args.commitRequestIdList, [null]);
      }
      if (args.priority !== undefined && args.priority !== null) {
        this.priority = args.priority;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.commitRequestIdList = [];
          const _rtmp31600 = input.readListBegin();
          const _size1599 = _rtmp31600.size || 0;
          for (let _i1601 = 0; _i1601 < _size1599; ++_i1601) {
            let elem1602 = null;
            elem1602 = input.readString();
            this.commitRequestIdList.push(elem1602);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.priority = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitSendMessagesToAllAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.commitRequestIdList !== null && this.commitRequestIdList !== undefined) {
      output.writeFieldBegin('commitRequestIdList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.commitRequestIdList.length);
      for (let iter1603 in this.commitRequestIdList) {
        if (this.commitRequestIdList.hasOwnProperty(iter1603)) {
          iter1603 = this.commitRequestIdList[iter1603];
          output.writeString(iter1603);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.priority !== null && this.priority !== undefined) {
      output.writeFieldBegin('priority', Thrift.Type.I32, 3);
      output.writeI32(this.priority);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 4);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_commitSendMessagesToAllAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_commitSendMessagesToAllAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_notifyBuddySubscriberEmpty_args = class {
  constructor(args) {
    this.buddyMid = null;
    this.userMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.userMid !== undefined && args.userMid !== null) {
        this.userMid = args.userMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_notifyBuddySubscriberEmpty_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.userMid !== null && this.userMid !== undefined) {
      output.writeFieldBegin('userMid', Thrift.Type.STRING, 2);
      output.writeString(this.userMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_notifyBuddySubscriberEmpty_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_notifyBuddySubscriberEmpty_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyAdminProfileImage_args = class {
  constructor(args) {
    this.requestId = null;
    this.picture = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.picture !== undefined && args.picture !== null) {
        this.picture = args.picture;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.picture = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyAdminProfileImage_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.picture !== null && this.picture !== undefined) {
      output.writeFieldBegin('picture', Thrift.Type.STRING, 2);
      output.writeBinary(this.picture);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyAdminProfileImage_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyAdminProfileImage_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyProfileAttributesAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.attributes = null;
    this.policy = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.attributes !== undefined && args.attributes !== null) {
        this.attributes = Thrift.copyMap(args.attributes, [null]);
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = new ttypes.QueueingPolicy(args.policy);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.MAP) {
          this.attributes = {};
          const _rtmp31605 = input.readMapBegin();
          const _size1604 = _rtmp31605.size || 0;
          for (let _i1606 = 0; _i1606 < _size1604; ++_i1606) {
            let key1607 = null;
            let val1608 = null;
            key1607 = input.readString();
            val1608 = input.readString();
            this.attributes[key1607] = val1608;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.policy = new ttypes.QueueingPolicy();
          this.policy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyProfileAttributesAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.attributes !== null && this.attributes !== undefined) {
      output.writeFieldBegin('attributes', Thrift.Type.MAP, 2);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
      for (let kiter1609 in this.attributes) {
        if (this.attributes.hasOwnProperty(kiter1609)) {
          let viter1610 = this.attributes[kiter1609];
          output.writeString(kiter1609);
          output.writeString(viter1610);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRUCT, 3);
      this.policy.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_updateBuddyProfileAttributesAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_updateBuddyProfileAttributesAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_linkAndSendBuddyContentMessageToMidsAsync_args = class {
  constructor(args) {
    this.requestId = null;
    this.msg = null;
    this.sourceContentId = null;
    this.mids = null;
    this.usePermanent = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = new ttypes.Message(args.msg);
      }
      if (args.sourceContentId !== undefined && args.sourceContentId !== null) {
        this.sourceContentId = args.sourceContentId;
      }
      if (args.mids !== undefined && args.mids !== null) {
        this.mids = Thrift.copyList(args.mids, [null]);
      }
      if (args.usePermanent !== undefined && args.usePermanent !== null) {
        this.usePermanent = args.usePermanent;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.msg = new ttypes.Message();
          this.msg.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.sourceContentId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.mids = [];
          const _rtmp31612 = input.readListBegin();
          const _size1611 = _rtmp31612.size || 0;
          for (let _i1613 = 0; _i1613 < _size1611; ++_i1613) {
            let elem1614 = null;
            elem1614 = input.readString();
            this.mids.push(elem1614);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.usePermanent = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToMidsAsync_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
      this.msg.write(output);
      output.writeFieldEnd();
    }
    if (this.sourceContentId !== null && this.sourceContentId !== undefined) {
      output.writeFieldBegin('sourceContentId', Thrift.Type.STRING, 3);
      output.writeString(this.sourceContentId);
      output.writeFieldEnd();
    }
    if (this.mids !== null && this.mids !== undefined) {
      output.writeFieldBegin('mids', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.mids.length);
      for (let iter1615 in this.mids) {
        if (this.mids.hasOwnProperty(iter1615)) {
          iter1615 = this.mids[iter1615];
          output.writeString(iter1615);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.usePermanent !== null && this.usePermanent !== undefined) {
      output.writeFieldBegin('usePermanent', Thrift.Type.BOOL, 5);
      output.writeBool(this.usePermanent);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_linkAndSendBuddyContentMessageToMidsAsync_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToMidsAsync_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_downloadProfileImagePreview_args = class {
  constructor(args) {
    this.requestId = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_downloadProfileImagePreview_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_downloadProfileImagePreview_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_downloadProfileImagePreview_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeBinary(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_downloadProfileImage_args = class {
  constructor(args) {
    this.requestId = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_downloadProfileImage_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_downloadProfileImage_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_downloadProfileImage_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeBinary(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getSendBuddyMessageResult_args = class {
  constructor(args) {
    this.sendBuddyMessageRequestId = null;
    if (args) {
      if (args.sendBuddyMessageRequestId !== undefined && args.sendBuddyMessageRequestId !== null) {
        this.sendBuddyMessageRequestId = args.sendBuddyMessageRequestId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sendBuddyMessageRequestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getSendBuddyMessageResult_args');
    if (this.sendBuddyMessageRequestId !== null && this.sendBuddyMessageRequestId !== undefined) {
      output.writeFieldBegin('sendBuddyMessageRequestId', Thrift.Type.STRING, 1);
      output.writeString(this.sendBuddyMessageRequestId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getSendBuddyMessageResult_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SendBuddyMessageResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SendBuddyMessageResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getSendBuddyMessageResult_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_containsBuddyMember_args = class {
  constructor(args) {
    this.requestId = null;
    this.userMid = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.userMid !== undefined && args.userMid !== null) {
        this.userMid = args.userMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_containsBuddyMember_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.userMid !== null && this.userMid !== undefined) {
      output.writeFieldBegin('userMid', Thrift.Type.STRING, 2);
      output.writeString(this.userMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_containsBuddyMember_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_containsBuddyMember_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getActiveMemberCountByBuddyMid_args = class {
  constructor(args) {
    this.buddyMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getActiveMemberCountByBuddyMid_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_getActiveMemberCountByBuddyMid_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_getActiveMemberCountByBuddyMid_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_downloadMessageContentPreview_args = class {
  constructor(args) {
    this.requestId = null;
    this.messageId = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.messageId !== undefined && args.messageId !== null) {
        this.messageId = args.messageId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.messageId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_downloadMessageContentPreview_args');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.messageId !== null && this.messageId !== undefined) {
      output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
      output.writeString(this.messageId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_downloadMessageContentPreview_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_downloadMessageContentPreview_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeBinary(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_notifyBuddyRegistered_args = class {
  constructor(args) {
    this.buddyId = null;
    this.buddyMid = null;
    this.searchId = null;
    this.displayName = null;
    this.statusMessage = null;
    this.settings = null;
    if (args) {
      if (args.buddyId !== undefined && args.buddyId !== null) {
        this.buddyId = args.buddyId;
      }
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.searchId !== undefined && args.searchId !== null) {
        this.searchId = args.searchId;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.statusMessage !== undefined && args.statusMessage !== null) {
        this.statusMessage = args.statusMessage;
      }
      if (args.settings !== undefined && args.settings !== null) {
        this.settings = Thrift.copyMap(args.settings, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.searchId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.statusMessage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.MAP) {
          this.settings = {};
          const _rtmp31617 = input.readMapBegin();
          const _size1616 = _rtmp31617.size || 0;
          for (let _i1618 = 0; _i1618 < _size1616; ++_i1618) {
            let key1619 = null;
            let val1620 = null;
            key1619 = input.readString();
            val1620 = input.readString();
            this.settings[key1619] = val1620;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_notifyBuddyRegistered_args');
    if (this.buddyId !== null && this.buddyId !== undefined) {
      output.writeFieldBegin('buddyId', Thrift.Type.STRING, 2);
      output.writeString(this.buddyId);
      output.writeFieldEnd();
    }
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 3);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.searchId !== null && this.searchId !== undefined) {
      output.writeFieldBegin('searchId', Thrift.Type.STRING, 4);
      output.writeString(this.searchId);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 5);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.statusMessage !== null && this.statusMessage !== undefined) {
      output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 6);
      output.writeString(this.statusMessage);
      output.writeFieldEnd();
    }
    if (this.settings !== null && this.settings !== undefined) {
      output.writeFieldBegin('settings', Thrift.Type.MAP, 7);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.settings));
      for (let kiter1621 in this.settings) {
        if (this.settings.hasOwnProperty(kiter1621)) {
          let viter1622 = this.settings[kiter1621];
          output.writeString(kiter1621);
          output.writeString(viter1622);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementService_notifyBuddyRegistered_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyManagementService_notifyBuddyRegistered_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyManagementServiceClient = exports.Client = class {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  unregisterBuddy (requestId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_unregisterBuddy(requestId);
    });
  }

  send_unregisterBuddy (requestId) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId
    };
    const args = new BuddyManagementService_unregisterBuddy_args(params);
    try {
      output.writeMessageBegin('unregisterBuddy', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_unregisterBuddy (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_unregisterBuddy_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  sendBuddyContentMessageToMidsAsync (requestId, msg, content, mids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids);
    });
  }

  send_sendBuddyContentMessageToMidsAsync (requestId, msg, content, mids) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      msg: msg,
      content: content,
      mids: mids
    };
    const args = new BuddyManagementService_sendBuddyContentMessageToMidsAsync_args(params);
    try {
      output.writeMessageBegin('sendBuddyContentMessageToMidsAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendBuddyContentMessageToMidsAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_sendBuddyContentMessageToMidsAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sendBuddyContentMessageToMidsAsync failed: unknown result');
  }

  getAllBuddyMembers () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getAllBuddyMembers();
    });
  }

  send_getAllBuddyMembers () {
    const output = new this.pClass(this.output);
    const args = new BuddyManagementService_getAllBuddyMembers_args();
    try {
      output.writeMessageBegin('getAllBuddyMembers', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getAllBuddyMembers (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getAllBuddyMembers_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getAllBuddyMembers failed: unknown result');
  }

  getActiveMemberMidsByBuddyMid (buddyMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getActiveMemberMidsByBuddyMid(buddyMid);
    });
  }

  send_getActiveMemberMidsByBuddyMid (buddyMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid
    };
    const args = new BuddyManagementService_getActiveMemberMidsByBuddyMid_args(params);
    try {
      output.writeMessageBegin('getActiveMemberMidsByBuddyMid', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getActiveMemberMidsByBuddyMid (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getActiveMemberMidsByBuddyMid_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getActiveMemberMidsByBuddyMid failed: unknown result');
  }

  updateBuddyProfileAttributes (requestId, attributes, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_updateBuddyProfileAttributes(requestId, attributes, policy);
    });
  }

  send_updateBuddyProfileAttributes (requestId, attributes, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      attributes: attributes,
      policy: policy
    };
    const args = new BuddyManagementService_updateBuddyProfileAttributes_args(params);
    try {
      output.writeMessageBegin('updateBuddyProfileAttributes', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_updateBuddyProfileAttributes (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_updateBuddyProfileAttributes_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('updateBuddyProfileAttributes failed: unknown result');
  }

  storePrivateMessages (requestId, privateBotMessages, toMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_storePrivateMessages(requestId, privateBotMessages, toMid);
    });
  }

  send_storePrivateMessages (requestId, privateBotMessages, toMid) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      privateBotMessages: privateBotMessages,
      toMid: toMid
    };
    const args = new BuddyManagementService_storePrivateMessages_args(params);
    try {
      output.writeMessageBegin('storePrivateMessages', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_storePrivateMessages (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_storePrivateMessages_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('storePrivateMessages failed: unknown result');
  }

  updateBuddyProfileImageAsync (requestId, image, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_updateBuddyProfileImageAsync(requestId, image, policy);
    });
  }

  send_updateBuddyProfileImageAsync (requestId, image, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      image: image,
      policy: policy
    };
    const args = new BuddyManagementService_updateBuddyProfileImageAsync_args(params);
    try {
      output.writeMessageBegin('updateBuddyProfileImageAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_updateBuddyProfileImageAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_updateBuddyProfileImageAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('updateBuddyProfileImageAsync failed: unknown result');
  }

  notifyBuddyBlocked (buddyMid, blockerMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_notifyBuddyBlocked(buddyMid, blockerMid);
    });
  }

  send_notifyBuddyBlocked (buddyMid, blockerMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid,
      blockerMid: blockerMid
    };
    const args = new BuddyManagementService_notifyBuddyBlocked_args(params);
    try {
      output.writeMessageBegin('notifyBuddyBlocked', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_notifyBuddyBlocked (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_notifyBuddyBlocked_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  getMemberCountByBuddyMid (buddyMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getMemberCountByBuddyMid(buddyMid);
    });
  }

  send_getMemberCountByBuddyMid (buddyMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid
    };
    const args = new BuddyManagementService_getMemberCountByBuddyMid_args(params);
    try {
      output.writeMessageBegin('getMemberCountByBuddyMid', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getMemberCountByBuddyMid (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getMemberCountByBuddyMid_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getMemberCountByBuddyMid failed: unknown result');
  }

  isBuddyOnAirByMid (buddyMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_isBuddyOnAirByMid(buddyMid);
    });
  }

  send_isBuddyOnAirByMid (buddyMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid
    };
    const args = new BuddyManagementService_isBuddyOnAirByMid_args(params);
    try {
      output.writeMessageBegin('isBuddyOnAirByMid', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_isBuddyOnAirByMid (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_isBuddyOnAirByMid_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('isBuddyOnAirByMid failed: unknown result');
  }

  commitPrivateMessages (requestId, privateMessageStoreRequestId, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_commitPrivateMessages(requestId, privateMessageStoreRequestId, policy);
    });
  }

  send_commitPrivateMessages (requestId, privateMessageStoreRequestId, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      privateMessageStoreRequestId: privateMessageStoreRequestId,
      policy: policy
    };
    const args = new BuddyManagementService_commitPrivateMessages_args(params);
    try {
      output.writeMessageBegin('commitPrivateMessages', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_commitPrivateMessages (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_commitPrivateMessages_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  commitPublicMessagesToMids (requestId, publicMessageStoreRequestId, toMids, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_commitPublicMessagesToMids(requestId, publicMessageStoreRequestId, toMids, policy);
    });
  }

  send_commitPublicMessagesToMids (requestId, publicMessageStoreRequestId, toMids, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      publicMessageStoreRequestId: publicMessageStoreRequestId,
      toMids: toMids,
      policy: policy
    };
    const args = new BuddyManagementService_commitPublicMessagesToMids_args(params);
    try {
      output.writeMessageBegin('commitPublicMessagesToMids', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_commitPublicMessagesToMids (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_commitPublicMessagesToMids_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  addBuddyMember (requestId, userMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addBuddyMember(requestId, userMid);
    });
  }

  send_addBuddyMember (requestId, userMid) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      userMid: userMid
    };
    const args = new BuddyManagementService_addBuddyMember_args(params);
    try {
      output.writeMessageBegin('addBuddyMember', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addBuddyMember (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_addBuddyMember_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  linkAndSendBuddyContentMessageToMids (requestId, msg, sourceContentId, mids, usePermanent) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids, usePermanent);
    });
  }

  send_linkAndSendBuddyContentMessageToMids (requestId, msg, sourceContentId, mids, usePermanent) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      msg: msg,
      sourceContentId: sourceContentId,
      mids: mids,
      usePermanent: usePermanent
    };
    const args = new BuddyManagementService_linkAndSendBuddyContentMessageToMids_args(params);
    try {
      output.writeMessageBegin('linkAndSendBuddyContentMessageToMids', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_linkAndSendBuddyContentMessageToMids (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_linkAndSendBuddyContentMessageToMids_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('linkAndSendBuddyContentMessageToMids failed: unknown result');
  }

  storeMessages (requestIds, messageRequests) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_storeMessages(requestIds, messageRequests);
    });
  }

  send_storeMessages (requestIds, messageRequests) {
    const output = new this.pClass(this.output);
    const params = {
      requestIds: requestIds,
      messageRequests: messageRequests
    };
    const args = new BuddyManagementService_storeMessages_args(params);
    try {
      output.writeMessageBegin('storeMessages', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_storeMessages (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_storeMessages_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('storeMessages failed: unknown result');
  }

  storeMessage (requestId, messageRequest) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_storeMessage(requestId, messageRequest);
    });
  }

  send_storeMessage (requestId, messageRequest) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      messageRequest: messageRequest
    };
    const args = new BuddyManagementService_storeMessage_args(params);
    try {
      output.writeMessageBegin('storeMessage', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_storeMessage (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_storeMessage_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('storeMessage failed: unknown result');
  }

  registerBuddy (buddyId, searchId, displayName, statusMeessage, picture, settings) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings);
    });
  }

  send_registerBuddy (buddyId, searchId, displayName, statusMeessage, picture, settings) {
    const output = new this.pClass(this.output);
    const params = {
      buddyId: buddyId,
      searchId: searchId,
      displayName: displayName,
      statusMeessage: statusMeessage,
      picture: picture,
      settings: settings
    };
    const args = new BuddyManagementService_registerBuddy_args(params);
    try {
      output.writeMessageBegin('registerBuddy', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_registerBuddy (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_registerBuddy_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('registerBuddy failed: unknown result');
  }

  getUnregisterBuddyResult (unregisterBuddyRequestId, buddyMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getUnregisterBuddyResult(unregisterBuddyRequestId, buddyMid);
    });
  }

  send_getUnregisterBuddyResult (unregisterBuddyRequestId, buddyMid) {
    const output = new this.pClass(this.output);
    const params = {
      unregisterBuddyRequestId: unregisterBuddyRequestId,
      buddyMid: buddyMid
    };
    const args = new BuddyManagementService_getUnregisterBuddyResult_args(params);
    try {
      output.writeMessageBegin('getUnregisterBuddyResult', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getUnregisterBuddyResult (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getUnregisterBuddyResult_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getUnregisterBuddyResult failed: unknown result');
  }

  updateBuddySearchId (requestId, searchId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_updateBuddySearchId(requestId, searchId);
    });
  }

  send_updateBuddySearchId (requestId, searchId) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      searchId: searchId
    };
    const args = new BuddyManagementService_updateBuddySearchId_args(params);
    try {
      output.writeMessageBegin('updateBuddySearchId', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_updateBuddySearchId (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_updateBuddySearchId_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  uploadBuddyContent (contentType, content) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_uploadBuddyContent(contentType, content);
    });
  }

  send_uploadBuddyContent (contentType, content) {
    const output = new this.pClass(this.output);
    const params = {
      contentType: contentType,
      content: content
    };
    const args = new BuddyManagementService_uploadBuddyContent_args(params);
    try {
      output.writeMessageBegin('uploadBuddyContent', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_uploadBuddyContent (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_uploadBuddyContent_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('uploadBuddyContent failed: unknown result');
  }

  updateBuddyProfileImage (requestId, image, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_updateBuddyProfileImage(requestId, image, policy);
    });
  }

  send_updateBuddyProfileImage (requestId, image, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      image: image,
      policy: policy
    };
    const args = new BuddyManagementService_updateBuddyProfileImage_args(params);
    try {
      output.writeMessageBegin('updateBuddyProfileImage', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_updateBuddyProfileImage (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_updateBuddyProfileImage_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('updateBuddyProfileImage failed: unknown result');
  }

  sendBuddyMessageToAll (requestId, msg) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendBuddyMessageToAll(requestId, msg);
    });
  }

  send_sendBuddyMessageToAll (requestId, msg) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      msg: msg
    };
    const args = new BuddyManagementService_sendBuddyMessageToAll_args(params);
    try {
      output.writeMessageBegin('sendBuddyMessageToAll', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendBuddyMessageToAll (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_sendBuddyMessageToAll_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sendBuddyMessageToAll failed: unknown result');
  }

  commitSendMessagesToAll (requestId, commitRequestIdList, priority, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_commitSendMessagesToAll(requestId, commitRequestIdList, priority, policy);
    });
  }

  send_commitSendMessagesToAll (requestId, commitRequestIdList, priority, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      commitRequestIdList: commitRequestIdList,
      priority: priority,
      policy: policy
    };
    const args = new BuddyManagementService_commitSendMessagesToAll_args(params);
    try {
      output.writeMessageBegin('commitSendMessagesToAll', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_commitSendMessagesToAll (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_commitSendMessagesToAll_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('commitSendMessagesToAll failed: unknown result');
  }

  downloadMessageContent (requestId, messageId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_downloadMessageContent(requestId, messageId);
    });
  }

  send_downloadMessageContent (requestId, messageId) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      messageId: messageId
    };
    const args = new BuddyManagementService_downloadMessageContent_args(params);
    try {
      output.writeMessageBegin('downloadMessageContent', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_downloadMessageContent (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_downloadMessageContent_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('downloadMessageContent failed: unknown result');
  }

  updateBuddyProfileRichMenu (requestId, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_updateBuddyProfileRichMenu(requestId, policy);
    });
  }

  send_updateBuddyProfileRichMenu (requestId, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      policy: policy
    };
    const args = new BuddyManagementService_updateBuddyProfileRichMenu_args(params);
    try {
      output.writeMessageBegin('updateBuddyProfileRichMenu', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_updateBuddyProfileRichMenu (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_updateBuddyProfileRichMenu_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('updateBuddyProfileRichMenu failed: unknown result');
  }

  setBuddyOnAir (requestId, onAir, label) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_setBuddyOnAir(requestId, onAir, label);
    });
  }

  send_setBuddyOnAir (requestId, onAir, label) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      onAir: onAir,
      label: label
    };
    const args = new BuddyManagementService_setBuddyOnAir_args(params);
    try {
      output.writeMessageBegin('setBuddyOnAir', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_setBuddyOnAir (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_setBuddyOnAir_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('setBuddyOnAir failed: unknown result');
  }

  unblockBuddyMember (requestId, mid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_unblockBuddyMember(requestId, mid);
    });
  }

  send_unblockBuddyMember (requestId, mid) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      mid: mid
    };
    const args = new BuddyManagementService_unblockBuddyMember_args(params);
    try {
      output.writeMessageBegin('unblockBuddyMember', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_unblockBuddyMember (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_unblockBuddyMember_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  linkAndSendBuddyContentMessageToAll (requestId, msg, sourceContentId, usePermanent) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_linkAndSendBuddyContentMessageToAll(requestId, msg, sourceContentId, usePermanent);
    });
  }

  send_linkAndSendBuddyContentMessageToAll (requestId, msg, sourceContentId, usePermanent) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      msg: msg,
      sourceContentId: sourceContentId,
      usePermanent: usePermanent
    };
    const args = new BuddyManagementService_linkAndSendBuddyContentMessageToAll_args(params);
    try {
      output.writeMessageBegin('linkAndSendBuddyContentMessageToAll', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_linkAndSendBuddyContentMessageToAll (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_linkAndSendBuddyContentMessageToAll_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('linkAndSendBuddyContentMessageToAll failed: unknown result');
  }

  removeBuddyMember (requestId, userMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_removeBuddyMember(requestId, userMid);
    });
  }

  send_removeBuddyMember (requestId, userMid) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      userMid: userMid
    };
    const args = new BuddyManagementService_removeBuddyMember_args(params);
    try {
      output.writeMessageBegin('removeBuddyMember', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_removeBuddyMember (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_removeBuddyMember_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  commitSendMessagesToMidAsync (requestId, storeMessagesRequestIds, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_commitSendMessagesToMidAsync(requestId, storeMessagesRequestIds, policy);
    });
  }

  send_commitSendMessagesToMidAsync (requestId, storeMessagesRequestIds, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      storeMessagesRequestIds: storeMessagesRequestIds,
      policy: policy
    };
    const args = new BuddyManagementService_commitSendMessagesToMidAsync_args(params);
    try {
      output.writeMessageBegin('commitSendMessagesToMidAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_commitSendMessagesToMidAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_commitSendMessagesToMidAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('commitSendMessagesToMidAsync failed: unknown result');
  }

  getUpdateBuddyProfileResult (updateBuddyProfileRequestId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getUpdateBuddyProfileResult(updateBuddyProfileRequestId);
    });
  }

  send_getUpdateBuddyProfileResult (updateBuddyProfileRequestId) {
    const output = new this.pClass(this.output);
    const params = {
      updateBuddyProfileRequestId: updateBuddyProfileRequestId
    };
    const args = new BuddyManagementService_getUpdateBuddyProfileResult_args(params);
    try {
      output.writeMessageBegin('getUpdateBuddyProfileResult', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getUpdateBuddyProfileResult (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getUpdateBuddyProfileResult_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getUpdateBuddyProfileResult failed: unknown result');
  }

  notifyBuddyUnblocked (buddyMid, blockerMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_notifyBuddyUnblocked(buddyMid, blockerMid);
    });
  }

  send_notifyBuddyUnblocked (buddyMid, blockerMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid,
      blockerMid: blockerMid
    };
    const args = new BuddyManagementService_notifyBuddyUnblocked_args(params);
    try {
      output.writeMessageBegin('notifyBuddyUnblocked', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_notifyBuddyUnblocked (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_notifyBuddyUnblocked_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  updateBuddyProfileRichMenuAsync (requestId, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_updateBuddyProfileRichMenuAsync(requestId, policy);
    });
  }

  send_updateBuddyProfileRichMenuAsync (requestId, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      policy: policy
    };
    const args = new BuddyManagementService_updateBuddyProfileRichMenuAsync_args(params);
    try {
      output.writeMessageBegin('updateBuddyProfileRichMenuAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_updateBuddyProfileRichMenuAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_updateBuddyProfileRichMenuAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('updateBuddyProfileRichMenuAsync failed: unknown result');
  }

  getBuddyProfile () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyProfile();
    });
  }

  send_getBuddyProfile () {
    const output = new this.pClass(this.output);
    const args = new BuddyManagementService_getBuddyProfile_args();
    try {
      output.writeMessageBegin('getBuddyProfile', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyProfile (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getBuddyProfile_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyProfile failed: unknown result');
  }

  getBlockedBuddyMembers () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBlockedBuddyMembers();
    });
  }

  send_getBlockedBuddyMembers () {
    const output = new this.pClass(this.output);
    const args = new BuddyManagementService_getBlockedBuddyMembers_args();
    try {
      output.writeMessageBegin('getBlockedBuddyMembers', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBlockedBuddyMembers (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getBlockedBuddyMembers_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBlockedBuddyMembers failed: unknown result');
  }

  commitPublicMessagesToAll (requestId, publicMessageStoreRequestId, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_commitPublicMessagesToAll(requestId, publicMessageStoreRequestId, policy);
    });
  }

  send_commitPublicMessagesToAll (requestId, publicMessageStoreRequestId, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      publicMessageStoreRequestId: publicMessageStoreRequestId,
      policy: policy
    };
    const args = new BuddyManagementService_commitPublicMessagesToAll_args(params);
    try {
      output.writeMessageBegin('commitPublicMessagesToAll', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_commitPublicMessagesToAll (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_commitPublicMessagesToAll_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  linkAndSendBuddyContentMessageToAllAsync (requestId, msg, sourceContentId, usePermanent) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId, usePermanent);
    });
  }

  send_linkAndSendBuddyContentMessageToAllAsync (requestId, msg, sourceContentId, usePermanent) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      msg: msg,
      sourceContentId: sourceContentId,
      usePermanent: usePermanent
    };
    const args = new BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args(params);
    try {
      output.writeMessageBegin('linkAndSendBuddyContentMessageToAllAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_linkAndSendBuddyContentMessageToAllAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('linkAndSendBuddyContentMessageToAllAsync failed: unknown result');
  }

  sendBuddyContentMessageToAllAsync (requestId, msg, content) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendBuddyContentMessageToAllAsync(requestId, msg, content);
    });
  }

  send_sendBuddyContentMessageToAllAsync (requestId, msg, content) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      msg: msg,
      content: content
    };
    const args = new BuddyManagementService_sendBuddyContentMessageToAllAsync_args(params);
    try {
      output.writeMessageBegin('sendBuddyContentMessageToAllAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendBuddyContentMessageToAllAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_sendBuddyContentMessageToAllAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sendBuddyContentMessageToAllAsync failed: unknown result');
  }

  getSetBuddyOnAirResult (setBuddyOnAirRequestId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getSetBuddyOnAirResult(setBuddyOnAirRequestId);
    });
  }

  send_getSetBuddyOnAirResult (setBuddyOnAirRequestId) {
    const output = new this.pClass(this.output);
    const params = {
      setBuddyOnAirRequestId: setBuddyOnAirRequestId
    };
    const args = new BuddyManagementService_getSetBuddyOnAirResult_args(params);
    try {
      output.writeMessageBegin('getSetBuddyOnAirResult', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getSetBuddyOnAirResult (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getSetBuddyOnAirResult_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getSetBuddyOnAirResult failed: unknown result');
  }

  commitSendMessagesToMidsAsync (requestId, commitRequestIdList, mids, priority, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_commitSendMessagesToMidsAsync(requestId, commitRequestIdList, mids, priority, policy);
    });
  }

  send_commitSendMessagesToMidsAsync (requestId, commitRequestIdList, mids, priority, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      commitRequestIdList: commitRequestIdList,
      mids: mids,
      priority: priority,
      policy: policy
    };
    const args = new BuddyManagementService_commitSendMessagesToMidsAsync_args(params);
    try {
      output.writeMessageBegin('commitSendMessagesToMidsAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_commitSendMessagesToMidsAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_commitSendMessagesToMidsAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('commitSendMessagesToMidsAsync failed: unknown result');
  }

  commitSendMessagesToStoredMidsAsync (requestId, commitRequestIdList, storedMidFilename, priority, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_commitSendMessagesToStoredMidsAsync(requestId, commitRequestIdList, storedMidFilename, priority, policy);
    });
  }

  send_commitSendMessagesToStoredMidsAsync (requestId, commitRequestIdList, storedMidFilename, priority, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      commitRequestIdList: commitRequestIdList,
      storedMidFilename: storedMidFilename,
      priority: priority,
      policy: policy
    };
    const args = new BuddyManagementService_commitSendMessagesToStoredMidsAsync_args(params);
    try {
      output.writeMessageBegin('commitSendMessagesToStoredMidsAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_commitSendMessagesToStoredMidsAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_commitSendMessagesToStoredMidsAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('commitSendMessagesToStoredMidsAsync failed: unknown result');
  }

  updateBuddyAdminProfileAttribute (requestId, attributes) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_updateBuddyAdminProfileAttribute(requestId, attributes);
    });
  }

  send_updateBuddyAdminProfileAttribute (requestId, attributes) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      attributes: attributes
    };
    const args = new BuddyManagementService_updateBuddyAdminProfileAttribute_args(params);
    try {
      output.writeMessageBegin('updateBuddyAdminProfileAttribute', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_updateBuddyAdminProfileAttribute (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_updateBuddyAdminProfileAttribute_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  setBuddyOnAirAsync (requestId, onAir, label) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_setBuddyOnAirAsync(requestId, onAir, label);
    });
  }

  send_setBuddyOnAirAsync (requestId, onAir, label) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      onAir: onAir,
      label: label
    };
    const args = new BuddyManagementService_setBuddyOnAirAsync_args(params);
    try {
      output.writeMessageBegin('setBuddyOnAirAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_setBuddyOnAirAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_setBuddyOnAirAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('setBuddyOnAirAsync failed: unknown result');
  }

  commitSendMessagesToMids (requestId, commitRequestIdList, mids, priority, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_commitSendMessagesToMids(requestId, commitRequestIdList, mids, priority, policy);
    });
  }

  send_commitSendMessagesToMids (requestId, commitRequestIdList, mids, priority, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      commitRequestIdList: commitRequestIdList,
      mids: mids,
      priority: priority,
      policy: policy
    };
    const args = new BuddyManagementService_commitSendMessagesToMids_args(params);
    try {
      output.writeMessageBegin('commitSendMessagesToMids', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_commitSendMessagesToMids (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_commitSendMessagesToMids_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('commitSendMessagesToMids failed: unknown result');
  }

  sendBuddyContentMessageToAll (requestId, msg, content) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendBuddyContentMessageToAll(requestId, msg, content);
    });
  }

  send_sendBuddyContentMessageToAll (requestId, msg, content) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      msg: msg,
      content: content
    };
    const args = new BuddyManagementService_sendBuddyContentMessageToAll_args(params);
    try {
      output.writeMessageBegin('sendBuddyContentMessageToAll', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendBuddyContentMessageToAll (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_sendBuddyContentMessageToAll_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sendBuddyContentMessageToAll failed: unknown result');
  }

  updateBuddySettings (settings) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_updateBuddySettings(settings);
    });
  }

  send_updateBuddySettings (settings) {
    const output = new this.pClass(this.output);
    const params = {
      settings: settings
    };
    const args = new BuddyManagementService_updateBuddySettings_args(params);
    try {
      output.writeMessageBegin('updateBuddySettings', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_updateBuddySettings (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_updateBuddySettings_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  notifyBuddySubscribed (buddyMid, subscriberMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_notifyBuddySubscribed(buddyMid, subscriberMid);
    });
  }

  send_notifyBuddySubscribed (buddyMid, subscriberMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid,
      subscriberMid: subscriberMid
    };
    const args = new BuddyManagementService_notifyBuddySubscribed_args(params);
    try {
      output.writeMessageBegin('notifyBuddySubscribed', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_notifyBuddySubscribed (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_notifyBuddySubscribed_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  registerBuddyAdmin (buddyId, searchId, displayName, statusMessage, picture) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture);
    });
  }

  send_registerBuddyAdmin (buddyId, searchId, displayName, statusMessage, picture) {
    const output = new this.pClass(this.output);
    const params = {
      buddyId: buddyId,
      searchId: searchId,
      displayName: displayName,
      statusMessage: statusMessage,
      picture: picture
    };
    const args = new BuddyManagementService_registerBuddyAdmin_args(params);
    try {
      output.writeMessageBegin('registerBuddyAdmin', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_registerBuddyAdmin (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_registerBuddyAdmin_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('registerBuddyAdmin failed: unknown result');
  }

  getBlockerCountByBuddyMid (buddyMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBlockerCountByBuddyMid(buddyMid);
    });
  }

  send_getBlockerCountByBuddyMid (buddyMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid
    };
    const args = new BuddyManagementService_getBlockerCountByBuddyMid_args(params);
    try {
      output.writeMessageBegin('getBlockerCountByBuddyMid', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBlockerCountByBuddyMid (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getBlockerCountByBuddyMid_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBlockerCountByBuddyMid failed: unknown result');
  }

  reissueContactTicket (expirationTime, maxUseCount) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_reissueContactTicket(expirationTime, maxUseCount);
    });
  }

  send_reissueContactTicket (expirationTime, maxUseCount) {
    const output = new this.pClass(this.output);
    const params = {
      expirationTime: expirationTime,
      maxUseCount: maxUseCount
    };
    const args = new BuddyManagementService_reissueContactTicket_args(params);
    try {
      output.writeMessageBegin('reissueContactTicket', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_reissueContactTicket (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_reissueContactTicket_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('reissueContactTicket failed: unknown result');
  }

  validateContacts (userMids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_validateContacts(userMids);
    });
  }

  send_validateContacts (userMids) {
    const output = new this.pClass(this.output);
    const params = {
      userMids: userMids
    };
    const args = new BuddyManagementService_validateContacts_args(params);
    try {
      output.writeMessageBegin('validateContacts', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_validateContacts (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_validateContacts_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('validateContacts failed: unknown result');
  }

  sendBuddyMessageToMidsAsync (requestId, msg, mids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendBuddyMessageToMidsAsync(requestId, msg, mids);
    });
  }

  send_sendBuddyMessageToMidsAsync (requestId, msg, mids) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      msg: msg,
      mids: mids
    };
    const args = new BuddyManagementService_sendBuddyMessageToMidsAsync_args(params);
    try {
      output.writeMessageBegin('sendBuddyMessageToMidsAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendBuddyMessageToMidsAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_sendBuddyMessageToMidsAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sendBuddyMessageToMidsAsync failed: unknown result');
  }

  unregisterBuddyAsync (requestId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_unregisterBuddyAsync(requestId);
    });
  }

  send_unregisterBuddyAsync (requestId) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId
    };
    const args = new BuddyManagementService_unregisterBuddyAsync_args(params);
    try {
      output.writeMessageBegin('unregisterBuddyAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_unregisterBuddyAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_unregisterBuddyAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  getProfileImageUrlHash (requestId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getProfileImageUrlHash(requestId);
    });
  }

  send_getProfileImageUrlHash (requestId) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId
    };
    const args = new BuddyManagementService_getProfileImageUrlHash_args(params);
    try {
      output.writeMessageBegin('getProfileImageUrlHash', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getProfileImageUrlHash (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getProfileImageUrlHash_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getProfileImageUrlHash failed: unknown result');
  }

  blockBuddyMember (requestId, mid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_blockBuddyMember(requestId, mid);
    });
  }

  send_blockBuddyMember (requestId, mid) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      mid: mid
    };
    const args = new BuddyManagementService_blockBuddyMember_args(params);
    try {
      output.writeMessageBegin('blockBuddyMember', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_blockBuddyMember (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_blockBuddyMember_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  sendIndividualEventToAllAsync (requestId, buddyMid, notificationStatus) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus);
    });
  }

  send_sendIndividualEventToAllAsync (requestId, buddyMid, notificationStatus) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      buddyMid: buddyMid,
      notificationStatus: notificationStatus
    };
    const args = new BuddyManagementService_sendIndividualEventToAllAsync_args(params);
    try {
      output.writeMessageBegin('sendIndividualEventToAllAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendIndividualEventToAllAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_sendIndividualEventToAllAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  sendChatCheckedByWatermark (seq, mid, watermark, sessionId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendChatCheckedByWatermark(seq, mid, watermark, sessionId);
    });
  }

  send_sendChatCheckedByWatermark (seq, mid, watermark, sessionId) {
    const output = new this.pClass(this.output);
    const params = {
      seq: seq,
      mid: mid,
      watermark: watermark,
      sessionId: sessionId
    };
    const args = new BuddyManagementService_sendChatCheckedByWatermark_args(params);
    try {
      output.writeMessageBegin('sendChatCheckedByWatermark', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendChatCheckedByWatermark (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_sendChatCheckedByWatermark_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  deleteBotProfileImage (requestId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_deleteBotProfileImage(requestId);
    });
  }

  send_deleteBotProfileImage (requestId) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId
    };
    const args = new BuddyManagementService_deleteBotProfileImage_args(params);
    try {
      output.writeMessageBegin('deleteBotProfileImage', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_deleteBotProfileImage (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_deleteBotProfileImage_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  sendBuddyContentMessageToMids (requestId, msg, content, mids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendBuddyContentMessageToMids(requestId, msg, content, mids);
    });
  }

  send_sendBuddyContentMessageToMids (requestId, msg, content, mids) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      msg: msg,
      content: content,
      mids: mids
    };
    const args = new BuddyManagementService_sendBuddyContentMessageToMids_args(params);
    try {
      output.writeMessageBegin('sendBuddyContentMessageToMids', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendBuddyContentMessageToMids (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_sendBuddyContentMessageToMids_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sendBuddyContentMessageToMids failed: unknown result');
  }

  unregisterBuddyAdmin (requestId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_unregisterBuddyAdmin(requestId);
    });
  }

  send_unregisterBuddyAdmin (requestId) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId
    };
    const args = new BuddyManagementService_unregisterBuddyAdmin_args(params);
    try {
      output.writeMessageBegin('unregisterBuddyAdmin', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_unregisterBuddyAdmin (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_unregisterBuddyAdmin_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  commitPublicMessagesToStoredMids (requestId, publicMessageStoreRequestId, storedMidFilename, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_commitPublicMessagesToStoredMids(requestId, publicMessageStoreRequestId, storedMidFilename, policy);
    });
  }

  send_commitPublicMessagesToStoredMids (requestId, publicMessageStoreRequestId, storedMidFilename, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      publicMessageStoreRequestId: publicMessageStoreRequestId,
      storedMidFilename: storedMidFilename,
      policy: policy
    };
    const args = new BuddyManagementService_commitPublicMessagesToStoredMids_args(params);
    try {
      output.writeMessageBegin('commitPublicMessagesToStoredMids', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_commitPublicMessagesToStoredMids (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_commitPublicMessagesToStoredMids_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  removeBuddyMembers (requestId, userMids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_removeBuddyMembers(requestId, userMids);
    });
  }

  send_removeBuddyMembers (requestId, userMids) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      userMids: userMids
    };
    const args = new BuddyManagementService_removeBuddyMembers_args(params);
    try {
      output.writeMessageBegin('removeBuddyMembers', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_removeBuddyMembers (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_removeBuddyMembers_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  storePublicMessages (requestId, messages) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_storePublicMessages(requestId, messages);
    });
  }

  send_storePublicMessages (requestId, messages) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      messages: messages
    };
    const args = new BuddyManagementService_storePublicMessages_args(params);
    try {
      output.writeMessageBegin('storePublicMessages', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_storePublicMessages (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_storePublicMessages_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('storePublicMessages failed: unknown result');
  }

  addBuddyMembers (requestId, userMids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addBuddyMembers(requestId, userMids);
    });
  }

  send_addBuddyMembers (requestId, userMids) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      userMids: userMids
    };
    const args = new BuddyManagementService_addBuddyMembers_args(params);
    try {
      output.writeMessageBegin('addBuddyMembers', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addBuddyMembers (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_addBuddyMembers_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  getMessageCommitResult (messageCommitRequestId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getMessageCommitResult(messageCommitRequestId);
    });
  }

  send_getMessageCommitResult (messageCommitRequestId) {
    const output = new this.pClass(this.output);
    const params = {
      messageCommitRequestId: messageCommitRequestId
    };
    const args = new BuddyManagementService_getMessageCommitResult_args(params);
    try {
      output.writeMessageBegin('getMessageCommitResult', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getMessageCommitResult (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getMessageCommitResult_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getMessageCommitResult failed: unknown result');
  }

  getBuddyDetailByMid (buddyMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyDetailByMid(buddyMid);
    });
  }

  send_getBuddyDetailByMid (buddyMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid
    };
    const args = new BuddyManagementService_getBuddyDetailByMid_args(params);
    try {
      output.writeMessageBegin('getBuddyDetailByMid', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyDetailByMid (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getBuddyDetailByMid_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyDetailByMid failed: unknown result');
  }

  notifyBuddySubscriberUnregistered (buddyMid, userMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_notifyBuddySubscriberUnregistered(buddyMid, userMid);
    });
  }

  send_notifyBuddySubscriberUnregistered (buddyMid, userMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid,
      userMid: userMid
    };
    const args = new BuddyManagementService_notifyBuddySubscriberUnregistered_args(params);
    try {
      output.writeMessageBegin('notifyBuddySubscriberUnregistered', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_notifyBuddySubscriberUnregistered (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_notifyBuddySubscriberUnregistered_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  sendBuddyMessageToAllAsync (requestId, msg) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendBuddyMessageToAllAsync(requestId, msg);
    });
  }

  send_sendBuddyMessageToAllAsync (requestId, msg) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      msg: msg
    };
    const args = new BuddyManagementService_sendBuddyMessageToAllAsync_args(params);
    try {
      output.writeMessageBegin('sendBuddyMessageToAllAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendBuddyMessageToAllAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_sendBuddyMessageToAllAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sendBuddyMessageToAllAsync failed: unknown result');
  }

  sendBuddyMessageToMids (requestId, msg, mids) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_sendBuddyMessageToMids(requestId, msg, mids);
    });
  }

  send_sendBuddyMessageToMids (requestId, msg, mids) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      msg: msg,
      mids: mids
    };
    const args = new BuddyManagementService_sendBuddyMessageToMids_args(params);
    try {
      output.writeMessageBegin('sendBuddyMessageToMids', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_sendBuddyMessageToMids (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_sendBuddyMessageToMids_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sendBuddyMessageToMids failed: unknown result');
  }

  getBuddyProfilePopup (buddyMid, lang) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyProfilePopup(buddyMid, lang);
    });
  }

  send_getBuddyProfilePopup (buddyMid, lang) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid,
      lang: lang
    };
    const args = new BuddyManagementService_getBuddyProfilePopup_args(params);
    try {
      output.writeMessageBegin('getBuddyProfilePopup', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyProfilePopup (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getBuddyProfilePopup_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyProfilePopup failed: unknown result');
  }

  commitSendMessagesToAllAsync (requestId, commitRequestIdList, priority, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_commitSendMessagesToAllAsync(requestId, commitRequestIdList, priority, policy);
    });
  }

  send_commitSendMessagesToAllAsync (requestId, commitRequestIdList, priority, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      commitRequestIdList: commitRequestIdList,
      priority: priority,
      policy: policy
    };
    const args = new BuddyManagementService_commitSendMessagesToAllAsync_args(params);
    try {
      output.writeMessageBegin('commitSendMessagesToAllAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_commitSendMessagesToAllAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_commitSendMessagesToAllAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('commitSendMessagesToAllAsync failed: unknown result');
  }

  notifyBuddySubscriberEmpty (buddyMid, userMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_notifyBuddySubscriberEmpty(buddyMid, userMid);
    });
  }

  send_notifyBuddySubscriberEmpty (buddyMid, userMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid,
      userMid: userMid
    };
    const args = new BuddyManagementService_notifyBuddySubscriberEmpty_args(params);
    try {
      output.writeMessageBegin('notifyBuddySubscriberEmpty', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_notifyBuddySubscriberEmpty (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_notifyBuddySubscriberEmpty_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  updateBuddyAdminProfileImage (requestId, picture) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_updateBuddyAdminProfileImage(requestId, picture);
    });
  }

  send_updateBuddyAdminProfileImage (requestId, picture) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      picture: picture
    };
    const args = new BuddyManagementService_updateBuddyAdminProfileImage_args(params);
    try {
      output.writeMessageBegin('updateBuddyAdminProfileImage', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_updateBuddyAdminProfileImage (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_updateBuddyAdminProfileImage_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  updateBuddyProfileAttributesAsync (requestId, attributes, policy) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_updateBuddyProfileAttributesAsync(requestId, attributes, policy);
    });
  }

  send_updateBuddyProfileAttributesAsync (requestId, attributes, policy) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      attributes: attributes,
      policy: policy
    };
    const args = new BuddyManagementService_updateBuddyProfileAttributesAsync_args(params);
    try {
      output.writeMessageBegin('updateBuddyProfileAttributesAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_updateBuddyProfileAttributesAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_updateBuddyProfileAttributesAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('updateBuddyProfileAttributesAsync failed: unknown result');
  }

  linkAndSendBuddyContentMessageToMidsAsync (requestId, msg, sourceContentId, mids, usePermanent) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_linkAndSendBuddyContentMessageToMidsAsync(requestId, msg, sourceContentId, mids, usePermanent);
    });
  }

  send_linkAndSendBuddyContentMessageToMidsAsync (requestId, msg, sourceContentId, mids, usePermanent) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      msg: msg,
      sourceContentId: sourceContentId,
      mids: mids,
      usePermanent: usePermanent
    };
    const args = new BuddyManagementService_linkAndSendBuddyContentMessageToMidsAsync_args(params);
    try {
      output.writeMessageBegin('linkAndSendBuddyContentMessageToMidsAsync', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_linkAndSendBuddyContentMessageToMidsAsync (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_linkAndSendBuddyContentMessageToMidsAsync_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('linkAndSendBuddyContentMessageToMidsAsync failed: unknown result');
  }

  downloadProfileImagePreview (requestId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_downloadProfileImagePreview(requestId);
    });
  }

  send_downloadProfileImagePreview (requestId) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId
    };
    const args = new BuddyManagementService_downloadProfileImagePreview_args(params);
    try {
      output.writeMessageBegin('downloadProfileImagePreview', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_downloadProfileImagePreview (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_downloadProfileImagePreview_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('downloadProfileImagePreview failed: unknown result');
  }

  downloadProfileImage (requestId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_downloadProfileImage(requestId);
    });
  }

  send_downloadProfileImage (requestId) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId
    };
    const args = new BuddyManagementService_downloadProfileImage_args(params);
    try {
      output.writeMessageBegin('downloadProfileImage', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_downloadProfileImage (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_downloadProfileImage_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('downloadProfileImage failed: unknown result');
  }

  getSendBuddyMessageResult (sendBuddyMessageRequestId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getSendBuddyMessageResult(sendBuddyMessageRequestId);
    });
  }

  send_getSendBuddyMessageResult (sendBuddyMessageRequestId) {
    const output = new this.pClass(this.output);
    const params = {
      sendBuddyMessageRequestId: sendBuddyMessageRequestId
    };
    const args = new BuddyManagementService_getSendBuddyMessageResult_args(params);
    try {
      output.writeMessageBegin('getSendBuddyMessageResult', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getSendBuddyMessageResult (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getSendBuddyMessageResult_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getSendBuddyMessageResult failed: unknown result');
  }

  containsBuddyMember (requestId, userMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_containsBuddyMember(requestId, userMid);
    });
  }

  send_containsBuddyMember (requestId, userMid) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      userMid: userMid
    };
    const args = new BuddyManagementService_containsBuddyMember_args(params);
    try {
      output.writeMessageBegin('containsBuddyMember', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_containsBuddyMember (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_containsBuddyMember_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('containsBuddyMember failed: unknown result');
  }

  getActiveMemberCountByBuddyMid (buddyMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getActiveMemberCountByBuddyMid(buddyMid);
    });
  }

  send_getActiveMemberCountByBuddyMid (buddyMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid
    };
    const args = new BuddyManagementService_getActiveMemberCountByBuddyMid_args(params);
    try {
      output.writeMessageBegin('getActiveMemberCountByBuddyMid', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getActiveMemberCountByBuddyMid (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_getActiveMemberCountByBuddyMid_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getActiveMemberCountByBuddyMid failed: unknown result');
  }

  downloadMessageContentPreview (requestId, messageId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_downloadMessageContentPreview(requestId, messageId);
    });
  }

  send_downloadMessageContentPreview (requestId, messageId) {
    const output = new this.pClass(this.output);
    const params = {
      requestId: requestId,
      messageId: messageId
    };
    const args = new BuddyManagementService_downloadMessageContentPreview_args(params);
    try {
      output.writeMessageBegin('downloadMessageContentPreview', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_downloadMessageContentPreview (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_downloadMessageContentPreview_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('downloadMessageContentPreview failed: unknown result');
  }

  notifyBuddyRegistered (buddyId, buddyMid, searchId, displayName, statusMessage, settings) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_notifyBuddyRegistered(buddyId, buddyMid, searchId, displayName, statusMessage, settings);
    });
  }

  send_notifyBuddyRegistered (buddyId, buddyMid, searchId, displayName, statusMessage, settings) {
    const output = new this.pClass(this.output);
    const params = {
      buddyId: buddyId,
      buddyMid: buddyMid,
      searchId: searchId,
      displayName: displayName,
      statusMessage: statusMessage,
      settings: settings
    };
    const args = new BuddyManagementService_notifyBuddyRegistered_args(params);
    try {
      output.writeMessageBegin('notifyBuddyRegistered', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_notifyBuddyRegistered (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyManagementService_notifyBuddyRegistered_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }
};
const BuddyManagementServiceProcessor = exports.Processor = class {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_unregisterBuddy (seqid, input, output) {
    const args = new BuddyManagementService_unregisterBuddy_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.unregisterBuddy.length === 1) {
      Promise.resolve(this._handler.unregisterBuddy.bind(this._handler)(
        args.requestId
      )).then(result => {
        const result_obj = new BuddyManagementService_unregisterBuddy_result({success: result});
        output.writeMessageBegin("unregisterBuddy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_unregisterBuddy_result(err);
          output.writeMessageBegin("unregisterBuddy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterBuddy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.unregisterBuddy(args.requestId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_unregisterBuddy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("unregisterBuddy", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterBuddy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendBuddyContentMessageToMidsAsync (seqid, input, output) {
    const args = new BuddyManagementService_sendBuddyContentMessageToMidsAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendBuddyContentMessageToMidsAsync.length === 4) {
      Promise.resolve(this._handler.sendBuddyContentMessageToMidsAsync.bind(this._handler)(
        args.requestId,
        args.msg,
        args.content,
        args.mids
      )).then(result => {
        const result_obj = new BuddyManagementService_sendBuddyContentMessageToMidsAsync_result({success: result});
        output.writeMessageBegin("sendBuddyContentMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_sendBuddyContentMessageToMidsAsync_result(err);
          output.writeMessageBegin("sendBuddyContentMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyContentMessageToMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendBuddyContentMessageToMidsAsync(args.requestId, args.msg, args.content, args.mids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_sendBuddyContentMessageToMidsAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendBuddyContentMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyContentMessageToMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getAllBuddyMembers (seqid, input, output) {
    const args = new BuddyManagementService_getAllBuddyMembers_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getAllBuddyMembers.length === 0) {
      Promise.resolve(this._handler.getAllBuddyMembers.bind(this._handler)(
      )).then(result => {
        const result_obj = new BuddyManagementService_getAllBuddyMembers_result({success: result});
        output.writeMessageBegin("getAllBuddyMembers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getAllBuddyMembers_result(err);
          output.writeMessageBegin("getAllBuddyMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getAllBuddyMembers((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getAllBuddyMembers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getAllBuddyMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getActiveMemberMidsByBuddyMid (seqid, input, output) {
    const args = new BuddyManagementService_getActiveMemberMidsByBuddyMid_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getActiveMemberMidsByBuddyMid.length === 1) {
      Promise.resolve(this._handler.getActiveMemberMidsByBuddyMid.bind(this._handler)(
        args.buddyMid
      )).then(result => {
        const result_obj = new BuddyManagementService_getActiveMemberMidsByBuddyMid_result({success: result});
        output.writeMessageBegin("getActiveMemberMidsByBuddyMid", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getActiveMemberMidsByBuddyMid_result(err);
          output.writeMessageBegin("getActiveMemberMidsByBuddyMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActiveMemberMidsByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getActiveMemberMidsByBuddyMid(args.buddyMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getActiveMemberMidsByBuddyMid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getActiveMemberMidsByBuddyMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActiveMemberMidsByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_updateBuddyProfileAttributes (seqid, input, output) {
    const args = new BuddyManagementService_updateBuddyProfileAttributes_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.updateBuddyProfileAttributes.length === 3) {
      Promise.resolve(this._handler.updateBuddyProfileAttributes.bind(this._handler)(
        args.requestId,
        args.attributes,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_updateBuddyProfileAttributes_result({success: result});
        output.writeMessageBegin("updateBuddyProfileAttributes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_updateBuddyProfileAttributes_result(err);
          output.writeMessageBegin("updateBuddyProfileAttributes", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileAttributes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.updateBuddyProfileAttributes(args.requestId, args.attributes, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_updateBuddyProfileAttributes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("updateBuddyProfileAttributes", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileAttributes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_storePrivateMessages (seqid, input, output) {
    const args = new BuddyManagementService_storePrivateMessages_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.storePrivateMessages.length === 3) {
      Promise.resolve(this._handler.storePrivateMessages.bind(this._handler)(
        args.requestId,
        args.privateBotMessages,
        args.toMid
      )).then(result => {
        const result_obj = new BuddyManagementService_storePrivateMessages_result({success: result});
        output.writeMessageBegin("storePrivateMessages", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_storePrivateMessages_result(err);
          output.writeMessageBegin("storePrivateMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storePrivateMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.storePrivateMessages(args.requestId, args.privateBotMessages, args.toMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_storePrivateMessages_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("storePrivateMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storePrivateMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_updateBuddyProfileImageAsync (seqid, input, output) {
    const args = new BuddyManagementService_updateBuddyProfileImageAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.updateBuddyProfileImageAsync.length === 3) {
      Promise.resolve(this._handler.updateBuddyProfileImageAsync.bind(this._handler)(
        args.requestId,
        args.image,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_updateBuddyProfileImageAsync_result({success: result});
        output.writeMessageBegin("updateBuddyProfileImageAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_updateBuddyProfileImageAsync_result(err);
          output.writeMessageBegin("updateBuddyProfileImageAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileImageAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.updateBuddyProfileImageAsync(args.requestId, args.image, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_updateBuddyProfileImageAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("updateBuddyProfileImageAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileImageAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_notifyBuddyBlocked (seqid, input, output) {
    const args = new BuddyManagementService_notifyBuddyBlocked_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.notifyBuddyBlocked.length === 2) {
      Promise.resolve(this._handler.notifyBuddyBlocked.bind(this._handler)(
        args.buddyMid,
        args.blockerMid
      )).then(result => {
        const result_obj = new BuddyManagementService_notifyBuddyBlocked_result({success: result});
        output.writeMessageBegin("notifyBuddyBlocked", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_notifyBuddyBlocked_result(err);
          output.writeMessageBegin("notifyBuddyBlocked", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddyBlocked", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.notifyBuddyBlocked(args.buddyMid, args.blockerMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_notifyBuddyBlocked_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("notifyBuddyBlocked", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddyBlocked", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getMemberCountByBuddyMid (seqid, input, output) {
    const args = new BuddyManagementService_getMemberCountByBuddyMid_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getMemberCountByBuddyMid.length === 1) {
      Promise.resolve(this._handler.getMemberCountByBuddyMid.bind(this._handler)(
        args.buddyMid
      )).then(result => {
        const result_obj = new BuddyManagementService_getMemberCountByBuddyMid_result({success: result});
        output.writeMessageBegin("getMemberCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getMemberCountByBuddyMid_result(err);
          output.writeMessageBegin("getMemberCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMemberCountByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getMemberCountByBuddyMid(args.buddyMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getMemberCountByBuddyMid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getMemberCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMemberCountByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_isBuddyOnAirByMid (seqid, input, output) {
    const args = new BuddyManagementService_isBuddyOnAirByMid_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.isBuddyOnAirByMid.length === 1) {
      Promise.resolve(this._handler.isBuddyOnAirByMid.bind(this._handler)(
        args.buddyMid
      )).then(result => {
        const result_obj = new BuddyManagementService_isBuddyOnAirByMid_result({success: result});
        output.writeMessageBegin("isBuddyOnAirByMid", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_isBuddyOnAirByMid_result(err);
          output.writeMessageBegin("isBuddyOnAirByMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isBuddyOnAirByMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.isBuddyOnAirByMid(args.buddyMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_isBuddyOnAirByMid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("isBuddyOnAirByMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isBuddyOnAirByMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_commitPrivateMessages (seqid, input, output) {
    const args = new BuddyManagementService_commitPrivateMessages_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.commitPrivateMessages.length === 3) {
      Promise.resolve(this._handler.commitPrivateMessages.bind(this._handler)(
        args.requestId,
        args.privateMessageStoreRequestId,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_commitPrivateMessages_result({success: result});
        output.writeMessageBegin("commitPrivateMessages", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_commitPrivateMessages_result(err);
          output.writeMessageBegin("commitPrivateMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitPrivateMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.commitPrivateMessages(args.requestId, args.privateMessageStoreRequestId, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_commitPrivateMessages_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("commitPrivateMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitPrivateMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_commitPublicMessagesToMids (seqid, input, output) {
    const args = new BuddyManagementService_commitPublicMessagesToMids_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.commitPublicMessagesToMids.length === 4) {
      Promise.resolve(this._handler.commitPublicMessagesToMids.bind(this._handler)(
        args.requestId,
        args.publicMessageStoreRequestId,
        args.toMids,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_commitPublicMessagesToMids_result({success: result});
        output.writeMessageBegin("commitPublicMessagesToMids", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_commitPublicMessagesToMids_result(err);
          output.writeMessageBegin("commitPublicMessagesToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitPublicMessagesToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.commitPublicMessagesToMids(args.requestId, args.publicMessageStoreRequestId, args.toMids, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_commitPublicMessagesToMids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("commitPublicMessagesToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitPublicMessagesToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_addBuddyMember (seqid, input, output) {
    const args = new BuddyManagementService_addBuddyMember_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addBuddyMember.length === 2) {
      Promise.resolve(this._handler.addBuddyMember.bind(this._handler)(
        args.requestId,
        args.userMid
      )).then(result => {
        const result_obj = new BuddyManagementService_addBuddyMember_result({success: result});
        output.writeMessageBegin("addBuddyMember", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_addBuddyMember_result(err);
          output.writeMessageBegin("addBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.addBuddyMember(args.requestId, args.userMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_addBuddyMember_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("addBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_linkAndSendBuddyContentMessageToMids (seqid, input, output) {
    const args = new BuddyManagementService_linkAndSendBuddyContentMessageToMids_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.linkAndSendBuddyContentMessageToMids.length === 5) {
      Promise.resolve(this._handler.linkAndSendBuddyContentMessageToMids.bind(this._handler)(
        args.requestId,
        args.msg,
        args.sourceContentId,
        args.mids,
        args.usePermanent
      )).then(result => {
        const result_obj = new BuddyManagementService_linkAndSendBuddyContentMessageToMids_result({success: result});
        output.writeMessageBegin("linkAndSendBuddyContentMessageToMids", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_linkAndSendBuddyContentMessageToMids_result(err);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.linkAndSendBuddyContentMessageToMids(args.requestId, args.msg, args.sourceContentId, args.mids, args.usePermanent, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_linkAndSendBuddyContentMessageToMids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("linkAndSendBuddyContentMessageToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_storeMessages (seqid, input, output) {
    const args = new BuddyManagementService_storeMessages_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.storeMessages.length === 2) {
      Promise.resolve(this._handler.storeMessages.bind(this._handler)(
        args.requestIds,
        args.messageRequests
      )).then(result => {
        const result_obj = new BuddyManagementService_storeMessages_result({success: result});
        output.writeMessageBegin("storeMessages", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_storeMessages_result(err);
          output.writeMessageBegin("storeMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.storeMessages(args.requestIds, args.messageRequests, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_storeMessages_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("storeMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_storeMessage (seqid, input, output) {
    const args = new BuddyManagementService_storeMessage_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.storeMessage.length === 2) {
      Promise.resolve(this._handler.storeMessage.bind(this._handler)(
        args.requestId,
        args.messageRequest
      )).then(result => {
        const result_obj = new BuddyManagementService_storeMessage_result({success: result});
        output.writeMessageBegin("storeMessage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_storeMessage_result(err);
          output.writeMessageBegin("storeMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.storeMessage(args.requestId, args.messageRequest, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_storeMessage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("storeMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_registerBuddy (seqid, input, output) {
    const args = new BuddyManagementService_registerBuddy_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.registerBuddy.length === 6) {
      Promise.resolve(this._handler.registerBuddy.bind(this._handler)(
        args.buddyId,
        args.searchId,
        args.displayName,
        args.statusMeessage,
        args.picture,
        args.settings
      )).then(result => {
        const result_obj = new BuddyManagementService_registerBuddy_result({success: result});
        output.writeMessageBegin("registerBuddy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_registerBuddy_result(err);
          output.writeMessageBegin("registerBuddy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerBuddy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.registerBuddy(args.buddyId, args.searchId, args.displayName, args.statusMeessage, args.picture, args.settings, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_registerBuddy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("registerBuddy", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerBuddy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getUnregisterBuddyResult (seqid, input, output) {
    const args = new BuddyManagementService_getUnregisterBuddyResult_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getUnregisterBuddyResult.length === 2) {
      Promise.resolve(this._handler.getUnregisterBuddyResult.bind(this._handler)(
        args.unregisterBuddyRequestId,
        args.buddyMid
      )).then(result => {
        const result_obj = new BuddyManagementService_getUnregisterBuddyResult_result({success: result});
        output.writeMessageBegin("getUnregisterBuddyResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getUnregisterBuddyResult_result(err);
          output.writeMessageBegin("getUnregisterBuddyResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUnregisterBuddyResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getUnregisterBuddyResult(args.unregisterBuddyRequestId, args.buddyMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getUnregisterBuddyResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getUnregisterBuddyResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUnregisterBuddyResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_updateBuddySearchId (seqid, input, output) {
    const args = new BuddyManagementService_updateBuddySearchId_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.updateBuddySearchId.length === 2) {
      Promise.resolve(this._handler.updateBuddySearchId.bind(this._handler)(
        args.requestId,
        args.searchId
      )).then(result => {
        const result_obj = new BuddyManagementService_updateBuddySearchId_result({success: result});
        output.writeMessageBegin("updateBuddySearchId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_updateBuddySearchId_result(err);
          output.writeMessageBegin("updateBuddySearchId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddySearchId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.updateBuddySearchId(args.requestId, args.searchId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_updateBuddySearchId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("updateBuddySearchId", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddySearchId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_uploadBuddyContent (seqid, input, output) {
    const args = new BuddyManagementService_uploadBuddyContent_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.uploadBuddyContent.length === 2) {
      Promise.resolve(this._handler.uploadBuddyContent.bind(this._handler)(
        args.contentType,
        args.content
      )).then(result => {
        const result_obj = new BuddyManagementService_uploadBuddyContent_result({success: result});
        output.writeMessageBegin("uploadBuddyContent", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_uploadBuddyContent_result(err);
          output.writeMessageBegin("uploadBuddyContent", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("uploadBuddyContent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.uploadBuddyContent(args.contentType, args.content, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_uploadBuddyContent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("uploadBuddyContent", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("uploadBuddyContent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_updateBuddyProfileImage (seqid, input, output) {
    const args = new BuddyManagementService_updateBuddyProfileImage_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.updateBuddyProfileImage.length === 3) {
      Promise.resolve(this._handler.updateBuddyProfileImage.bind(this._handler)(
        args.requestId,
        args.image,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_updateBuddyProfileImage_result({success: result});
        output.writeMessageBegin("updateBuddyProfileImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_updateBuddyProfileImage_result(err);
          output.writeMessageBegin("updateBuddyProfileImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.updateBuddyProfileImage(args.requestId, args.image, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_updateBuddyProfileImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("updateBuddyProfileImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendBuddyMessageToAll (seqid, input, output) {
    const args = new BuddyManagementService_sendBuddyMessageToAll_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendBuddyMessageToAll.length === 2) {
      Promise.resolve(this._handler.sendBuddyMessageToAll.bind(this._handler)(
        args.requestId,
        args.msg
      )).then(result => {
        const result_obj = new BuddyManagementService_sendBuddyMessageToAll_result({success: result});
        output.writeMessageBegin("sendBuddyMessageToAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_sendBuddyMessageToAll_result(err);
          output.writeMessageBegin("sendBuddyMessageToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyMessageToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendBuddyMessageToAll(args.requestId, args.msg, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_sendBuddyMessageToAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendBuddyMessageToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyMessageToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_commitSendMessagesToAll (seqid, input, output) {
    const args = new BuddyManagementService_commitSendMessagesToAll_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.commitSendMessagesToAll.length === 4) {
      Promise.resolve(this._handler.commitSendMessagesToAll.bind(this._handler)(
        args.requestId,
        args.commitRequestIdList,
        args.priority,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_commitSendMessagesToAll_result({success: result});
        output.writeMessageBegin("commitSendMessagesToAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_commitSendMessagesToAll_result(err);
          output.writeMessageBegin("commitSendMessagesToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.commitSendMessagesToAll(args.requestId, args.commitRequestIdList, args.priority, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_commitSendMessagesToAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("commitSendMessagesToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_downloadMessageContent (seqid, input, output) {
    const args = new BuddyManagementService_downloadMessageContent_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.downloadMessageContent.length === 2) {
      Promise.resolve(this._handler.downloadMessageContent.bind(this._handler)(
        args.requestId,
        args.messageId
      )).then(result => {
        const result_obj = new BuddyManagementService_downloadMessageContent_result({success: result});
        output.writeMessageBegin("downloadMessageContent", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_downloadMessageContent_result(err);
          output.writeMessageBegin("downloadMessageContent", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadMessageContent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.downloadMessageContent(args.requestId, args.messageId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_downloadMessageContent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("downloadMessageContent", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadMessageContent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_updateBuddyProfileRichMenu (seqid, input, output) {
    const args = new BuddyManagementService_updateBuddyProfileRichMenu_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.updateBuddyProfileRichMenu.length === 2) {
      Promise.resolve(this._handler.updateBuddyProfileRichMenu.bind(this._handler)(
        args.requestId,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_updateBuddyProfileRichMenu_result({success: result});
        output.writeMessageBegin("updateBuddyProfileRichMenu", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_updateBuddyProfileRichMenu_result(err);
          output.writeMessageBegin("updateBuddyProfileRichMenu", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileRichMenu", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.updateBuddyProfileRichMenu(args.requestId, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_updateBuddyProfileRichMenu_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("updateBuddyProfileRichMenu", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileRichMenu", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_setBuddyOnAir (seqid, input, output) {
    const args = new BuddyManagementService_setBuddyOnAir_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.setBuddyOnAir.length === 3) {
      Promise.resolve(this._handler.setBuddyOnAir.bind(this._handler)(
        args.requestId,
        args.onAir,
        args.label
      )).then(result => {
        const result_obj = new BuddyManagementService_setBuddyOnAir_result({success: result});
        output.writeMessageBegin("setBuddyOnAir", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_setBuddyOnAir_result(err);
          output.writeMessageBegin("setBuddyOnAir", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setBuddyOnAir", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.setBuddyOnAir(args.requestId, args.onAir, args.label, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_setBuddyOnAir_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("setBuddyOnAir", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setBuddyOnAir", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_unblockBuddyMember (seqid, input, output) {
    const args = new BuddyManagementService_unblockBuddyMember_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.unblockBuddyMember.length === 2) {
      Promise.resolve(this._handler.unblockBuddyMember.bind(this._handler)(
        args.requestId,
        args.mid
      )).then(result => {
        const result_obj = new BuddyManagementService_unblockBuddyMember_result({success: result});
        output.writeMessageBegin("unblockBuddyMember", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_unblockBuddyMember_result(err);
          output.writeMessageBegin("unblockBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unblockBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.unblockBuddyMember(args.requestId, args.mid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_unblockBuddyMember_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("unblockBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unblockBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_linkAndSendBuddyContentMessageToAll (seqid, input, output) {
    const args = new BuddyManagementService_linkAndSendBuddyContentMessageToAll_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.linkAndSendBuddyContentMessageToAll.length === 4) {
      Promise.resolve(this._handler.linkAndSendBuddyContentMessageToAll.bind(this._handler)(
        args.requestId,
        args.msg,
        args.sourceContentId,
        args.usePermanent
      )).then(result => {
        const result_obj = new BuddyManagementService_linkAndSendBuddyContentMessageToAll_result({success: result});
        output.writeMessageBegin("linkAndSendBuddyContentMessageToAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_linkAndSendBuddyContentMessageToAll_result(err);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.linkAndSendBuddyContentMessageToAll(args.requestId, args.msg, args.sourceContentId, args.usePermanent, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_linkAndSendBuddyContentMessageToAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("linkAndSendBuddyContentMessageToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_removeBuddyMember (seqid, input, output) {
    const args = new BuddyManagementService_removeBuddyMember_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.removeBuddyMember.length === 2) {
      Promise.resolve(this._handler.removeBuddyMember.bind(this._handler)(
        args.requestId,
        args.userMid
      )).then(result => {
        const result_obj = new BuddyManagementService_removeBuddyMember_result({success: result});
        output.writeMessageBegin("removeBuddyMember", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_removeBuddyMember_result(err);
          output.writeMessageBegin("removeBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.removeBuddyMember(args.requestId, args.userMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_removeBuddyMember_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("removeBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_commitSendMessagesToMidAsync (seqid, input, output) {
    const args = new BuddyManagementService_commitSendMessagesToMidAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.commitSendMessagesToMidAsync.length === 3) {
      Promise.resolve(this._handler.commitSendMessagesToMidAsync.bind(this._handler)(
        args.requestId,
        args.storeMessagesRequestIds,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_commitSendMessagesToMidAsync_result({success: result});
        output.writeMessageBegin("commitSendMessagesToMidAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_commitSendMessagesToMidAsync_result(err);
          output.writeMessageBegin("commitSendMessagesToMidAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToMidAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.commitSendMessagesToMidAsync(args.requestId, args.storeMessagesRequestIds, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_commitSendMessagesToMidAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("commitSendMessagesToMidAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToMidAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getUpdateBuddyProfileResult (seqid, input, output) {
    const args = new BuddyManagementService_getUpdateBuddyProfileResult_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getUpdateBuddyProfileResult.length === 1) {
      Promise.resolve(this._handler.getUpdateBuddyProfileResult.bind(this._handler)(
        args.updateBuddyProfileRequestId
      )).then(result => {
        const result_obj = new BuddyManagementService_getUpdateBuddyProfileResult_result({success: result});
        output.writeMessageBegin("getUpdateBuddyProfileResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getUpdateBuddyProfileResult_result(err);
          output.writeMessageBegin("getUpdateBuddyProfileResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUpdateBuddyProfileResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getUpdateBuddyProfileResult(args.updateBuddyProfileRequestId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getUpdateBuddyProfileResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getUpdateBuddyProfileResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUpdateBuddyProfileResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_notifyBuddyUnblocked (seqid, input, output) {
    const args = new BuddyManagementService_notifyBuddyUnblocked_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.notifyBuddyUnblocked.length === 2) {
      Promise.resolve(this._handler.notifyBuddyUnblocked.bind(this._handler)(
        args.buddyMid,
        args.blockerMid
      )).then(result => {
        const result_obj = new BuddyManagementService_notifyBuddyUnblocked_result({success: result});
        output.writeMessageBegin("notifyBuddyUnblocked", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_notifyBuddyUnblocked_result(err);
          output.writeMessageBegin("notifyBuddyUnblocked", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddyUnblocked", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.notifyBuddyUnblocked(args.buddyMid, args.blockerMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_notifyBuddyUnblocked_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("notifyBuddyUnblocked", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddyUnblocked", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_updateBuddyProfileRichMenuAsync (seqid, input, output) {
    const args = new BuddyManagementService_updateBuddyProfileRichMenuAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.updateBuddyProfileRichMenuAsync.length === 2) {
      Promise.resolve(this._handler.updateBuddyProfileRichMenuAsync.bind(this._handler)(
        args.requestId,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_updateBuddyProfileRichMenuAsync_result({success: result});
        output.writeMessageBegin("updateBuddyProfileRichMenuAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_updateBuddyProfileRichMenuAsync_result(err);
          output.writeMessageBegin("updateBuddyProfileRichMenuAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileRichMenuAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.updateBuddyProfileRichMenuAsync(args.requestId, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_updateBuddyProfileRichMenuAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("updateBuddyProfileRichMenuAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileRichMenuAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBuddyProfile (seqid, input, output) {
    const args = new BuddyManagementService_getBuddyProfile_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyProfile.length === 0) {
      Promise.resolve(this._handler.getBuddyProfile.bind(this._handler)(
      )).then(result => {
        const result_obj = new BuddyManagementService_getBuddyProfile_result({success: result});
        output.writeMessageBegin("getBuddyProfile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getBuddyProfile_result(err);
          output.writeMessageBegin("getBuddyProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyProfile((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getBuddyProfile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBlockedBuddyMembers (seqid, input, output) {
    const args = new BuddyManagementService_getBlockedBuddyMembers_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBlockedBuddyMembers.length === 0) {
      Promise.resolve(this._handler.getBlockedBuddyMembers.bind(this._handler)(
      )).then(result => {
        const result_obj = new BuddyManagementService_getBlockedBuddyMembers_result({success: result});
        output.writeMessageBegin("getBlockedBuddyMembers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getBlockedBuddyMembers_result(err);
          output.writeMessageBegin("getBlockedBuddyMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBlockedBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBlockedBuddyMembers((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getBlockedBuddyMembers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBlockedBuddyMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBlockedBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_commitPublicMessagesToAll (seqid, input, output) {
    const args = new BuddyManagementService_commitPublicMessagesToAll_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.commitPublicMessagesToAll.length === 3) {
      Promise.resolve(this._handler.commitPublicMessagesToAll.bind(this._handler)(
        args.requestId,
        args.publicMessageStoreRequestId,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_commitPublicMessagesToAll_result({success: result});
        output.writeMessageBegin("commitPublicMessagesToAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_commitPublicMessagesToAll_result(err);
          output.writeMessageBegin("commitPublicMessagesToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitPublicMessagesToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.commitPublicMessagesToAll(args.requestId, args.publicMessageStoreRequestId, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_commitPublicMessagesToAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("commitPublicMessagesToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitPublicMessagesToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_linkAndSendBuddyContentMessageToAllAsync (seqid, input, output) {
    const args = new BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.linkAndSendBuddyContentMessageToAllAsync.length === 4) {
      Promise.resolve(this._handler.linkAndSendBuddyContentMessageToAllAsync.bind(this._handler)(
        args.requestId,
        args.msg,
        args.sourceContentId,
        args.usePermanent
      )).then(result => {
        const result_obj = new BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result({success: result});
        output.writeMessageBegin("linkAndSendBuddyContentMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result(err);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.linkAndSendBuddyContentMessageToAllAsync(args.requestId, args.msg, args.sourceContentId, args.usePermanent, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("linkAndSendBuddyContentMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendBuddyContentMessageToAllAsync (seqid, input, output) {
    const args = new BuddyManagementService_sendBuddyContentMessageToAllAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendBuddyContentMessageToAllAsync.length === 3) {
      Promise.resolve(this._handler.sendBuddyContentMessageToAllAsync.bind(this._handler)(
        args.requestId,
        args.msg,
        args.content
      )).then(result => {
        const result_obj = new BuddyManagementService_sendBuddyContentMessageToAllAsync_result({success: result});
        output.writeMessageBegin("sendBuddyContentMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_sendBuddyContentMessageToAllAsync_result(err);
          output.writeMessageBegin("sendBuddyContentMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyContentMessageToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendBuddyContentMessageToAllAsync(args.requestId, args.msg, args.content, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_sendBuddyContentMessageToAllAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendBuddyContentMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyContentMessageToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getSetBuddyOnAirResult (seqid, input, output) {
    const args = new BuddyManagementService_getSetBuddyOnAirResult_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getSetBuddyOnAirResult.length === 1) {
      Promise.resolve(this._handler.getSetBuddyOnAirResult.bind(this._handler)(
        args.setBuddyOnAirRequestId
      )).then(result => {
        const result_obj = new BuddyManagementService_getSetBuddyOnAirResult_result({success: result});
        output.writeMessageBegin("getSetBuddyOnAirResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getSetBuddyOnAirResult_result(err);
          output.writeMessageBegin("getSetBuddyOnAirResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSetBuddyOnAirResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getSetBuddyOnAirResult(args.setBuddyOnAirRequestId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getSetBuddyOnAirResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getSetBuddyOnAirResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSetBuddyOnAirResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_commitSendMessagesToMidsAsync (seqid, input, output) {
    const args = new BuddyManagementService_commitSendMessagesToMidsAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.commitSendMessagesToMidsAsync.length === 5) {
      Promise.resolve(this._handler.commitSendMessagesToMidsAsync.bind(this._handler)(
        args.requestId,
        args.commitRequestIdList,
        args.mids,
        args.priority,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_commitSendMessagesToMidsAsync_result({success: result});
        output.writeMessageBegin("commitSendMessagesToMidsAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_commitSendMessagesToMidsAsync_result(err);
          output.writeMessageBegin("commitSendMessagesToMidsAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.commitSendMessagesToMidsAsync(args.requestId, args.commitRequestIdList, args.mids, args.priority, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_commitSendMessagesToMidsAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("commitSendMessagesToMidsAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_commitSendMessagesToStoredMidsAsync (seqid, input, output) {
    const args = new BuddyManagementService_commitSendMessagesToStoredMidsAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.commitSendMessagesToStoredMidsAsync.length === 5) {
      Promise.resolve(this._handler.commitSendMessagesToStoredMidsAsync.bind(this._handler)(
        args.requestId,
        args.commitRequestIdList,
        args.storedMidFilename,
        args.priority,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_commitSendMessagesToStoredMidsAsync_result({success: result});
        output.writeMessageBegin("commitSendMessagesToStoredMidsAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_commitSendMessagesToStoredMidsAsync_result(err);
          output.writeMessageBegin("commitSendMessagesToStoredMidsAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToStoredMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.commitSendMessagesToStoredMidsAsync(args.requestId, args.commitRequestIdList, args.storedMidFilename, args.priority, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_commitSendMessagesToStoredMidsAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("commitSendMessagesToStoredMidsAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToStoredMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_updateBuddyAdminProfileAttribute (seqid, input, output) {
    const args = new BuddyManagementService_updateBuddyAdminProfileAttribute_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.updateBuddyAdminProfileAttribute.length === 2) {
      Promise.resolve(this._handler.updateBuddyAdminProfileAttribute.bind(this._handler)(
        args.requestId,
        args.attributes
      )).then(result => {
        const result_obj = new BuddyManagementService_updateBuddyAdminProfileAttribute_result({success: result});
        output.writeMessageBegin("updateBuddyAdminProfileAttribute", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_updateBuddyAdminProfileAttribute_result(err);
          output.writeMessageBegin("updateBuddyAdminProfileAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyAdminProfileAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.updateBuddyAdminProfileAttribute(args.requestId, args.attributes, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_updateBuddyAdminProfileAttribute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("updateBuddyAdminProfileAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyAdminProfileAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_setBuddyOnAirAsync (seqid, input, output) {
    const args = new BuddyManagementService_setBuddyOnAirAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.setBuddyOnAirAsync.length === 3) {
      Promise.resolve(this._handler.setBuddyOnAirAsync.bind(this._handler)(
        args.requestId,
        args.onAir,
        args.label
      )).then(result => {
        const result_obj = new BuddyManagementService_setBuddyOnAirAsync_result({success: result});
        output.writeMessageBegin("setBuddyOnAirAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_setBuddyOnAirAsync_result(err);
          output.writeMessageBegin("setBuddyOnAirAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setBuddyOnAirAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.setBuddyOnAirAsync(args.requestId, args.onAir, args.label, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_setBuddyOnAirAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("setBuddyOnAirAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setBuddyOnAirAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_commitSendMessagesToMids (seqid, input, output) {
    const args = new BuddyManagementService_commitSendMessagesToMids_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.commitSendMessagesToMids.length === 5) {
      Promise.resolve(this._handler.commitSendMessagesToMids.bind(this._handler)(
        args.requestId,
        args.commitRequestIdList,
        args.mids,
        args.priority,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_commitSendMessagesToMids_result({success: result});
        output.writeMessageBegin("commitSendMessagesToMids", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_commitSendMessagesToMids_result(err);
          output.writeMessageBegin("commitSendMessagesToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.commitSendMessagesToMids(args.requestId, args.commitRequestIdList, args.mids, args.priority, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_commitSendMessagesToMids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("commitSendMessagesToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendBuddyContentMessageToAll (seqid, input, output) {
    const args = new BuddyManagementService_sendBuddyContentMessageToAll_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendBuddyContentMessageToAll.length === 3) {
      Promise.resolve(this._handler.sendBuddyContentMessageToAll.bind(this._handler)(
        args.requestId,
        args.msg,
        args.content
      )).then(result => {
        const result_obj = new BuddyManagementService_sendBuddyContentMessageToAll_result({success: result});
        output.writeMessageBegin("sendBuddyContentMessageToAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_sendBuddyContentMessageToAll_result(err);
          output.writeMessageBegin("sendBuddyContentMessageToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyContentMessageToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendBuddyContentMessageToAll(args.requestId, args.msg, args.content, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_sendBuddyContentMessageToAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendBuddyContentMessageToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyContentMessageToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_updateBuddySettings (seqid, input, output) {
    const args = new BuddyManagementService_updateBuddySettings_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.updateBuddySettings.length === 1) {
      Promise.resolve(this._handler.updateBuddySettings.bind(this._handler)(
        args.settings
      )).then(result => {
        const result_obj = new BuddyManagementService_updateBuddySettings_result({success: result});
        output.writeMessageBegin("updateBuddySettings", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_updateBuddySettings_result(err);
          output.writeMessageBegin("updateBuddySettings", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddySettings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.updateBuddySettings(args.settings, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_updateBuddySettings_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("updateBuddySettings", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddySettings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_notifyBuddySubscribed (seqid, input, output) {
    const args = new BuddyManagementService_notifyBuddySubscribed_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.notifyBuddySubscribed.length === 2) {
      Promise.resolve(this._handler.notifyBuddySubscribed.bind(this._handler)(
        args.buddyMid,
        args.subscriberMid
      )).then(result => {
        const result_obj = new BuddyManagementService_notifyBuddySubscribed_result({success: result});
        output.writeMessageBegin("notifyBuddySubscribed", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_notifyBuddySubscribed_result(err);
          output.writeMessageBegin("notifyBuddySubscribed", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddySubscribed", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.notifyBuddySubscribed(args.buddyMid, args.subscriberMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_notifyBuddySubscribed_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("notifyBuddySubscribed", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddySubscribed", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_registerBuddyAdmin (seqid, input, output) {
    const args = new BuddyManagementService_registerBuddyAdmin_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.registerBuddyAdmin.length === 5) {
      Promise.resolve(this._handler.registerBuddyAdmin.bind(this._handler)(
        args.buddyId,
        args.searchId,
        args.displayName,
        args.statusMessage,
        args.picture
      )).then(result => {
        const result_obj = new BuddyManagementService_registerBuddyAdmin_result({success: result});
        output.writeMessageBegin("registerBuddyAdmin", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_registerBuddyAdmin_result(err);
          output.writeMessageBegin("registerBuddyAdmin", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerBuddyAdmin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.registerBuddyAdmin(args.buddyId, args.searchId, args.displayName, args.statusMessage, args.picture, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_registerBuddyAdmin_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("registerBuddyAdmin", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerBuddyAdmin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBlockerCountByBuddyMid (seqid, input, output) {
    const args = new BuddyManagementService_getBlockerCountByBuddyMid_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBlockerCountByBuddyMid.length === 1) {
      Promise.resolve(this._handler.getBlockerCountByBuddyMid.bind(this._handler)(
        args.buddyMid
      )).then(result => {
        const result_obj = new BuddyManagementService_getBlockerCountByBuddyMid_result({success: result});
        output.writeMessageBegin("getBlockerCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getBlockerCountByBuddyMid_result(err);
          output.writeMessageBegin("getBlockerCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBlockerCountByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBlockerCountByBuddyMid(args.buddyMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getBlockerCountByBuddyMid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBlockerCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBlockerCountByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_reissueContactTicket (seqid, input, output) {
    const args = new BuddyManagementService_reissueContactTicket_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.reissueContactTicket.length === 2) {
      Promise.resolve(this._handler.reissueContactTicket.bind(this._handler)(
        args.expirationTime,
        args.maxUseCount
      )).then(result => {
        const result_obj = new BuddyManagementService_reissueContactTicket_result({success: result});
        output.writeMessageBegin("reissueContactTicket", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_reissueContactTicket_result(err);
          output.writeMessageBegin("reissueContactTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reissueContactTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.reissueContactTicket(args.expirationTime, args.maxUseCount, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_reissueContactTicket_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("reissueContactTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reissueContactTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_validateContacts (seqid, input, output) {
    const args = new BuddyManagementService_validateContacts_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.validateContacts.length === 1) {
      Promise.resolve(this._handler.validateContacts.bind(this._handler)(
        args.userMids
      )).then(result => {
        const result_obj = new BuddyManagementService_validateContacts_result({success: result});
        output.writeMessageBegin("validateContacts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_validateContacts_result(err);
          output.writeMessageBegin("validateContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("validateContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.validateContacts(args.userMids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_validateContacts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("validateContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("validateContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendBuddyMessageToMidsAsync (seqid, input, output) {
    const args = new BuddyManagementService_sendBuddyMessageToMidsAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendBuddyMessageToMidsAsync.length === 3) {
      Promise.resolve(this._handler.sendBuddyMessageToMidsAsync.bind(this._handler)(
        args.requestId,
        args.msg,
        args.mids
      )).then(result => {
        const result_obj = new BuddyManagementService_sendBuddyMessageToMidsAsync_result({success: result});
        output.writeMessageBegin("sendBuddyMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_sendBuddyMessageToMidsAsync_result(err);
          output.writeMessageBegin("sendBuddyMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyMessageToMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendBuddyMessageToMidsAsync(args.requestId, args.msg, args.mids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_sendBuddyMessageToMidsAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendBuddyMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyMessageToMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_unregisterBuddyAsync (seqid, input, output) {
    const args = new BuddyManagementService_unregisterBuddyAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.unregisterBuddyAsync.length === 1) {
      Promise.resolve(this._handler.unregisterBuddyAsync.bind(this._handler)(
        args.requestId
      )).then(result => {
        const result_obj = new BuddyManagementService_unregisterBuddyAsync_result({success: result});
        output.writeMessageBegin("unregisterBuddyAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_unregisterBuddyAsync_result(err);
          output.writeMessageBegin("unregisterBuddyAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterBuddyAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.unregisterBuddyAsync(args.requestId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_unregisterBuddyAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("unregisterBuddyAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterBuddyAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getProfileImageUrlHash (seqid, input, output) {
    const args = new BuddyManagementService_getProfileImageUrlHash_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getProfileImageUrlHash.length === 1) {
      Promise.resolve(this._handler.getProfileImageUrlHash.bind(this._handler)(
        args.requestId
      )).then(result => {
        const result_obj = new BuddyManagementService_getProfileImageUrlHash_result({success: result});
        output.writeMessageBegin("getProfileImageUrlHash", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getProfileImageUrlHash_result(err);
          output.writeMessageBegin("getProfileImageUrlHash", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProfileImageUrlHash", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getProfileImageUrlHash(args.requestId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getProfileImageUrlHash_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getProfileImageUrlHash", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProfileImageUrlHash", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_blockBuddyMember (seqid, input, output) {
    const args = new BuddyManagementService_blockBuddyMember_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.blockBuddyMember.length === 2) {
      Promise.resolve(this._handler.blockBuddyMember.bind(this._handler)(
        args.requestId,
        args.mid
      )).then(result => {
        const result_obj = new BuddyManagementService_blockBuddyMember_result({success: result});
        output.writeMessageBegin("blockBuddyMember", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_blockBuddyMember_result(err);
          output.writeMessageBegin("blockBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("blockBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.blockBuddyMember(args.requestId, args.mid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_blockBuddyMember_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("blockBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("blockBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendIndividualEventToAllAsync (seqid, input, output) {
    const args = new BuddyManagementService_sendIndividualEventToAllAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendIndividualEventToAllAsync.length === 3) {
      Promise.resolve(this._handler.sendIndividualEventToAllAsync.bind(this._handler)(
        args.requestId,
        args.buddyMid,
        args.notificationStatus
      )).then(result => {
        const result_obj = new BuddyManagementService_sendIndividualEventToAllAsync_result({success: result});
        output.writeMessageBegin("sendIndividualEventToAllAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_sendIndividualEventToAllAsync_result(err);
          output.writeMessageBegin("sendIndividualEventToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendIndividualEventToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendIndividualEventToAllAsync(args.requestId, args.buddyMid, args.notificationStatus, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_sendIndividualEventToAllAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendIndividualEventToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendIndividualEventToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendChatCheckedByWatermark (seqid, input, output) {
    const args = new BuddyManagementService_sendChatCheckedByWatermark_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendChatCheckedByWatermark.length === 4) {
      Promise.resolve(this._handler.sendChatCheckedByWatermark.bind(this._handler)(
        args.seq,
        args.mid,
        args.watermark,
        args.sessionId
      )).then(result => {
        const result_obj = new BuddyManagementService_sendChatCheckedByWatermark_result({success: result});
        output.writeMessageBegin("sendChatCheckedByWatermark", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_sendChatCheckedByWatermark_result(err);
          output.writeMessageBegin("sendChatCheckedByWatermark", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendChatCheckedByWatermark", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendChatCheckedByWatermark(args.seq, args.mid, args.watermark, args.sessionId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_sendChatCheckedByWatermark_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendChatCheckedByWatermark", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendChatCheckedByWatermark", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_deleteBotProfileImage (seqid, input, output) {
    const args = new BuddyManagementService_deleteBotProfileImage_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.deleteBotProfileImage.length === 1) {
      Promise.resolve(this._handler.deleteBotProfileImage.bind(this._handler)(
        args.requestId
      )).then(result => {
        const result_obj = new BuddyManagementService_deleteBotProfileImage_result({success: result});
        output.writeMessageBegin("deleteBotProfileImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_deleteBotProfileImage_result(err);
          output.writeMessageBegin("deleteBotProfileImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteBotProfileImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.deleteBotProfileImage(args.requestId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_deleteBotProfileImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("deleteBotProfileImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteBotProfileImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendBuddyContentMessageToMids (seqid, input, output) {
    const args = new BuddyManagementService_sendBuddyContentMessageToMids_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendBuddyContentMessageToMids.length === 4) {
      Promise.resolve(this._handler.sendBuddyContentMessageToMids.bind(this._handler)(
        args.requestId,
        args.msg,
        args.content,
        args.mids
      )).then(result => {
        const result_obj = new BuddyManagementService_sendBuddyContentMessageToMids_result({success: result});
        output.writeMessageBegin("sendBuddyContentMessageToMids", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_sendBuddyContentMessageToMids_result(err);
          output.writeMessageBegin("sendBuddyContentMessageToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyContentMessageToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendBuddyContentMessageToMids(args.requestId, args.msg, args.content, args.mids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_sendBuddyContentMessageToMids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendBuddyContentMessageToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyContentMessageToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_unregisterBuddyAdmin (seqid, input, output) {
    const args = new BuddyManagementService_unregisterBuddyAdmin_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.unregisterBuddyAdmin.length === 1) {
      Promise.resolve(this._handler.unregisterBuddyAdmin.bind(this._handler)(
        args.requestId
      )).then(result => {
        const result_obj = new BuddyManagementService_unregisterBuddyAdmin_result({success: result});
        output.writeMessageBegin("unregisterBuddyAdmin", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_unregisterBuddyAdmin_result(err);
          output.writeMessageBegin("unregisterBuddyAdmin", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterBuddyAdmin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.unregisterBuddyAdmin(args.requestId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_unregisterBuddyAdmin_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("unregisterBuddyAdmin", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterBuddyAdmin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_commitPublicMessagesToStoredMids (seqid, input, output) {
    const args = new BuddyManagementService_commitPublicMessagesToStoredMids_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.commitPublicMessagesToStoredMids.length === 4) {
      Promise.resolve(this._handler.commitPublicMessagesToStoredMids.bind(this._handler)(
        args.requestId,
        args.publicMessageStoreRequestId,
        args.storedMidFilename,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_commitPublicMessagesToStoredMids_result({success: result});
        output.writeMessageBegin("commitPublicMessagesToStoredMids", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_commitPublicMessagesToStoredMids_result(err);
          output.writeMessageBegin("commitPublicMessagesToStoredMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitPublicMessagesToStoredMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.commitPublicMessagesToStoredMids(args.requestId, args.publicMessageStoreRequestId, args.storedMidFilename, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_commitPublicMessagesToStoredMids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("commitPublicMessagesToStoredMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitPublicMessagesToStoredMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_removeBuddyMembers (seqid, input, output) {
    const args = new BuddyManagementService_removeBuddyMembers_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.removeBuddyMembers.length === 2) {
      Promise.resolve(this._handler.removeBuddyMembers.bind(this._handler)(
        args.requestId,
        args.userMids
      )).then(result => {
        const result_obj = new BuddyManagementService_removeBuddyMembers_result({success: result});
        output.writeMessageBegin("removeBuddyMembers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_removeBuddyMembers_result(err);
          output.writeMessageBegin("removeBuddyMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.removeBuddyMembers(args.requestId, args.userMids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_removeBuddyMembers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("removeBuddyMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_storePublicMessages (seqid, input, output) {
    const args = new BuddyManagementService_storePublicMessages_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.storePublicMessages.length === 2) {
      Promise.resolve(this._handler.storePublicMessages.bind(this._handler)(
        args.requestId,
        args.messages
      )).then(result => {
        const result_obj = new BuddyManagementService_storePublicMessages_result({success: result});
        output.writeMessageBegin("storePublicMessages", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_storePublicMessages_result(err);
          output.writeMessageBegin("storePublicMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storePublicMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.storePublicMessages(args.requestId, args.messages, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_storePublicMessages_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("storePublicMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storePublicMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_addBuddyMembers (seqid, input, output) {
    const args = new BuddyManagementService_addBuddyMembers_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addBuddyMembers.length === 2) {
      Promise.resolve(this._handler.addBuddyMembers.bind(this._handler)(
        args.requestId,
        args.userMids
      )).then(result => {
        const result_obj = new BuddyManagementService_addBuddyMembers_result({success: result});
        output.writeMessageBegin("addBuddyMembers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_addBuddyMembers_result(err);
          output.writeMessageBegin("addBuddyMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.addBuddyMembers(args.requestId, args.userMids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_addBuddyMembers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("addBuddyMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getMessageCommitResult (seqid, input, output) {
    const args = new BuddyManagementService_getMessageCommitResult_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getMessageCommitResult.length === 1) {
      Promise.resolve(this._handler.getMessageCommitResult.bind(this._handler)(
        args.messageCommitRequestId
      )).then(result => {
        const result_obj = new BuddyManagementService_getMessageCommitResult_result({success: result});
        output.writeMessageBegin("getMessageCommitResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getMessageCommitResult_result(err);
          output.writeMessageBegin("getMessageCommitResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMessageCommitResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getMessageCommitResult(args.messageCommitRequestId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getMessageCommitResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getMessageCommitResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMessageCommitResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBuddyDetailByMid (seqid, input, output) {
    const args = new BuddyManagementService_getBuddyDetailByMid_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyDetailByMid.length === 1) {
      Promise.resolve(this._handler.getBuddyDetailByMid.bind(this._handler)(
        args.buddyMid
      )).then(result => {
        const result_obj = new BuddyManagementService_getBuddyDetailByMid_result({success: result});
        output.writeMessageBegin("getBuddyDetailByMid", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getBuddyDetailByMid_result(err);
          output.writeMessageBegin("getBuddyDetailByMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyDetailByMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyDetailByMid(args.buddyMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getBuddyDetailByMid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyDetailByMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyDetailByMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_notifyBuddySubscriberUnregistered (seqid, input, output) {
    const args = new BuddyManagementService_notifyBuddySubscriberUnregistered_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.notifyBuddySubscriberUnregistered.length === 2) {
      Promise.resolve(this._handler.notifyBuddySubscriberUnregistered.bind(this._handler)(
        args.buddyMid,
        args.userMid
      )).then(result => {
        const result_obj = new BuddyManagementService_notifyBuddySubscriberUnregistered_result({success: result});
        output.writeMessageBegin("notifyBuddySubscriberUnregistered", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_notifyBuddySubscriberUnregistered_result(err);
          output.writeMessageBegin("notifyBuddySubscriberUnregistered", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddySubscriberUnregistered", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.notifyBuddySubscriberUnregistered(args.buddyMid, args.userMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_notifyBuddySubscriberUnregistered_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("notifyBuddySubscriberUnregistered", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddySubscriberUnregistered", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendBuddyMessageToAllAsync (seqid, input, output) {
    const args = new BuddyManagementService_sendBuddyMessageToAllAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendBuddyMessageToAllAsync.length === 2) {
      Promise.resolve(this._handler.sendBuddyMessageToAllAsync.bind(this._handler)(
        args.requestId,
        args.msg
      )).then(result => {
        const result_obj = new BuddyManagementService_sendBuddyMessageToAllAsync_result({success: result});
        output.writeMessageBegin("sendBuddyMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_sendBuddyMessageToAllAsync_result(err);
          output.writeMessageBegin("sendBuddyMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyMessageToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendBuddyMessageToAllAsync(args.requestId, args.msg, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_sendBuddyMessageToAllAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendBuddyMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyMessageToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_sendBuddyMessageToMids (seqid, input, output) {
    const args = new BuddyManagementService_sendBuddyMessageToMids_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sendBuddyMessageToMids.length === 3) {
      Promise.resolve(this._handler.sendBuddyMessageToMids.bind(this._handler)(
        args.requestId,
        args.msg,
        args.mids
      )).then(result => {
        const result_obj = new BuddyManagementService_sendBuddyMessageToMids_result({success: result});
        output.writeMessageBegin("sendBuddyMessageToMids", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_sendBuddyMessageToMids_result(err);
          output.writeMessageBegin("sendBuddyMessageToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyMessageToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.sendBuddyMessageToMids(args.requestId, args.msg, args.mids, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_sendBuddyMessageToMids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("sendBuddyMessageToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyMessageToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBuddyProfilePopup (seqid, input, output) {
    const args = new BuddyManagementService_getBuddyProfilePopup_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyProfilePopup.length === 2) {
      Promise.resolve(this._handler.getBuddyProfilePopup.bind(this._handler)(
        args.buddyMid,
        args.lang
      )).then(result => {
        const result_obj = new BuddyManagementService_getBuddyProfilePopup_result({success: result});
        output.writeMessageBegin("getBuddyProfilePopup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getBuddyProfilePopup_result(err);
          output.writeMessageBegin("getBuddyProfilePopup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyProfilePopup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyProfilePopup(args.buddyMid, args.lang, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getBuddyProfilePopup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyProfilePopup", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyProfilePopup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_commitSendMessagesToAllAsync (seqid, input, output) {
    const args = new BuddyManagementService_commitSendMessagesToAllAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.commitSendMessagesToAllAsync.length === 4) {
      Promise.resolve(this._handler.commitSendMessagesToAllAsync.bind(this._handler)(
        args.requestId,
        args.commitRequestIdList,
        args.priority,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_commitSendMessagesToAllAsync_result({success: result});
        output.writeMessageBegin("commitSendMessagesToAllAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_commitSendMessagesToAllAsync_result(err);
          output.writeMessageBegin("commitSendMessagesToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.commitSendMessagesToAllAsync(args.requestId, args.commitRequestIdList, args.priority, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_commitSendMessagesToAllAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("commitSendMessagesToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_notifyBuddySubscriberEmpty (seqid, input, output) {
    const args = new BuddyManagementService_notifyBuddySubscriberEmpty_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.notifyBuddySubscriberEmpty.length === 2) {
      Promise.resolve(this._handler.notifyBuddySubscriberEmpty.bind(this._handler)(
        args.buddyMid,
        args.userMid
      )).then(result => {
        const result_obj = new BuddyManagementService_notifyBuddySubscriberEmpty_result({success: result});
        output.writeMessageBegin("notifyBuddySubscriberEmpty", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_notifyBuddySubscriberEmpty_result(err);
          output.writeMessageBegin("notifyBuddySubscriberEmpty", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddySubscriberEmpty", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.notifyBuddySubscriberEmpty(args.buddyMid, args.userMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_notifyBuddySubscriberEmpty_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("notifyBuddySubscriberEmpty", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddySubscriberEmpty", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_updateBuddyAdminProfileImage (seqid, input, output) {
    const args = new BuddyManagementService_updateBuddyAdminProfileImage_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.updateBuddyAdminProfileImage.length === 2) {
      Promise.resolve(this._handler.updateBuddyAdminProfileImage.bind(this._handler)(
        args.requestId,
        args.picture
      )).then(result => {
        const result_obj = new BuddyManagementService_updateBuddyAdminProfileImage_result({success: result});
        output.writeMessageBegin("updateBuddyAdminProfileImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_updateBuddyAdminProfileImage_result(err);
          output.writeMessageBegin("updateBuddyAdminProfileImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyAdminProfileImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.updateBuddyAdminProfileImage(args.requestId, args.picture, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_updateBuddyAdminProfileImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("updateBuddyAdminProfileImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyAdminProfileImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_updateBuddyProfileAttributesAsync (seqid, input, output) {
    const args = new BuddyManagementService_updateBuddyProfileAttributesAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.updateBuddyProfileAttributesAsync.length === 3) {
      Promise.resolve(this._handler.updateBuddyProfileAttributesAsync.bind(this._handler)(
        args.requestId,
        args.attributes,
        args.policy
      )).then(result => {
        const result_obj = new BuddyManagementService_updateBuddyProfileAttributesAsync_result({success: result});
        output.writeMessageBegin("updateBuddyProfileAttributesAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_updateBuddyProfileAttributesAsync_result(err);
          output.writeMessageBegin("updateBuddyProfileAttributesAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileAttributesAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.updateBuddyProfileAttributesAsync(args.requestId, args.attributes, args.policy, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_updateBuddyProfileAttributesAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("updateBuddyProfileAttributesAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileAttributesAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_linkAndSendBuddyContentMessageToMidsAsync (seqid, input, output) {
    const args = new BuddyManagementService_linkAndSendBuddyContentMessageToMidsAsync_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.linkAndSendBuddyContentMessageToMidsAsync.length === 5) {
      Promise.resolve(this._handler.linkAndSendBuddyContentMessageToMidsAsync.bind(this._handler)(
        args.requestId,
        args.msg,
        args.sourceContentId,
        args.mids,
        args.usePermanent
      )).then(result => {
        const result_obj = new BuddyManagementService_linkAndSendBuddyContentMessageToMidsAsync_result({success: result});
        output.writeMessageBegin("linkAndSendBuddyContentMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_linkAndSendBuddyContentMessageToMidsAsync_result(err);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.linkAndSendBuddyContentMessageToMidsAsync(args.requestId, args.msg, args.sourceContentId, args.mids, args.usePermanent, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_linkAndSendBuddyContentMessageToMidsAsync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("linkAndSendBuddyContentMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_downloadProfileImagePreview (seqid, input, output) {
    const args = new BuddyManagementService_downloadProfileImagePreview_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.downloadProfileImagePreview.length === 1) {
      Promise.resolve(this._handler.downloadProfileImagePreview.bind(this._handler)(
        args.requestId
      )).then(result => {
        const result_obj = new BuddyManagementService_downloadProfileImagePreview_result({success: result});
        output.writeMessageBegin("downloadProfileImagePreview", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_downloadProfileImagePreview_result(err);
          output.writeMessageBegin("downloadProfileImagePreview", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadProfileImagePreview", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.downloadProfileImagePreview(args.requestId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_downloadProfileImagePreview_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("downloadProfileImagePreview", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadProfileImagePreview", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_downloadProfileImage (seqid, input, output) {
    const args = new BuddyManagementService_downloadProfileImage_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.downloadProfileImage.length === 1) {
      Promise.resolve(this._handler.downloadProfileImage.bind(this._handler)(
        args.requestId
      )).then(result => {
        const result_obj = new BuddyManagementService_downloadProfileImage_result({success: result});
        output.writeMessageBegin("downloadProfileImage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_downloadProfileImage_result(err);
          output.writeMessageBegin("downloadProfileImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadProfileImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.downloadProfileImage(args.requestId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_downloadProfileImage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("downloadProfileImage", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadProfileImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getSendBuddyMessageResult (seqid, input, output) {
    const args = new BuddyManagementService_getSendBuddyMessageResult_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getSendBuddyMessageResult.length === 1) {
      Promise.resolve(this._handler.getSendBuddyMessageResult.bind(this._handler)(
        args.sendBuddyMessageRequestId
      )).then(result => {
        const result_obj = new BuddyManagementService_getSendBuddyMessageResult_result({success: result});
        output.writeMessageBegin("getSendBuddyMessageResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getSendBuddyMessageResult_result(err);
          output.writeMessageBegin("getSendBuddyMessageResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSendBuddyMessageResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getSendBuddyMessageResult(args.sendBuddyMessageRequestId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getSendBuddyMessageResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getSendBuddyMessageResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSendBuddyMessageResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_containsBuddyMember (seqid, input, output) {
    const args = new BuddyManagementService_containsBuddyMember_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.containsBuddyMember.length === 2) {
      Promise.resolve(this._handler.containsBuddyMember.bind(this._handler)(
        args.requestId,
        args.userMid
      )).then(result => {
        const result_obj = new BuddyManagementService_containsBuddyMember_result({success: result});
        output.writeMessageBegin("containsBuddyMember", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_containsBuddyMember_result(err);
          output.writeMessageBegin("containsBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("containsBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.containsBuddyMember(args.requestId, args.userMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_containsBuddyMember_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("containsBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("containsBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getActiveMemberCountByBuddyMid (seqid, input, output) {
    const args = new BuddyManagementService_getActiveMemberCountByBuddyMid_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getActiveMemberCountByBuddyMid.length === 1) {
      Promise.resolve(this._handler.getActiveMemberCountByBuddyMid.bind(this._handler)(
        args.buddyMid
      )).then(result => {
        const result_obj = new BuddyManagementService_getActiveMemberCountByBuddyMid_result({success: result});
        output.writeMessageBegin("getActiveMemberCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_getActiveMemberCountByBuddyMid_result(err);
          output.writeMessageBegin("getActiveMemberCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActiveMemberCountByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getActiveMemberCountByBuddyMid(args.buddyMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_getActiveMemberCountByBuddyMid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getActiveMemberCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActiveMemberCountByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_downloadMessageContentPreview (seqid, input, output) {
    const args = new BuddyManagementService_downloadMessageContentPreview_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.downloadMessageContentPreview.length === 2) {
      Promise.resolve(this._handler.downloadMessageContentPreview.bind(this._handler)(
        args.requestId,
        args.messageId
      )).then(result => {
        const result_obj = new BuddyManagementService_downloadMessageContentPreview_result({success: result});
        output.writeMessageBegin("downloadMessageContentPreview", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_downloadMessageContentPreview_result(err);
          output.writeMessageBegin("downloadMessageContentPreview", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadMessageContentPreview", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.downloadMessageContentPreview(args.requestId, args.messageId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_downloadMessageContentPreview_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("downloadMessageContentPreview", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadMessageContentPreview", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_notifyBuddyRegistered (seqid, input, output) {
    const args = new BuddyManagementService_notifyBuddyRegistered_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.notifyBuddyRegistered.length === 6) {
      Promise.resolve(this._handler.notifyBuddyRegistered.bind(this._handler)(
        args.buddyId,
        args.buddyMid,
        args.searchId,
        args.displayName,
        args.statusMessage,
        args.settings
      )).then(result => {
        const result_obj = new BuddyManagementService_notifyBuddyRegistered_result({success: result});
        output.writeMessageBegin("notifyBuddyRegistered", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyManagementService_notifyBuddyRegistered_result(err);
          output.writeMessageBegin("notifyBuddyRegistered", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddyRegistered", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.notifyBuddyRegistered(args.buddyId, args.buddyMid, args.searchId, args.displayName, args.statusMessage, args.settings, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyManagementService_notifyBuddyRegistered_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("notifyBuddyRegistered", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddyRegistered", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
