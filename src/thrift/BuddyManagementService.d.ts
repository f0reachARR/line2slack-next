//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./talk_types');
import AccountMigrationCheckType = ttypes.AccountMigrationCheckType
import AccountMigrationPincodeType = ttypes.AccountMigrationPincodeType
import ApplicationType = ttypes.ApplicationType
import AsymmetricKeyAlgorithm = ttypes.AsymmetricKeyAlgorithm
import BeaconNotificationType = ttypes.BeaconNotificationType
import BotType = ttypes.BotType
import BuddyBannerLinkType = ttypes.BuddyBannerLinkType
import BuddyCollectionType = ttypes.BuddyCollectionType
import BuddyOnAirLabel = ttypes.BuddyOnAirLabel
import BuddyOnAirType = ttypes.BuddyOnAirType
import BuddyProfilePopupType = ttypes.BuddyProfilePopupType
import BuddyResultState = ttypes.BuddyResultState
import BuddySearchRequestSource = ttypes.BuddySearchRequestSource
import BuddyStatusBarDisplayType = ttypes.BuddyStatusBarDisplayType
import CarrierCode = ttypes.CarrierCode
import ChannelConfiguration = ttypes.ChannelConfiguration
import ChannelErrorCode = ttypes.ChannelErrorCode
import ChannelPermission = ttypes.ChannelPermission
import ChannelSyncTarget = ttypes.ChannelSyncTarget
import ChannelSyncType = ttypes.ChannelSyncType
import CommitMessageResultCode = ttypes.CommitMessageResultCode
import ContactAttribute = ttypes.ContactAttribute
import ContactCategory = ttypes.ContactCategory
import ContactRelation = ttypes.ContactRelation
import ContactSetting = ttypes.ContactSetting
import ContactStatus = ttypes.ContactStatus
import ContactType = ttypes.ContactType
import ContentType = ttypes.ContentType
import CustomMode = ttypes.CustomMode
import DeviceBooleanStateKey = ttypes.DeviceBooleanStateKey
import DeviceStringStateKey = ttypes.DeviceStringStateKey
import Diff = ttypes.Diff
import EmailConfirmationStatus = ttypes.EmailConfirmationStatus
import EmailConfirmationType = ttypes.EmailConfirmationType
import ErrorCode = ttypes.ErrorCode
import ExtendedProfileAttribute = ttypes.ExtendedProfileAttribute
import FeatureType = ttypes.FeatureType
import FriendRequestDirection = ttypes.FriendRequestDirection
import FriendRequestMethod = ttypes.FriendRequestMethod
import FriendRequestStatus = ttypes.FriendRequestStatus
import GroupAttribute = ttypes.GroupAttribute
import GroupCallMediaType = ttypes.GroupCallMediaType
import GroupPreferenceAttribute = ttypes.GroupPreferenceAttribute
import IdentityProvider = ttypes.IdentityProvider
import LoginResultType = ttypes.LoginResultType
import LoginType = ttypes.LoginType
import MessageRelationType = ttypes.MessageRelationType
import MIDType = ttypes.MIDType
import ModificationType = ttypes.ModificationType
import NotificationItemFetchMode = ttypes.NotificationItemFetchMode
import NotificationStatus = ttypes.NotificationStatus
import NotificationType = ttypes.NotificationType
import OpStatus = ttypes.OpStatus
import OpType = ttypes.OpType
import PaidCallerIdStatus = ttypes.PaidCallerIdStatus
import PaidCallProductType = ttypes.PaidCallProductType
import PaidCallType = ttypes.PaidCallType
import PayloadType = ttypes.PayloadType
import PaymentPgType = ttypes.PaymentPgType
import PaymentType = ttypes.PaymentType
import PersonalInfo = ttypes.PersonalInfo
import PlaceSearchProvider = ttypes.PlaceSearchProvider
import PointErrorCode = ttypes.PointErrorCode
import PrivacyLevelType = ttypes.PrivacyLevelType
import ProductBannerLinkType = ttypes.ProductBannerLinkType
import ProductEventType = ttypes.ProductEventType
import ProfileAttribute = ttypes.ProfileAttribute
import PublicKeychainStatus = ttypes.PublicKeychainStatus
import PublicType = ttypes.PublicType
import RedirectType = ttypes.RedirectType
import RegistrationType = ttypes.RegistrationType
import ReportCategory = ttypes.ReportCategory
import ReservedMessageSessionId = ttypes.ReservedMessageSessionId
import RoomAttribute = ttypes.RoomAttribute
import SecurityCenterSettingsType = ttypes.SecurityCenterSettingsType
import ServiceCode = ttypes.ServiceCode
import SettingsAttribute = ttypes.SettingsAttribute
import SettingsAttributeEx = ttypes.SettingsAttributeEx
import SnsIdType = ttypes.SnsIdType
import SpammerReason = ttypes.SpammerReason
import SpotCategory = ttypes.SpotCategory
import StickerResourceType = ttypes.StickerResourceType
import SuggestDictionaryIncrementStatus = ttypes.SuggestDictionaryIncrementStatus
import SyncActionType = ttypes.SyncActionType
import SyncCategory = ttypes.SyncCategory
import SyncTriggerReason = ttypes.SyncTriggerReason
import TMessageBoxStatus = ttypes.TMessageBoxStatus
import TrackingType = ttypes.TrackingType
import UnregistrationReason = ttypes.UnregistrationReason
import UserAgeType = ttypes.UserAgeType
import UserStatus = ttypes.UserStatus
import VerificationMethod = ttypes.VerificationMethod
import VerificationResult = ttypes.VerificationResult
import WapInvitationType = ttypes.WapInvitationType
import LoginQrCode_ErrorCode = ttypes.LoginQrCode_ErrorCode
import ChannelException = ttypes.ChannelException
import PointException = ttypes.PointException
import ShouldSyncException = ttypes.ShouldSyncException
import TalkException = ttypes.TalkException
import SecondaryQrCodeException = ttypes.SecondaryQrCodeException
import AgeCheckDocomoResult = ttypes.AgeCheckDocomoResult
import AgeCheckRequestResult = ttypes.AgeCheckRequestResult
import AnalyticsInfo = ttypes.AnalyticsInfo
import Announcement = ttypes.Announcement
import ApprovedChannelInfo = ttypes.ApprovedChannelInfo
import ApprovedChannelInfos = ttypes.ApprovedChannelInfos
import AuthQrcode = ttypes.AuthQrcode
import Balance = ttypes.Balance
import BanPage = ttypes.BanPage
import BeaconBackgroundNotification = ttypes.BeaconBackgroundNotification
import BeaconCondition = ttypes.BeaconCondition
import BeaconLayerInfoAndActions = ttypes.BeaconLayerInfoAndActions
import BeaconQueryResponse = ttypes.BeaconQueryResponse
import BeaconTouchActions = ttypes.BeaconTouchActions
import BotUseInfo = ttypes.BotUseInfo
import BuddyBanner = ttypes.BuddyBanner
import BuddyCategoryEntry = ttypes.BuddyCategoryEntry
import BuddyCategoryView = ttypes.BuddyCategoryView
import BuddyChatBar = ttypes.BuddyChatBar
import BuddyChatBarItem = ttypes.BuddyChatBarItem
import BuddyCollection = ttypes.BuddyCollection
import BuddyCollectionEntry = ttypes.BuddyCollectionEntry
import BuddyDetail = ttypes.BuddyDetail
import BuddyList = ttypes.BuddyList
import BuddyMessageRequest = ttypes.BuddyMessageRequest
import BuddyNewsEntry = ttypes.BuddyNewsEntry
import BuddyNewsView = ttypes.BuddyNewsView
import BuddyOnAir = ttypes.BuddyOnAir
import BuddyOnAirUrls = ttypes.BuddyOnAirUrls
import BuddyProfile = ttypes.BuddyProfile
import BuddyProfilePopup = ttypes.BuddyProfilePopup
import BuddyRichMenuChatBarItem = ttypes.BuddyRichMenuChatBarItem
import BuddyRichMenuContents = ttypes.BuddyRichMenuContents
import BuddySearchResult = ttypes.BuddySearchResult
import BuddyStatusBar = ttypes.BuddyStatusBar
import BuddyTopView = ttypes.BuddyTopView
import BuddyWebChatBarItem = ttypes.BuddyWebChatBarItem
import BuddyWidget = ttypes.BuddyWidget
import BuddyWidgetListCharBarItem = ttypes.BuddyWidgetListCharBarItem
import CallHost = ttypes.CallHost
import ChannelDomain = ttypes.ChannelDomain
import ChannelDomains = ttypes.ChannelDomains
import ChannelIdWithLastUpdated = ttypes.ChannelIdWithLastUpdated
import ChannelInfo = ttypes.ChannelInfo
import ChannelInfos = ttypes.ChannelInfos
import ChannelNotificationSetting = ttypes.ChannelNotificationSetting
import ChannelProvider = ttypes.ChannelProvider
import ChannelSettings = ttypes.ChannelSettings
import ChannelSyncDatas = ttypes.ChannelSyncDatas
import ChannelToken = ttypes.ChannelToken
import ClientLastStatus = ttypes.ClientLastStatus
import Coin = ttypes.Coin
import CoinHistory = ttypes.CoinHistory
import CoinHistoryCondition = ttypes.CoinHistoryCondition
import CoinHistoryResult = ttypes.CoinHistoryResult
import CoinPayLoad = ttypes.CoinPayLoad
import CoinProductItem = ttypes.CoinProductItem
import CoinPurchaseConfirm = ttypes.CoinPurchaseConfirm
import CoinPurchaseReservation = ttypes.CoinPurchaseReservation
import CoinUseReservation = ttypes.CoinUseReservation
import CoinUseReservationItem = ttypes.CoinUseReservationItem
import CommitMessageResult = ttypes.CommitMessageResult
import CommitSendMessagesToMidRequest = ttypes.CommitSendMessagesToMidRequest
import CommitSendMessagesToMidResponse = ttypes.CommitSendMessagesToMidResponse
import CompactContact = ttypes.CompactContact
import Configurations = ttypes.Configurations
import Contact = ttypes.Contact
import ContactModification = ttypes.ContactModification
import ContactRegistration = ttypes.ContactRegistration
import ContactReport = ttypes.ContactReport
import ContactReportResult = ttypes.ContactReportResult
import ContactTransition = ttypes.ContactTransition
import DeviceInfo = ttypes.DeviceInfo
import E2EEGroupSharedKey = ttypes.E2EEGroupSharedKey
import E2EEKey = ttypes.E2EEKey
import E2EEKeyChain = ttypes.E2EEKeyChain
import E2EENegotiationResult = ttypes.E2EENegotiationResult
import E2EEPublicKey = ttypes.E2EEPublicKey
import EmailConfirmation = ttypes.EmailConfirmation
import EmailConfirmationResult = ttypes.EmailConfirmationResult
import EmailConfirmationSession = ttypes.EmailConfirmationSession
import ExtendedProfile = ttypes.ExtendedProfile
import ExtendedProfileBirthday = ttypes.ExtendedProfileBirthday
import FriendChannelMatricesResponse = ttypes.FriendChannelMatricesResponse
import FriendChannelMatrix = ttypes.FriendChannelMatrix
import FriendRequest = ttypes.FriendRequest
import FriendRequestsInfo = ttypes.FriendRequestsInfo
import Geolocation = ttypes.Geolocation
import GetBalanceRequest = ttypes.GetBalanceRequest
import GetBalanceResponse = ttypes.GetBalanceResponse
import GetCoinHistoryRequest = ttypes.GetCoinHistoryRequest
import GetCoinHistoryResponse = ttypes.GetCoinHistoryResponse
import GetCoinProductsRequest = ttypes.GetCoinProductsRequest
import GetCoinProductsResponse = ttypes.GetCoinProductsResponse
import GetTotalCoinBalanceRequest = ttypes.GetTotalCoinBalanceRequest
import GetTotalCoinBalanceResponse = ttypes.GetTotalCoinBalanceResponse
import Group = ttypes.Group
import GroupCall = ttypes.GroupCall
import GroupCallRoute = ttypes.GroupCallRoute
import GroupPreference = ttypes.GroupPreference
import IdentityCredential = ttypes.IdentityCredential
import Location = ttypes.Location
import LoginRequest = ttypes.LoginRequest
import LoginResult = ttypes.LoginResult
import LoginSession = ttypes.LoginSession
import Message = ttypes.Message
import MessageBoxV2MessageId = ttypes.MessageBoxV2MessageId
import MessageCommitResult = ttypes.MessageCommitResult
import MessageStoreResult = ttypes.MessageStoreResult
import MetaProfile = ttypes.MetaProfile
import MoretabRecommend = ttypes.MoretabRecommend
import MoretabRecommendAccount = ttypes.MoretabRecommendAccount
import NearbyEntry = ttypes.NearbyEntry
import NotiCenterEventData = ttypes.NotiCenterEventData
import NotificationFetchResult = ttypes.NotificationFetchResult
import NotificationItem = ttypes.NotificationItem
import Operation = ttypes.Operation
import OTPResult = ttypes.OTPResult
import PaidCallAdCountry = ttypes.PaidCallAdCountry
import PaidCallAdResult = ttypes.PaidCallAdResult
import PaidCallBalance = ttypes.PaidCallBalance
import PaidCallCurrencyExchangeRate = ttypes.PaidCallCurrencyExchangeRate
import PaidCallDialing = ttypes.PaidCallDialing
import PaidCallHistory = ttypes.PaidCallHistory
import PaidCallHistoryResult = ttypes.PaidCallHistoryResult
import PaidCallMetadataResult = ttypes.PaidCallMetadataResult
import PaidCallRedeemResult = ttypes.PaidCallRedeemResult
import PaidCallResponse = ttypes.PaidCallResponse
import PaidCallUserRate = ttypes.PaidCallUserRate
import PaymentReservation = ttypes.PaymentReservation
import PaymentReservationResult = ttypes.PaymentReservationResult
import PhoneInfoForChannel = ttypes.PhoneInfoForChannel
import PhoneVerificationResult = ttypes.PhoneVerificationResult
import PlaceSearchInfo = ttypes.PlaceSearchInfo
import PrivateBotMessage = ttypes.PrivateBotMessage
import Product = ttypes.Product
import ProductCategory = ttypes.ProductCategory
import ProductList = ttypes.ProductList
import ProductSimple = ttypes.ProductSimple
import ProductSimpleList = ttypes.ProductSimpleList
import Profile = ttypes.Profile
import ProximityMatchCandidateEntry = ttypes.ProximityMatchCandidateEntry
import ProximityMatchCandidateResult = ttypes.ProximityMatchCandidateResult
import PublicKey = ttypes.PublicKey
import PublicKeychain = ttypes.PublicKeychain
import QueueingPolicy = ttypes.QueueingPolicy
import RegisterWithPhoneNumberResult = ttypes.RegisterWithPhoneNumberResult
import RegisterWithSnsIdResult = ttypes.RegisterWithSnsIdResult
import RequestTokenResponse = ttypes.RequestTokenResponse
import RingbackTone = ttypes.RingbackTone
import Room = ttypes.Room
import RSAKey = ttypes.RSAKey
import SecurityCenterResult = ttypes.SecurityCenterResult
import SendBuddyMessageResult = ttypes.SendBuddyMessageResult
import SendPostbackRequest = ttypes.SendPostbackRequest
import SetBuddyOnAirResult = ttypes.SetBuddyOnAirResult
import Settings = ttypes.Settings
import ShopUpdates = ttypes.ShopUpdates
import SIMInfo = ttypes.SIMInfo
import SimpleChannelClient = ttypes.SimpleChannelClient
import SimpleChannelContact = ttypes.SimpleChannelContact
import SnsFriend = ttypes.SnsFriend
import SnsFriendContactRegistration = ttypes.SnsFriendContactRegistration
import SnsFriendModification = ttypes.SnsFriendModification
import SnsFriends = ttypes.SnsFriends
import SnsIdUserStatus = ttypes.SnsIdUserStatus
import SnsProfile = ttypes.SnsProfile
import SpotItem = ttypes.SpotItem
import SpotNearbyItem = ttypes.SpotNearbyItem
import SpotNearbyResponse = ttypes.SpotNearbyResponse
import SpotPhoneNumberResponse = ttypes.SpotPhoneNumberResponse
import StickerIdRange = ttypes.StickerIdRange
import SuggestDictionary = ttypes.SuggestDictionary
import SuggestDictionaryIncrements = ttypes.SuggestDictionaryIncrements
import SuggestDictionaryRevisions = ttypes.SuggestDictionaryRevisions
import SuggestDictionarySettings = ttypes.SuggestDictionarySettings
import SuggestItemDictionaryIncrement = ttypes.SuggestItemDictionaryIncrement
import SuggestItemDictionaryRevision = ttypes.SuggestItemDictionaryRevision
import SuggestTagDictionaryIncrement = ttypes.SuggestTagDictionaryIncrement
import SuggestTagDictionaryRevision = ttypes.SuggestTagDictionaryRevision
import SyncParamContact = ttypes.SyncParamContact
import SyncParamMid = ttypes.SyncParamMid
import SyncRelations = ttypes.SyncRelations
import SyncScope = ttypes.SyncScope
import SystemConfiguration = ttypes.SystemConfiguration
import Ticket = ttypes.Ticket
import TMessageBox = ttypes.TMessageBox
import TMessageBoxWrapUp = ttypes.TMessageBoxWrapUp
import TMessageBoxWrapUpResponse = ttypes.TMessageBoxWrapUpResponse
import TMessageReadRange = ttypes.TMessageReadRange
import TMessageReadRangeEntry = ttypes.TMessageReadRangeEntry
import UnregisterBuddyResult = ttypes.UnregisterBuddyResult
import UpdateBuddyProfileResult = ttypes.UpdateBuddyProfileResult
import UserAuthStatus = ttypes.UserAuthStatus
import UserTicketResponse = ttypes.UserTicketResponse
import ValidateContactsResult = ttypes.ValidateContactsResult
import VerificationSessionData = ttypes.VerificationSessionData
import WapInvitation = ttypes.WapInvitation
import LoginQrCode_CreateQrSessionResponse = ttypes.LoginQrCode_CreateQrSessionResponse
import LoginQrCode_CreateQrCodeRequest = ttypes.LoginQrCode_CreateQrCodeRequest
import LoginQrCode_CreateQrCodeResponse = ttypes.LoginQrCode_CreateQrCodeResponse
import LoginQrCode_VerifyCertificateRequest = ttypes.LoginQrCode_VerifyCertificateRequest
import LoginQrCode_CreatePinCodeRequest = ttypes.LoginQrCode_CreatePinCodeRequest
import LoginQrCode_CreatePinCodeResponse = ttypes.LoginQrCode_CreatePinCodeResponse
import LoginQrCode_QrCodeLoginRequest = ttypes.LoginQrCode_QrCodeLoginRequest
import LoginQrCode_QrCodeLoginResponse = ttypes.LoginQrCode_QrCodeLoginResponse
import LoginQrCode_CheckQrCodeVerifiedRequest = ttypes.LoginQrCode_CheckQrCodeVerifiedRequest
import LoginQrCode_CheckPinCodeVerifiedRequest = ttypes.LoginQrCode_CheckPinCodeVerifiedRequest

declare class Client {
    private output: thrift.TTransport;
    private pClass: thrift.TProtocol;
    private _seqid: number;

    constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

    unregisterBuddy(requestId: string): Promise<void>;

    unregisterBuddy(requestId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    sendBuddyContentMessageToMidsAsync(requestId: string, msg: Message, content: string, mids: string[]): Promise<string>;

    sendBuddyContentMessageToMidsAsync(requestId: string, msg: Message, content: string, mids: string[], callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getAllBuddyMembers(): Promise<string[]>;

    getAllBuddyMembers(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    getActiveMemberMidsByBuddyMid(buddyMid: string): Promise<string[]>;

    getActiveMemberMidsByBuddyMid(buddyMid: string, callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    updateBuddyProfileAttributes(requestId: string, attributes: { [k: string]: string; }, policy: QueueingPolicy): Promise<UpdateBuddyProfileResult>;

    updateBuddyProfileAttributes(requestId: string, attributes: { [k: string]: string; }, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: UpdateBuddyProfileResult)=>void): void;

    storePrivateMessages(requestId: string, privateBotMessages: PrivateBotMessage[], toMid: string): Promise<MessageStoreResult>;

    storePrivateMessages(requestId: string, privateBotMessages: PrivateBotMessage[], toMid: string, callback?: (error: ttypes.TalkException, response: MessageStoreResult)=>void): void;

    updateBuddyProfileImageAsync(requestId: string, image: string, policy: QueueingPolicy): Promise<string>;

    updateBuddyProfileImageAsync(requestId: string, image: string, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    notifyBuddyBlocked(buddyMid: string, blockerMid: string): Promise<void>;

    notifyBuddyBlocked(buddyMid: string, blockerMid: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getMemberCountByBuddyMid(buddyMid: string): Promise<Int64>;

    getMemberCountByBuddyMid(buddyMid: string, callback?: (error: ttypes.TalkException, response: Int64)=>void): void;

    isBuddyOnAirByMid(buddyMid: string): Promise<boolean>;

    isBuddyOnAirByMid(buddyMid: string, callback?: (error: ttypes.TalkException, response: boolean)=>void): void;

    commitPrivateMessages(requestId: string, privateMessageStoreRequestId: string, policy: QueueingPolicy): Promise<void>;

    commitPrivateMessages(requestId: string, privateMessageStoreRequestId: string, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    commitPublicMessagesToMids(requestId: string, publicMessageStoreRequestId: string, toMids: string[], policy: QueueingPolicy): Promise<void>;

    commitPublicMessagesToMids(requestId: string, publicMessageStoreRequestId: string, toMids: string[], policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    addBuddyMember(requestId: string, userMid: string): Promise<void>;

    addBuddyMember(requestId: string, userMid: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    linkAndSendBuddyContentMessageToMids(requestId: string, msg: Message, sourceContentId: string, mids: string[], usePermanent: boolean): Promise<SendBuddyMessageResult>;

    linkAndSendBuddyContentMessageToMids(requestId: string, msg: Message, sourceContentId: string, mids: string[], usePermanent: boolean, callback?: (error: ttypes.TalkException, response: SendBuddyMessageResult)=>void): void;

    storeMessages(requestIds: string[], messageRequests: BuddyMessageRequest[]): Promise<SendBuddyMessageResult[]>;

    storeMessages(requestIds: string[], messageRequests: BuddyMessageRequest[], callback?: (error: ttypes.TalkException, response: SendBuddyMessageResult[])=>void): void;

    storeMessage(requestId: string, messageRequest: BuddyMessageRequest): Promise<SendBuddyMessageResult>;

    storeMessage(requestId: string, messageRequest: BuddyMessageRequest, callback?: (error: ttypes.TalkException, response: SendBuddyMessageResult)=>void): void;

    registerBuddy(buddyId: string, searchId: string, displayName: string, statusMeessage: string, picture: string, settings: { [k: string]: string; }): Promise<string>;

    registerBuddy(buddyId: string, searchId: string, displayName: string, statusMeessage: string, picture: string, settings: { [k: string]: string; }, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getUnregisterBuddyResult(unregisterBuddyRequestId: string, buddyMid: string): Promise<UnregisterBuddyResult>;

    getUnregisterBuddyResult(unregisterBuddyRequestId: string, buddyMid: string, callback?: (error: ttypes.TalkException, response: UnregisterBuddyResult)=>void): void;

    updateBuddySearchId(requestId: string, searchId: string): Promise<void>;

    updateBuddySearchId(requestId: string, searchId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    uploadBuddyContent(contentType: ContentType, content: string): Promise<string>;

    uploadBuddyContent(contentType: ContentType, content: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    updateBuddyProfileImage(requestId: string, image: string, policy: QueueingPolicy): Promise<UpdateBuddyProfileResult>;

    updateBuddyProfileImage(requestId: string, image: string, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: UpdateBuddyProfileResult)=>void): void;

    sendBuddyMessageToAll(requestId: string, msg: Message): Promise<SendBuddyMessageResult>;

    sendBuddyMessageToAll(requestId: string, msg: Message, callback?: (error: ttypes.TalkException, response: SendBuddyMessageResult)=>void): void;

    commitSendMessagesToAll(requestId: string, commitRequestIdList: string[], priority: number, policy: QueueingPolicy): Promise<SendBuddyMessageResult>;

    commitSendMessagesToAll(requestId: string, commitRequestIdList: string[], priority: number, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: SendBuddyMessageResult)=>void): void;

    downloadMessageContent(requestId: string, messageId: string): Promise<string>;

    downloadMessageContent(requestId: string, messageId: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    updateBuddyProfileRichMenu(requestId: string, policy: QueueingPolicy): Promise<UpdateBuddyProfileResult>;

    updateBuddyProfileRichMenu(requestId: string, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: UpdateBuddyProfileResult)=>void): void;

    setBuddyOnAir(requestId: string, onAir: boolean, label: BuddyOnAirLabel): Promise<SetBuddyOnAirResult>;

    setBuddyOnAir(requestId: string, onAir: boolean, label: BuddyOnAirLabel, callback?: (error: ttypes.TalkException, response: SetBuddyOnAirResult)=>void): void;

    unblockBuddyMember(requestId: string, mid: string): Promise<void>;

    unblockBuddyMember(requestId: string, mid: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    linkAndSendBuddyContentMessageToAll(requestId: string, msg: Message, sourceContentId: string, usePermanent: boolean): Promise<SendBuddyMessageResult>;

    linkAndSendBuddyContentMessageToAll(requestId: string, msg: Message, sourceContentId: string, usePermanent: boolean, callback?: (error: ttypes.TalkException, response: SendBuddyMessageResult)=>void): void;

    removeBuddyMember(requestId: string, userMid: string): Promise<void>;

    removeBuddyMember(requestId: string, userMid: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    commitSendMessagesToMidAsync(requestId: string, storeMessagesRequestIds: string[], policy: QueueingPolicy): Promise<string>;

    commitSendMessagesToMidAsync(requestId: string, storeMessagesRequestIds: string[], policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getUpdateBuddyProfileResult(updateBuddyProfileRequestId: string): Promise<UpdateBuddyProfileResult>;

    getUpdateBuddyProfileResult(updateBuddyProfileRequestId: string, callback?: (error: ttypes.TalkException, response: UpdateBuddyProfileResult)=>void): void;

    notifyBuddyUnblocked(buddyMid: string, blockerMid: string): Promise<void>;

    notifyBuddyUnblocked(buddyMid: string, blockerMid: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    updateBuddyProfileRichMenuAsync(requestId: string, policy: QueueingPolicy): Promise<string>;

    updateBuddyProfileRichMenuAsync(requestId: string, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getBuddyProfile(): Promise<BuddyProfile>;

    getBuddyProfile(callback?: (error: ttypes.TalkException, response: BuddyProfile)=>void): void;

    getBlockedBuddyMembers(): Promise<string[]>;

    getBlockedBuddyMembers(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    commitPublicMessagesToAll(requestId: string, publicMessageStoreRequestId: string, policy: QueueingPolicy): Promise<void>;

    commitPublicMessagesToAll(requestId: string, publicMessageStoreRequestId: string, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    linkAndSendBuddyContentMessageToAllAsync(requestId: string, msg: Message, sourceContentId: string, usePermanent: boolean): Promise<string>;

    linkAndSendBuddyContentMessageToAllAsync(requestId: string, msg: Message, sourceContentId: string, usePermanent: boolean, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    sendBuddyContentMessageToAllAsync(requestId: string, msg: Message, content: string): Promise<string>;

    sendBuddyContentMessageToAllAsync(requestId: string, msg: Message, content: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getSetBuddyOnAirResult(setBuddyOnAirRequestId: string): Promise<SetBuddyOnAirResult>;

    getSetBuddyOnAirResult(setBuddyOnAirRequestId: string, callback?: (error: ttypes.TalkException, response: SetBuddyOnAirResult)=>void): void;

    commitSendMessagesToMidsAsync(requestId: string, commitRequestIdList: string[], mids: string[], priority: number, policy: QueueingPolicy): Promise<string>;

    commitSendMessagesToMidsAsync(requestId: string, commitRequestIdList: string[], mids: string[], priority: number, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    commitSendMessagesToStoredMidsAsync(requestId: string, commitRequestIdList: string[], storedMidFilename: string, priority: number, policy: QueueingPolicy): Promise<string>;

    commitSendMessagesToStoredMidsAsync(requestId: string, commitRequestIdList: string[], storedMidFilename: string, priority: number, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    updateBuddyAdminProfileAttribute(requestId: string, attributes: { [k: string]: string; }): Promise<void>;

    updateBuddyAdminProfileAttribute(requestId: string, attributes: { [k: string]: string; }, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    setBuddyOnAirAsync(requestId: string, onAir: boolean, label: BuddyOnAirLabel): Promise<string>;

    setBuddyOnAirAsync(requestId: string, onAir: boolean, label: BuddyOnAirLabel, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    commitSendMessagesToMids(requestId: string, commitRequestIdList: string[], mids: string[], priority: number, policy: QueueingPolicy): Promise<SendBuddyMessageResult>;

    commitSendMessagesToMids(requestId: string, commitRequestIdList: string[], mids: string[], priority: number, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: SendBuddyMessageResult)=>void): void;

    sendBuddyContentMessageToAll(requestId: string, msg: Message, content: string): Promise<SendBuddyMessageResult>;

    sendBuddyContentMessageToAll(requestId: string, msg: Message, content: string, callback?: (error: ttypes.TalkException, response: SendBuddyMessageResult)=>void): void;

    updateBuddySettings(settings: { [k: string]: string; }): Promise<void>;

    updateBuddySettings(settings: { [k: string]: string; }, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    notifyBuddySubscribed(buddyMid: string, subscriberMid: string): Promise<void>;

    notifyBuddySubscribed(buddyMid: string, subscriberMid: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    registerBuddyAdmin(buddyId: string, searchId: string, displayName: string, statusMessage: string, picture: string): Promise<string>;

    registerBuddyAdmin(buddyId: string, searchId: string, displayName: string, statusMessage: string, picture: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getBlockerCountByBuddyMid(buddyMid: string): Promise<Int64>;

    getBlockerCountByBuddyMid(buddyMid: string, callback?: (error: ttypes.TalkException, response: Int64)=>void): void;

    reissueContactTicket(expirationTime: Int64, maxUseCount: number): Promise<string>;

    reissueContactTicket(expirationTime: Int64, maxUseCount: number, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    validateContacts(userMids: string[]): Promise<ValidateContactsResult>;

    validateContacts(userMids: string[], callback?: (error: ttypes.TalkException, response: ValidateContactsResult)=>void): void;

    sendBuddyMessageToMidsAsync(requestId: string, msg: Message, mids: string[]): Promise<string>;

    sendBuddyMessageToMidsAsync(requestId: string, msg: Message, mids: string[], callback?: (error: ttypes.TalkException, response: string)=>void): void;

    unregisterBuddyAsync(requestId: string): Promise<void>;

    unregisterBuddyAsync(requestId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getProfileImageUrlHash(requestId: string): Promise<string>;

    getProfileImageUrlHash(requestId: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    blockBuddyMember(requestId: string, mid: string): Promise<void>;

    blockBuddyMember(requestId: string, mid: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    sendIndividualEventToAllAsync(requestId: string, buddyMid: string, notificationStatus: NotificationStatus): Promise<void>;

    sendIndividualEventToAllAsync(requestId: string, buddyMid: string, notificationStatus: NotificationStatus, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    sendChatCheckedByWatermark(seq: number, mid: string, watermark: Int64, sessionId: any): Promise<void>;

    sendChatCheckedByWatermark(seq: number, mid: string, watermark: Int64, sessionId: any, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    deleteBotProfileImage(requestId: string): Promise<void>;

    deleteBotProfileImage(requestId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    sendBuddyContentMessageToMids(requestId: string, msg: Message, content: string, mids: string[]): Promise<SendBuddyMessageResult>;

    sendBuddyContentMessageToMids(requestId: string, msg: Message, content: string, mids: string[], callback?: (error: ttypes.TalkException, response: SendBuddyMessageResult)=>void): void;

    unregisterBuddyAdmin(requestId: string): Promise<void>;

    unregisterBuddyAdmin(requestId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    commitPublicMessagesToStoredMids(requestId: string, publicMessageStoreRequestId: string, storedMidFilename: string, policy: QueueingPolicy): Promise<void>;

    commitPublicMessagesToStoredMids(requestId: string, publicMessageStoreRequestId: string, storedMidFilename: string, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    removeBuddyMembers(requestId: string, userMids: string[]): Promise<void>;

    removeBuddyMembers(requestId: string, userMids: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    storePublicMessages(requestId: string, messages: Message[]): Promise<MessageStoreResult>;

    storePublicMessages(requestId: string, messages: Message[], callback?: (error: ttypes.TalkException, response: MessageStoreResult)=>void): void;

    addBuddyMembers(requestId: string, userMids: string[]): Promise<void>;

    addBuddyMembers(requestId: string, userMids: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getMessageCommitResult(messageCommitRequestId: string): Promise<MessageCommitResult>;

    getMessageCommitResult(messageCommitRequestId: string, callback?: (error: ttypes.TalkException, response: MessageCommitResult)=>void): void;

    getBuddyDetailByMid(buddyMid: string): Promise<BuddyDetail>;

    getBuddyDetailByMid(buddyMid: string, callback?: (error: ttypes.TalkException, response: BuddyDetail)=>void): void;

    notifyBuddySubscriberUnregistered(buddyMid: string, userMid: string): Promise<void>;

    notifyBuddySubscriberUnregistered(buddyMid: string, userMid: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    sendBuddyMessageToAllAsync(requestId: string, msg: Message): Promise<string>;

    sendBuddyMessageToAllAsync(requestId: string, msg: Message, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    sendBuddyMessageToMids(requestId: string, msg: Message, mids: string[]): Promise<SendBuddyMessageResult>;

    sendBuddyMessageToMids(requestId: string, msg: Message, mids: string[], callback?: (error: ttypes.TalkException, response: SendBuddyMessageResult)=>void): void;

    getBuddyProfilePopup(buddyMid: string, lang: string): Promise<BuddyProfilePopup>;

    getBuddyProfilePopup(buddyMid: string, lang: string, callback?: (error: ttypes.TalkException, response: BuddyProfilePopup)=>void): void;

    commitSendMessagesToAllAsync(requestId: string, commitRequestIdList: string[], priority: number, policy: QueueingPolicy): Promise<string>;

    commitSendMessagesToAllAsync(requestId: string, commitRequestIdList: string[], priority: number, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    notifyBuddySubscriberEmpty(buddyMid: string, userMid: string): Promise<void>;

    notifyBuddySubscriberEmpty(buddyMid: string, userMid: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    updateBuddyAdminProfileImage(requestId: string, picture: string): Promise<void>;

    updateBuddyAdminProfileImage(requestId: string, picture: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    updateBuddyProfileAttributesAsync(requestId: string, attributes: { [k: string]: string; }, policy: QueueingPolicy): Promise<string>;

    updateBuddyProfileAttributesAsync(requestId: string, attributes: { [k: string]: string; }, policy: QueueingPolicy, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    linkAndSendBuddyContentMessageToMidsAsync(requestId: string, msg: Message, sourceContentId: string, mids: string[], usePermanent: boolean): Promise<string>;

    linkAndSendBuddyContentMessageToMidsAsync(requestId: string, msg: Message, sourceContentId: string, mids: string[], usePermanent: boolean, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    downloadProfileImagePreview(requestId: string): Promise<string>;

    downloadProfileImagePreview(requestId: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    downloadProfileImage(requestId: string): Promise<string>;

    downloadProfileImage(requestId: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getSendBuddyMessageResult(sendBuddyMessageRequestId: string): Promise<SendBuddyMessageResult>;

    getSendBuddyMessageResult(sendBuddyMessageRequestId: string, callback?: (error: ttypes.TalkException, response: SendBuddyMessageResult)=>void): void;

    containsBuddyMember(requestId: string, userMid: string): Promise<boolean>;

    containsBuddyMember(requestId: string, userMid: string, callback?: (error: ttypes.TalkException, response: boolean)=>void): void;

    getActiveMemberCountByBuddyMid(buddyMid: string): Promise<Int64>;

    getActiveMemberCountByBuddyMid(buddyMid: string, callback?: (error: ttypes.TalkException, response: Int64)=>void): void;

    downloadMessageContentPreview(requestId: string, messageId: string): Promise<string>;

    downloadMessageContentPreview(requestId: string, messageId: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    notifyBuddyRegistered(buddyId: string, buddyMid: string, searchId: string, displayName: string, statusMessage: string, settings: { [k: string]: string; }): Promise<void>;

    notifyBuddyRegistered(buddyId: string, buddyMid: string, searchId: string, displayName: string, statusMessage: string, settings: { [k: string]: string; }, callback?: (error: ttypes.TalkException, response: void)=>void): void;
  }

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_unregisterBuddy(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendBuddyContentMessageToMidsAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getAllBuddyMembers(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getActiveMemberMidsByBuddyMid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateBuddyProfileAttributes(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_storePrivateMessages(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateBuddyProfileImageAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifyBuddyBlocked(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMemberCountByBuddyMid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_isBuddyOnAirByMid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitPrivateMessages(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitPublicMessagesToMids(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_addBuddyMember(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_linkAndSendBuddyContentMessageToMids(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_storeMessages(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_storeMessage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerBuddy(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getUnregisterBuddyResult(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateBuddySearchId(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_uploadBuddyContent(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateBuddyProfileImage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendBuddyMessageToAll(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitSendMessagesToAll(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_downloadMessageContent(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateBuddyProfileRichMenu(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_setBuddyOnAir(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_unblockBuddyMember(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_linkAndSendBuddyContentMessageToAll(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_removeBuddyMember(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitSendMessagesToMidAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getUpdateBuddyProfileResult(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifyBuddyUnblocked(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateBuddyProfileRichMenuAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getBuddyProfile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getBlockedBuddyMembers(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitPublicMessagesToAll(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_linkAndSendBuddyContentMessageToAllAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendBuddyContentMessageToAllAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getSetBuddyOnAirResult(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitSendMessagesToMidsAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitSendMessagesToStoredMidsAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateBuddyAdminProfileAttribute(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_setBuddyOnAirAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitSendMessagesToMids(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendBuddyContentMessageToAll(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateBuddySettings(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifyBuddySubscribed(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerBuddyAdmin(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getBlockerCountByBuddyMid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reissueContactTicket(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_validateContacts(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendBuddyMessageToMidsAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_unregisterBuddyAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getProfileImageUrlHash(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_blockBuddyMember(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendIndividualEventToAllAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendChatCheckedByWatermark(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_deleteBotProfileImage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendBuddyContentMessageToMids(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_unregisterBuddyAdmin(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitPublicMessagesToStoredMids(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_removeBuddyMembers(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_storePublicMessages(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_addBuddyMembers(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageCommitResult(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getBuddyDetailByMid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifyBuddySubscriberUnregistered(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendBuddyMessageToAllAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendBuddyMessageToMids(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getBuddyProfilePopup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitSendMessagesToAllAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifyBuddySubscriberEmpty(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateBuddyAdminProfileImage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateBuddyProfileAttributesAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_linkAndSendBuddyContentMessageToMidsAsync(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_downloadProfileImagePreview(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_downloadProfileImage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getSendBuddyMessageResult(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_containsBuddyMember(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getActiveMemberCountByBuddyMid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_downloadMessageContentPreview(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifyBuddyRegistered(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
