//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = module.exports = {};
ttypes.AccountMigrationCheckType = {
  '0' : 'SKIP',
  'SKIP' : 0,
  '1' : 'PINCODE',
  'PINCODE' : 1,
  '2' : 'SECURITY_CENTER',
  'SECURITY_CENTER' : 2
};
ttypes.AccountMigrationPincodeType = {
  '0' : 'NOT_APPLICABLE',
  'NOT_APPLICABLE' : 0,
  '1' : 'NOT_SET',
  'NOT_SET' : 1,
  '2' : 'SET',
  'SET' : 2,
  '3' : 'NEED_ENFORCED_INPUT',
  'NEED_ENFORCED_INPUT' : 3
};
ttypes.ApplicationType = {
  '16' : 'IOS',
  'IOS' : 16,
  '17' : 'IOS_RC',
  'IOS_RC' : 17,
  '18' : 'IOS_BETA',
  'IOS_BETA' : 18,
  '19' : 'IOS_ALPHA',
  'IOS_ALPHA' : 19,
  '32' : 'ANDROID',
  'ANDROID' : 32,
  '33' : 'ANDROID_RC',
  'ANDROID_RC' : 33,
  '34' : 'ANDROID_BETA',
  'ANDROID_BETA' : 34,
  '35' : 'ANDROID_ALPHA',
  'ANDROID_ALPHA' : 35,
  '48' : 'WAP',
  'WAP' : 48,
  '49' : 'WAP_RC',
  'WAP_RC' : 49,
  '50' : 'WAP_BETA',
  'WAP_BETA' : 50,
  '51' : 'WAP_ALPHA',
  'WAP_ALPHA' : 51,
  '64' : 'BOT',
  'BOT' : 64,
  '65' : 'BOT_RC',
  'BOT_RC' : 65,
  '66' : 'BOT_BETA',
  'BOT_BETA' : 66,
  '67' : 'BOT_ALPHA',
  'BOT_ALPHA' : 67,
  '80' : 'WEB',
  'WEB' : 80,
  '81' : 'WEB_RC',
  'WEB_RC' : 81,
  '82' : 'WEB_BETA',
  'WEB_BETA' : 82,
  '83' : 'WEB_ALPHA',
  'WEB_ALPHA' : 83,
  '96' : 'DESKTOPWIN',
  'DESKTOPWIN' : 96,
  '97' : 'DESKTOPWIN_RC',
  'DESKTOPWIN_RC' : 97,
  '98' : 'DESKTOPWIN_BETA',
  'DESKTOPWIN_BETA' : 98,
  '99' : 'DESKTOPWIN_ALPHA',
  'DESKTOPWIN_ALPHA' : 99,
  '112' : 'DESKTOPMAC',
  'DESKTOPMAC' : 112,
  '113' : 'DESKTOPMAC_RC',
  'DESKTOPMAC_RC' : 113,
  '114' : 'DESKTOPMAC_BETA',
  'DESKTOPMAC_BETA' : 114,
  '115' : 'DESKTOPMAC_ALPHA',
  'DESKTOPMAC_ALPHA' : 115,
  '128' : 'CHANNELGW',
  'CHANNELGW' : 128,
  '129' : 'CHANNELGW_RC',
  'CHANNELGW_RC' : 129,
  '130' : 'CHANNELGW_BETA',
  'CHANNELGW_BETA' : 130,
  '131' : 'CHANNELGW_ALPHA',
  'CHANNELGW_ALPHA' : 131,
  '144' : 'CHANNELCP',
  'CHANNELCP' : 144,
  '145' : 'CHANNELCP_RC',
  'CHANNELCP_RC' : 145,
  '146' : 'CHANNELCP_BETA',
  'CHANNELCP_BETA' : 146,
  '147' : 'CHANNELCP_ALPHA',
  'CHANNELCP_ALPHA' : 147,
  '160' : 'WINPHONE',
  'WINPHONE' : 160,
  '161' : 'WINPHONE_RC',
  'WINPHONE_RC' : 161,
  '162' : 'WINPHONE_BETA',
  'WINPHONE_BETA' : 162,
  '163' : 'WINPHONE_ALPHA',
  'WINPHONE_ALPHA' : 163,
  '176' : 'BLACKBERRY',
  'BLACKBERRY' : 176,
  '177' : 'BLACKBERRY_RC',
  'BLACKBERRY_RC' : 177,
  '178' : 'BLACKBERRY_BETA',
  'BLACKBERRY_BETA' : 178,
  '179' : 'BLACKBERRY_ALPHA',
  'BLACKBERRY_ALPHA' : 179,
  '192' : 'WINMETRO',
  'WINMETRO' : 192,
  '193' : 'WINMETRO_RC',
  'WINMETRO_RC' : 193,
  '194' : 'WINMETRO_BETA',
  'WINMETRO_BETA' : 194,
  '195' : 'WINMETRO_ALPHA',
  'WINMETRO_ALPHA' : 195,
  '208' : 'S40',
  'S40' : 208,
  '209' : 'S40_RC',
  'S40_RC' : 209,
  '210' : 'S40_BETA',
  'S40_BETA' : 210,
  '211' : 'S40_ALPHA',
  'S40_ALPHA' : 211,
  '224' : 'CHRONO',
  'CHRONO' : 224,
  '225' : 'CHRONO_RC',
  'CHRONO_RC' : 225,
  '226' : 'CHRONO_BETA',
  'CHRONO_BETA' : 226,
  '227' : 'CHRONO_ALPHA',
  'CHRONO_ALPHA' : 227,
  '256' : 'TIZEN',
  'TIZEN' : 256,
  '257' : 'TIZEN_RC',
  'TIZEN_RC' : 257,
  '258' : 'TIZEN_BETA',
  'TIZEN_BETA' : 258,
  '259' : 'TIZEN_ALPHA',
  'TIZEN_ALPHA' : 259,
  '272' : 'VIRTUAL',
  'VIRTUAL' : 272,
  '288' : 'FIREFOXOS',
  'FIREFOXOS' : 288,
  '289' : 'FIREFOXOS_RC',
  'FIREFOXOS_RC' : 289,
  '290' : 'FIREFOXOS_BETA',
  'FIREFOXOS_BETA' : 290,
  '291' : 'FIREFOXOS_ALPHA',
  'FIREFOXOS_ALPHA' : 291,
  '304' : 'IOSIPAD',
  'IOSIPAD' : 304,
  '305' : 'IOSIPAD_RC',
  'IOSIPAD_RC' : 305,
  '306' : 'IOSIPAD_BETA',
  'IOSIPAD_BETA' : 306,
  '307' : 'IOSIPAD_ALPHA',
  'IOSIPAD_ALPHA' : 307,
  '320' : 'BIZIOS',
  'BIZIOS' : 320,
  '321' : 'BIZIOS_RC',
  'BIZIOS_RC' : 321,
  '322' : 'BIZIOS_BETA',
  'BIZIOS_BETA' : 322,
  '323' : 'BIZIOS_ALPHA',
  'BIZIOS_ALPHA' : 323,
  '336' : 'BIZANDROID',
  'BIZANDROID' : 336,
  '337' : 'BIZANDROID_RC',
  'BIZANDROID_RC' : 337,
  '338' : 'BIZANDROID_BETA',
  'BIZANDROID_BETA' : 338,
  '339' : 'BIZANDROID_ALPHA',
  'BIZANDROID_ALPHA' : 339,
  '352' : 'BIZBOT',
  'BIZBOT' : 352,
  '353' : 'BIZBOT_RC',
  'BIZBOT_RC' : 353,
  '354' : 'BIZBOT_BETA',
  'BIZBOT_BETA' : 354,
  '355' : 'BIZBOT_ALPHA',
  'BIZBOT_ALPHA' : 355,
  '368' : 'CHROMEOS',
  'CHROMEOS' : 368,
  '369' : 'CHROMEOS_RC',
  'CHROMEOS_RC' : 369,
  '370' : 'CHROMEOS_BETA',
  'CHROMEOS_BETA' : 370,
  '371' : 'CHROMEOS_ALPHA',
  'CHROMEOS_ALPHA' : 371,
  '384' : 'ANDROIDLITE',
  'ANDROIDLITE' : 384,
  '385' : 'ANDROIDLITE_RC',
  'ANDROIDLITE_RC' : 385,
  '386' : 'ANDROIDLITE_BETA',
  'ANDROIDLITE_BETA' : 386,
  '387' : 'ANDROIDLITE_ALPHA',
  'ANDROIDLITE_ALPHA' : 387,
  '400' : 'WIN10',
  'WIN10' : 400,
  '401' : 'WIN10_RC',
  'WIN10_RC' : 401,
  '402' : 'WIN10_BETA',
  'WIN10_BETA' : 402,
  '403' : 'WIN10_ALPHA',
  'WIN10_ALPHA' : 403,
  '416' : 'BIZWEB',
  'BIZWEB' : 416,
  '417' : 'BIZWEB_RC',
  'BIZWEB_RC' : 417,
  '418' : 'BIZWEB_BETA',
  'BIZWEB_BETA' : 418,
  '419' : 'BIZWEB_ALPHA',
  'BIZWEB_ALPHA' : 419,
  '432' : 'DUMMYPRIMARY',
  'DUMMYPRIMARY' : 432,
  '433' : 'DUMMYPRIMARY_RC',
  'DUMMYPRIMARY_RC' : 433,
  '434' : 'DUMMYPRIMARY_BETA',
  'DUMMYPRIMARY_BETA' : 434,
  '435' : 'DUMMYPRIMARY_ALPHA',
  'DUMMYPRIMARY_ALPHA' : 435,
  '448' : 'SQUARE',
  'SQUARE' : 448,
  '449' : 'SQUARE_RC',
  'SQUARE_RC' : 449,
  '450' : 'SQUARE_BETA',
  'SQUARE_BETA' : 450,
  '451' : 'SQUARE_ALPHA',
  'SQUARE_ALPHA' : 451,
  '464' : 'INTERNAL',
  'INTERNAL' : 464,
  '465' : 'INTERNAL_RC',
  'INTERNAL_RC' : 465,
  '466' : 'INTERNAL_BETA',
  'INTERNAL_BETA' : 466,
  '467' : 'INTERNAL_ALPHA',
  'INTERNAL_ALPHA' : 467
};
ttypes.AsymmetricKeyAlgorithm = {
  '1' : 'ASYMMETRIC_KEY_ALGORITHM_RSA',
  'ASYMMETRIC_KEY_ALGORITHM_RSA' : 1,
  '2' : 'ASYMMETRIC_KEY_ALGORITHM_ECDH',
  'ASYMMETRIC_KEY_ALGORITHM_ECDH' : 2
};
ttypes.BeaconNotificationType = {
  '1' : 'BUTTON',
  'BUTTON' : 1,
  '2' : 'ENTRY_SELECTED',
  'ENTRY_SELECTED' : 2,
  '3' : 'BROADCAST_ENTER',
  'BROADCAST_ENTER' : 3,
  '4' : 'BROADCAST_LEAVE',
  'BROADCAST_LEAVE' : 4
};
ttypes.BotType = {
  '0' : 'RESERVED',
  'RESERVED' : 0,
  '1' : 'OFFICIAL',
  'OFFICIAL' : 1,
  '2' : 'LINE_AT_0',
  'LINE_AT_0' : 2,
  '3' : 'LINE_AT',
  'LINE_AT' : 3
};
ttypes.BuddyBannerLinkType = {
  '0' : 'BUDDY_BANNER_LINK_HIDDEN',
  'BUDDY_BANNER_LINK_HIDDEN' : 0,
  '1' : 'BUDDY_BANNER_LINK_MID',
  'BUDDY_BANNER_LINK_MID' : 1,
  '2' : 'BUDDY_BANNER_LINK_URL',
  'BUDDY_BANNER_LINK_URL' : 2
};
ttypes.BuddyCollectionType = {
  '0' : 'NORMAL',
  'NORMAL' : 0,
  '1' : 'NEW',
  'NEW' : 1,
  '2' : 'ONAIR',
  'ONAIR' : 2,
  '3' : 'POPULAR',
  'POPULAR' : 3
};
ttypes.BuddyOnAirLabel = {
  '0' : 'ON_AIR',
  'ON_AIR' : 0,
  '1' : 'LIVE',
  'LIVE' : 1
};
ttypes.BuddyOnAirType = {
  '0' : 'NORMAL',
  'NORMAL' : 0,
  '1' : 'VIDEOCAM',
  'VIDEOCAM' : 1,
  '2' : 'VOIP',
  'VOIP' : 2,
  '3' : 'RECORD',
  'RECORD' : 3
};
ttypes.BuddyProfilePopupType = {
  '0' : 'NONE',
  'NONE' : 0,
  '1' : 'WEB',
  'WEB' : 1
};
ttypes.BuddyResultState = {
  '1' : 'ACCEPTED',
  'ACCEPTED' : 1,
  '2' : 'SUCCEEDED',
  'SUCCEEDED' : 2,
  '3' : 'FAILED',
  'FAILED' : 3,
  '4' : 'CANCELLED',
  'CANCELLED' : 4,
  '5' : 'NOTIFY_FAILED',
  'NOTIFY_FAILED' : 5,
  '11' : 'STORING',
  'STORING' : 11,
  '21' : 'UPLOADING',
  'UPLOADING' : 21,
  '31' : 'NOTIFYING',
  'NOTIFYING' : 31,
  '41' : 'REMOVING_SUBSCRIPTION',
  'REMOVING_SUBSCRIPTION' : 41,
  '42' : 'UNREGISTERING_ACCOUNT',
  'UNREGISTERING_ACCOUNT' : 42,
  '43' : 'NOTIFYING_LEAVE_CHAT',
  'NOTIFYING_LEAVE_CHAT' : 43
};
ttypes.BuddySearchRequestSource = {
  '0' : 'NA',
  'NA' : 0,
  '1' : 'FRIEND_VIEW',
  'FRIEND_VIEW' : 1,
  '2' : 'OFFICIAL_ACCOUNT_VIEW',
  'OFFICIAL_ACCOUNT_VIEW' : 2
};
ttypes.BuddyStatusBarDisplayType = {
  '0' : 'NOT_A_FRIEND',
  'NOT_A_FRIEND' : 0,
  '1' : 'ALWAYS',
  'ALWAYS' : 1
};
ttypes.CarrierCode = {
  '0' : 'NOT_SPECIFIED',
  'NOT_SPECIFIED' : 0,
  '1' : 'JP_DOCOMO',
  'JP_DOCOMO' : 1,
  '2' : 'JP_AU',
  'JP_AU' : 2,
  '3' : 'JP_SOFTBANK',
  'JP_SOFTBANK' : 3,
  '17' : 'KR_SKT',
  'KR_SKT' : 17,
  '18' : 'KR_KT',
  'KR_KT' : 18,
  '19' : 'KR_LGT',
  'KR_LGT' : 19,
  '4' : 'JP_DOCOMO_LINE',
  'JP_DOCOMO_LINE' : 4
};
ttypes.ChannelConfiguration = {
  '0' : 'MESSAGE',
  'MESSAGE' : 0,
  '1' : 'MESSAGE_NOTIFICATION',
  'MESSAGE_NOTIFICATION' : 1,
  '2' : 'NOTIFICATION_CENTER',
  'NOTIFICATION_CENTER' : 2
};
ttypes.ChannelErrorCode = {
  '0' : 'ILLEGAL_ARGUMENT',
  'ILLEGAL_ARGUMENT' : 0,
  '1' : 'INTERNAL_ERROR',
  'INTERNAL_ERROR' : 1,
  '2' : 'CONNECTION_ERROR',
  'CONNECTION_ERROR' : 2,
  '3' : 'AUTHENTICATIONI_FAILED',
  'AUTHENTICATIONI_FAILED' : 3,
  '4' : 'NEED_PERMISSION_APPROVAL',
  'NEED_PERMISSION_APPROVAL' : 4,
  '5' : 'COIN_NOT_USABLE',
  'COIN_NOT_USABLE' : 5,
  '6' : 'WEBVIEW_NOT_ALLOWED',
  'WEBVIEW_NOT_ALLOWED' : 6
};
ttypes.ChannelPermission = {
  '0' : 'PROFILE',
  'PROFILE' : 0,
  '1' : 'FRIENDS',
  'FRIENDS' : 1,
  '2' : 'GROUP',
  'GROUP' : 2
};
ttypes.ChannelSyncTarget = {
  '255' : 'ALL',
  'ALL' : 255,
  '1' : 'CHANNEL_INFO',
  'CHANNEL_INFO' : 1,
  '2' : 'CHANNEL_TOKEN',
  'CHANNEL_TOKEN' : 2,
  '4' : 'COMMON_DOMAIN',
  'COMMON_DOMAIN' : 4
};
ttypes.ChannelSyncType = {
  '0' : 'SYNC',
  'SYNC' : 0,
  '1' : 'REMOVE',
  'REMOVE' : 1,
  '2' : 'REMOVE_ALL',
  'REMOVE_ALL' : 2
};
ttypes.CommitMessageResultCode = {
  '0' : 'DELIVERED',
  'DELIVERED' : 0,
  '1' : 'DELIVERY_SKIPPED',
  'DELIVERY_SKIPPED' : 1,
  '2' : 'DELIVERY_RESTRICTED',
  'DELIVERY_RESTRICTED' : 2
};
ttypes.ContactAttribute = {
  '1' : 'CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL',
  'CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL' : 1,
  '2' : 'CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL',
  'CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL' : 2,
  '16' : 'CONTACT_ATTRIBUTE_CAPABLE_MY_HOME',
  'CONTACT_ATTRIBUTE_CAPABLE_MY_HOME' : 16,
  '32' : 'CONTACT_ATTRIBUTE_CAPABLE_BUDDY',
  'CONTACT_ATTRIBUTE_CAPABLE_BUDDY' : 32
};
ttypes.ContactCategory = {
  '0' : 'NORMAL',
  'NORMAL' : 0,
  '1' : 'RECOMMEND',
  'RECOMMEND' : 1,
  '2' : 'BLOCKED',
  'BLOCKED' : 2
};
ttypes.ContactRelation = {
  '0' : 'ONEWAY',
  'ONEWAY' : 0,
  '1' : 'BOTH',
  'BOTH' : 1,
  '2' : 'NOT_REGISTERED',
  'NOT_REGISTERED' : 2
};
ttypes.ContactSetting = {
  '1' : 'CONTACT_SETTING_NOTIFICATION_DISABLE',
  'CONTACT_SETTING_NOTIFICATION_DISABLE' : 1,
  '2' : 'CONTACT_SETTING_DISPLAY_NAME_OVERRIDE',
  'CONTACT_SETTING_DISPLAY_NAME_OVERRIDE' : 2,
  '4' : 'CONTACT_SETTING_CONTACT_HIDE',
  'CONTACT_SETTING_CONTACT_HIDE' : 4,
  '8' : 'CONTACT_SETTING_FAVORITE',
  'CONTACT_SETTING_FAVORITE' : 8,
  '16' : 'CONTACT_SETTING_DELETE',
  'CONTACT_SETTING_DELETE' : 16
};
ttypes.ContactStatus = {
  '0' : 'UNSPECIFIED',
  'UNSPECIFIED' : 0,
  '1' : 'FRIEND',
  'FRIEND' : 1,
  '2' : 'FRIEND_BLOCKED',
  'FRIEND_BLOCKED' : 2,
  '3' : 'RECOMMEND',
  'RECOMMEND' : 3,
  '4' : 'RECOMMEND_BLOCKED',
  'RECOMMEND_BLOCKED' : 4,
  '5' : 'DELETED',
  'DELETED' : 5,
  '6' : 'DELETED_BLOCKED',
  'DELETED_BLOCKED' : 6
};
ttypes.ContactType = {
  '0' : 'MID',
  'MID' : 0,
  '1' : 'PHONE',
  'PHONE' : 1,
  '2' : 'EMAIL',
  'EMAIL' : 2,
  '3' : 'USERID',
  'USERID' : 3,
  '4' : 'PROXIMITY',
  'PROXIMITY' : 4,
  '5' : 'GROUP',
  'GROUP' : 5,
  '6' : 'USER',
  'USER' : 6,
  '7' : 'QRCODE',
  'QRCODE' : 7,
  '8' : 'PROMOTION_BOT',
  'PROMOTION_BOT' : 8,
  '9' : 'CONTACT_MESSAGE',
  'CONTACT_MESSAGE' : 9,
  '10' : 'FRIEND_REQUEST',
  'FRIEND_REQUEST' : 10,
  '128' : 'REPAIR',
  'REPAIR' : 128,
  '2305' : 'FACEBOOK',
  'FACEBOOK' : 2305,
  '2306' : 'SINA',
  'SINA' : 2306,
  '2307' : 'RENREN',
  'RENREN' : 2307,
  '2308' : 'FEIXIN',
  'FEIXIN' : 2308,
  '2309' : 'BBM',
  'BBM' : 2309,
  '11' : 'BEACON',
  'BEACON' : 11
};
ttypes.ContentType = {
  '0' : 'NONE',
  'NONE' : 0,
  '1' : 'IMAGE',
  'IMAGE' : 1,
  '2' : 'VIDEO',
  'VIDEO' : 2,
  '3' : 'AUDIO',
  'AUDIO' : 3,
  '4' : 'HTML',
  'HTML' : 4,
  '5' : 'PDF',
  'PDF' : 5,
  '6' : 'CALL',
  'CALL' : 6,
  '7' : 'STICKER',
  'STICKER' : 7,
  '8' : 'PRESENCE',
  'PRESENCE' : 8,
  '9' : 'GIFT',
  'GIFT' : 9,
  '10' : 'GROUPBOARD',
  'GROUPBOARD' : 10,
  '11' : 'APPLINK',
  'APPLINK' : 11,
  '12' : 'LINK',
  'LINK' : 12,
  '13' : 'CONTACT',
  'CONTACT' : 13,
  '14' : 'FILE',
  'FILE' : 14,
  '15' : 'LOCATION',
  'LOCATION' : 15,
  '16' : 'POSTNOTIFICATION',
  'POSTNOTIFICATION' : 16,
  '17' : 'RICH',
  'RICH' : 17,
  '18' : 'CHATEVENT',
  'CHATEVENT' : 18,
  '19' : 'MUSIC',
  'MUSIC' : 19,
  '20' : 'PAYMENT',
  'PAYMENT' : 20,
  '21' : 'EXTIMAGE',
  'EXTIMAGE' : 21
};
ttypes.CustomMode = {
  '1' : 'PROMOTION_FRIENDS_INVITE',
  'PROMOTION_FRIENDS_INVITE' : 1,
  '2' : 'CAPABILITY_SERVER_SIDE_SMS',
  'CAPABILITY_SERVER_SIDE_SMS' : 2,
  '3' : 'LINE_CLIENT_ANALYTICS_CONFIGURATION',
  'LINE_CLIENT_ANALYTICS_CONFIGURATION' : 3
};
ttypes.DeviceBooleanStateKey = {
  '1' : 'BEACON_AGREEMENT',
  'BEACON_AGREEMENT' : 1,
  '2' : 'BLUETOOTH',
  'BLUETOOTH' : 2
};
ttypes.DeviceStringStateKey = {
  '1' : 'LOCATION_OS',
  'LOCATION_OS' : 1,
  '2' : 'LOCATION_APP',
  'LOCATION_APP' : 2
};
ttypes.Diff = {
  '0' : 'ADDED',
  'ADDED' : 0,
  '1' : 'UPDATED',
  'UPDATED' : 1,
  '2' : 'REMOVED',
  'REMOVED' : 2
};
ttypes.EmailConfirmationStatus = {
  '0' : 'NOT_SPECIFIED',
  'NOT_SPECIFIED' : 0,
  '1' : 'NOT_YET',
  'NOT_YET' : 1,
  '3' : 'DONE',
  'DONE' : 3,
  '4' : 'NEED_ENFORCED_INPUT',
  'NEED_ENFORCED_INPUT' : 4
};
ttypes.EmailConfirmationType = {
  '0' : 'SERVER_SIDE_EMAIL',
  'SERVER_SIDE_EMAIL' : 0,
  '1' : 'CLIENT_SIDE_EMAIL',
  'CLIENT_SIDE_EMAIL' : 1
};
ttypes.ErrorCode = {
  '0' : 'ILLEGAL_ARGUMENT',
  'ILLEGAL_ARGUMENT' : 0,
  '1' : 'AUTHENTICATION_FAILED',
  'AUTHENTICATION_FAILED' : 1,
  '2' : 'DB_FAILED',
  'DB_FAILED' : 2,
  '3' : 'INVALID_STATE',
  'INVALID_STATE' : 3,
  '4' : 'EXCESSIVE_ACCESS',
  'EXCESSIVE_ACCESS' : 4,
  '5' : 'NOT_FOUND',
  'NOT_FOUND' : 5,
  '9' : 'INVALID_MID',
  'INVALID_MID' : 9,
  '10' : 'NOT_A_MEMBER',
  'NOT_A_MEMBER' : 10,
  '6' : 'INVALID_LENGTH',
  'INVALID_LENGTH' : 6,
  '7' : 'NOT_AVAILABLE_USER',
  'NOT_AVAILABLE_USER' : 7,
  '8' : 'NOT_AUTHORIZED_DEVICE',
  'NOT_AUTHORIZED_DEVICE' : 8,
  '14' : 'NOT_AUTHORIZED_SESSION',
  'NOT_AUTHORIZED_SESSION' : 14,
  '11' : 'INCOMPATIBLE_APP_VERSION',
  'INCOMPATIBLE_APP_VERSION' : 11,
  '12' : 'NOT_READY',
  'NOT_READY' : 12,
  '13' : 'NOT_AVAILABLE_SESSION',
  'NOT_AVAILABLE_SESSION' : 13,
  '15' : 'SYSTEM_ERROR',
  'SYSTEM_ERROR' : 15,
  '16' : 'NO_AVAILABLE_VERIFICATION_METHOD',
  'NO_AVAILABLE_VERIFICATION_METHOD' : 16,
  '17' : 'NOT_AUTHENTICATED',
  'NOT_AUTHENTICATED' : 17,
  '18' : 'INVALID_IDENTITY_CREDENTIAL',
  'INVALID_IDENTITY_CREDENTIAL' : 18,
  '19' : 'NOT_AVAILABLE_IDENTITY_IDENTIFIER',
  'NOT_AVAILABLE_IDENTITY_IDENTIFIER' : 19,
  '20' : 'INTERNAL_ERROR',
  'INTERNAL_ERROR' : 20,
  '21' : 'NO_SUCH_IDENTITY_IDENFIER',
  'NO_SUCH_IDENTITY_IDENFIER' : 21,
  '22' : 'DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY',
  'DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY' : 22,
  '23' : 'ILLEGAL_IDENTITY_CREDENTIAL',
  'ILLEGAL_IDENTITY_CREDENTIAL' : 23,
  '24' : 'UNKNOWN_CHANNEL',
  'UNKNOWN_CHANNEL' : 24,
  '25' : 'NO_SUCH_MESSAGE_BOX',
  'NO_SUCH_MESSAGE_BOX' : 25,
  '26' : 'NOT_AVAILABLE_MESSAGE_BOX',
  'NOT_AVAILABLE_MESSAGE_BOX' : 26,
  '27' : 'CHANNEL_DOES_NOT_MATCH',
  'CHANNEL_DOES_NOT_MATCH' : 27,
  '28' : 'NOT_YOUR_MESSAGE',
  'NOT_YOUR_MESSAGE' : 28,
  '29' : 'MESSAGE_DEFINED_ERROR',
  'MESSAGE_DEFINED_ERROR' : 29,
  '30' : 'USER_CANNOT_ACCEPT_PRESENTS',
  'USER_CANNOT_ACCEPT_PRESENTS' : 30,
  '32' : 'USER_NOT_STICKER_OWNER',
  'USER_NOT_STICKER_OWNER' : 32,
  '33' : 'MAINTENANCE_ERROR',
  'MAINTENANCE_ERROR' : 33,
  '34' : 'ACCOUNT_NOT_MATCHED',
  'ACCOUNT_NOT_MATCHED' : 34,
  '35' : 'ABUSE_BLOCK',
  'ABUSE_BLOCK' : 35,
  '36' : 'NOT_FRIEND',
  'NOT_FRIEND' : 36,
  '37' : 'NOT_ALLOWED_CALL',
  'NOT_ALLOWED_CALL' : 37,
  '38' : 'BLOCK_FRIEND',
  'BLOCK_FRIEND' : 38,
  '39' : 'INCOMPATIBLE_VOIP_VERSION',
  'INCOMPATIBLE_VOIP_VERSION' : 39,
  '40' : 'INVALID_SNS_ACCESS_TOKEN',
  'INVALID_SNS_ACCESS_TOKEN' : 40,
  '41' : 'EXTERNAL_SERVICE_NOT_AVAILABLE',
  'EXTERNAL_SERVICE_NOT_AVAILABLE' : 41,
  '42' : 'NOT_ALLOWED_ADD_CONTACT',
  'NOT_ALLOWED_ADD_CONTACT' : 42,
  '43' : 'NOT_CERTIFICATED',
  'NOT_CERTIFICATED' : 43,
  '44' : 'NOT_ALLOWED_SECONDARY_DEVICE',
  'NOT_ALLOWED_SECONDARY_DEVICE' : 44,
  '45' : 'INVALID_PIN_CODE',
  'INVALID_PIN_CODE' : 45,
  '46' : 'NOT_FOUND_IDENTITY_CREDENTIAL',
  'NOT_FOUND_IDENTITY_CREDENTIAL' : 46,
  '47' : 'EXCEED_FILE_MAX_SIZE',
  'EXCEED_FILE_MAX_SIZE' : 47,
  '48' : 'EXCEED_DAILY_QUOTA',
  'EXCEED_DAILY_QUOTA' : 48,
  '49' : 'NOT_SUPPORT_SEND_FILE',
  'NOT_SUPPORT_SEND_FILE' : 49,
  '50' : 'MUST_UPGRADE',
  'MUST_UPGRADE' : 50,
  '51' : 'NOT_AVAILABLE_PIN_CODE_SESSION',
  'NOT_AVAILABLE_PIN_CODE_SESSION' : 51,
  '52' : 'EXPIRED_REVISION',
  'EXPIRED_REVISION' : 52,
  '54' : 'NOT_YET_PHONE_NUMBER',
  'NOT_YET_PHONE_NUMBER' : 54,
  '55' : 'BAD_CALL_NUMBER',
  'BAD_CALL_NUMBER' : 55,
  '56' : 'UNAVAILABLE_CALL_NUMBER',
  'UNAVAILABLE_CALL_NUMBER' : 56,
  '57' : 'NOT_SUPPORT_CALL_SERVICE',
  'NOT_SUPPORT_CALL_SERVICE' : 57,
  '58' : 'CONGESTION_CONTROL',
  'CONGESTION_CONTROL' : 58,
  '59' : 'NO_BALANCE',
  'NO_BALANCE' : 59,
  '60' : 'NOT_PERMITTED_CALLER_ID',
  'NOT_PERMITTED_CALLER_ID' : 60,
  '61' : 'NO_CALLER_ID_LIMIT_EXCEEDED',
  'NO_CALLER_ID_LIMIT_EXCEEDED' : 61,
  '62' : 'CALLER_ID_VERIFICATION_REQUIRED',
  'CALLER_ID_VERIFICATION_REQUIRED' : 62,
  '63' : 'NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED',
  'NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED' : 63,
  '64' : 'MESSAGE_NOT_FOUND',
  'MESSAGE_NOT_FOUND' : 64,
  '65' : 'INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT',
  'INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT' : 65,
  '66' : 'ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED',
  'ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED' : 66,
  '67' : 'ACCOUNT_MIGRATION_PINCODE_BLOCKED',
  'ACCOUNT_MIGRATION_PINCODE_BLOCKED' : 67,
  '69' : 'INVALID_PASSWORD_FORMAT',
  'INVALID_PASSWORD_FORMAT' : 69,
  '70' : 'FEATURE_RESTRICTED',
  'FEATURE_RESTRICTED' : 70,
  '71' : 'MESSAGE_NOT_DESTRUCTIBLE',
  'MESSAGE_NOT_DESTRUCTIBLE' : 71,
  '72' : 'PAID_CALL_REDEEM_FAILED',
  'PAID_CALL_REDEEM_FAILED' : 72,
  '73' : 'PREVENTED_JOIN_BY_TICKET',
  'PREVENTED_JOIN_BY_TICKET' : 73,
  '75' : 'SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT',
  'SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT' : 75,
  '76' : 'SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY',
  'SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY' : 76,
  '77' : 'SECURITY_CENTER_NOT_VERIFIED',
  'SECURITY_CENTER_NOT_VERIFIED' : 77,
  '78' : 'SECURITY_CENTER_BLOCKED_BY_SETTING',
  'SECURITY_CENTER_BLOCKED_BY_SETTING' : 78,
  '79' : 'SECURITY_CENTER_BLOCKED',
  'SECURITY_CENTER_BLOCKED' : 79,
  '80' : 'TALK_PROXY_EXCEPTION',
  'TALK_PROXY_EXCEPTION' : 80,
  '81' : 'E2EE_INVALID_PROTOCOL',
  'E2EE_INVALID_PROTOCOL' : 81,
  '82' : 'E2EE_RETRY_ENCRYPT',
  'E2EE_RETRY_ENCRYPT' : 82,
  '83' : 'E2EE_UPDATE_SENDER_KEY',
  'E2EE_UPDATE_SENDER_KEY' : 83,
  '84' : 'E2EE_UPDATE_RECEIVER_KEY',
  'E2EE_UPDATE_RECEIVER_KEY' : 84,
  '85' : 'E2EE_INVALID_ARGUMENT',
  'E2EE_INVALID_ARGUMENT' : 85,
  '86' : 'E2EE_INVALID_VERSION',
  'E2EE_INVALID_VERSION' : 86,
  '87' : 'E2EE_SENDER_DISABLED',
  'E2EE_SENDER_DISABLED' : 87,
  '88' : 'E2EE_RECEIVER_DISABLED',
  'E2EE_RECEIVER_DISABLED' : 88,
  '89' : 'E2EE_SENDER_NOT_ALLOWED',
  'E2EE_SENDER_NOT_ALLOWED' : 89,
  '90' : 'E2EE_RECEIVER_NOT_ALLOWED',
  'E2EE_RECEIVER_NOT_ALLOWED' : 90,
  '91' : 'E2EE_RESEND_FAIL',
  'E2EE_RESEND_FAIL' : 91,
  '92' : 'E2EE_RESEND_OK',
  'E2EE_RESEND_OK' : 92,
  '93' : 'HITOKOTO_BACKUP_NO_AVAILABLE_DATA',
  'HITOKOTO_BACKUP_NO_AVAILABLE_DATA' : 93,
  '94' : 'E2EE_UPDATE_PRIMARY_DEVICE',
  'E2EE_UPDATE_PRIMARY_DEVICE' : 94,
  '95' : 'SUCCESS',
  'SUCCESS' : 95,
  '96' : 'CANCEL',
  'CANCEL' : 96,
  '97' : 'E2EE_PRIMARY_NOT_SUPPORT',
  'E2EE_PRIMARY_NOT_SUPPORT' : 97,
  '98' : 'E2EE_RETRY_PLAIN',
  'E2EE_RETRY_PLAIN' : 98,
  '99' : 'E2EE_RECREATE_GROUP_KEY',
  'E2EE_RECREATE_GROUP_KEY' : 99,
  '100' : 'E2EE_GROUP_TOO_MANY_MEMBERS',
  'E2EE_GROUP_TOO_MANY_MEMBERS' : 100,
  '101' : 'SERVER_BUSY',
  'SERVER_BUSY' : 101,
  '102' : 'NOT_ALLOWED_ADD_FOLLOW',
  'NOT_ALLOWED_ADD_FOLLOW' : 102,
  '103' : 'INCOMING_FRIEND_REQUEST_LIMIT',
  'INCOMING_FRIEND_REQUEST_LIMIT' : 103,
  '104' : 'OUTGOING_FRIEND_REQUEST_LIMIT',
  'OUTGOING_FRIEND_REQUEST_LIMIT' : 104,
  '105' : 'OUTGOING_FRIEND_REQUEST_QUOTA',
  'OUTGOING_FRIEND_REQUEST_QUOTA' : 105,
  '106' : 'DUPLICATED',
  'DUPLICATED' : 106,
  '107' : 'BANNED',
  'BANNED' : 107
};
ttypes.ExtendedProfileAttribute = {
};
ttypes.FeatureType = {
  '1' : 'OBS_VIDEO',
  'OBS_VIDEO' : 1,
  '2' : 'OBS_GENERAL',
  'OBS_GENERAL' : 2
};
ttypes.FriendRequestDirection = {
  '1' : 'INCOMING',
  'INCOMING' : 1,
  '2' : 'OUTGOING',
  'OUTGOING' : 2
};
ttypes.FriendRequestMethod = {
  '1' : 'TIMELINE',
  'TIMELINE' : 1,
  '2' : 'NEARBY',
  'NEARBY' : 2,
  '3' : 'SQUARE',
  'SQUARE' : 3
};
ttypes.FriendRequestStatus = {
  '0' : 'NONE',
  'NONE' : 0,
  '1' : 'AVAILABLE',
  'AVAILABLE' : 1,
  '2' : 'ALREADY_REQUESTED',
  'ALREADY_REQUESTED' : 2,
  '3' : 'UNAVAILABLE',
  'UNAVAILABLE' : 3
};
ttypes.GroupAttribute = {
  '255' : 'ALL',
  'ALL' : 255,
  '1' : 'NAME',
  'NAME' : 1,
  '2' : 'PICTURE_STATUS',
  'PICTURE_STATUS' : 2,
  '4' : 'PREVENTED_JOIN_BY_TICKET',
  'PREVENTED_JOIN_BY_TICKET' : 4,
  '8' : 'NOTIFICATION_SETTING',
  'NOTIFICATION_SETTING' : 8
};
ttypes.GroupCallMediaType = {
  '1' : 'AUDIO',
  'AUDIO' : 1,
  '2' : 'VIDEO',
  'VIDEO' : 2
};
ttypes.GroupPreferenceAttribute = {
  '1' : 'INVITATION_TICKET',
  'INVITATION_TICKET' : 1,
  '2' : 'FAVORITE_TIMESTAMP',
  'FAVORITE_TIMESTAMP' : 2
};
ttypes.IdentityProvider = {
  '0' : 'UNKNOWN',
  'UNKNOWN' : 0,
  '1' : 'LINE',
  'LINE' : 1,
  '2' : 'NAVER_KR',
  'NAVER_KR' : 2,
  '3' : 'LINE_PHONE',
  'LINE_PHONE' : 3
};
ttypes.LoginResultType = {
  '1' : 'SUCCESS',
  'SUCCESS' : 1,
  '2' : 'REQUIRE_QRCODE',
  'REQUIRE_QRCODE' : 2,
  '3' : 'REQUIRE_DEVICE_CONFIRM',
  'REQUIRE_DEVICE_CONFIRM' : 3,
  '4' : 'REQUIRE_SMS_CONFIRM',
  'REQUIRE_SMS_CONFIRM' : 4
};
ttypes.LoginType = {
  '0' : 'ID_CREDENTIAL',
  'ID_CREDENTIAL' : 0,
  '1' : 'QRCODE',
  'QRCODE' : 1,
  '2' : 'ID_CREDENTIAL_WITH_E2EE',
  'ID_CREDENTIAL_WITH_E2EE' : 2
};
ttypes.MessageRelationType = {
  '0' : 'FORWARD',
  'FORWARD' : 0,
  '1' : 'AUTO_REPLY',
  'AUTO_REPLY' : 1,
  '2' : 'SUBORDINATE',
  'SUBORDINATE' : 2
};
ttypes.MIDType = {
  '0' : 'USER',
  'USER' : 0,
  '1' : 'ROOM',
  'ROOM' : 1,
  '2' : 'GROUP',
  'GROUP' : 2,
  '3' : 'SQUARE',
  'SQUARE' : 3,
  '4' : 'SQUARE_CHAT',
  'SQUARE_CHAT' : 4,
  '5' : 'SQUARE_MEMBER',
  'SQUARE_MEMBER' : 5
};
ttypes.ModificationType = {
  '0' : 'ADD',
  'ADD' : 0,
  '1' : 'REMOVE',
  'REMOVE' : 1,
  '2' : 'MODIFY',
  'MODIFY' : 2
};
ttypes.NotificationItemFetchMode = {
  '0' : 'ALL',
  'ALL' : 0,
  '1' : 'APPEND',
  'APPEND' : 1
};
ttypes.NotificationStatus = {
  '1' : 'NOTIFICATION_ITEM_EXIST',
  'NOTIFICATION_ITEM_EXIST' : 1,
  '2' : 'TIMELINE_ITEM_EXIST',
  'TIMELINE_ITEM_EXIST' : 2,
  '4' : 'NOTE_GROUP_NEW_ITEM_EXIST',
  'NOTE_GROUP_NEW_ITEM_EXIST' : 4,
  '8' : 'TIMELINE_BUDDYGROUP_CHANGED',
  'TIMELINE_BUDDYGROUP_CHANGED' : 8,
  '16' : 'NOTE_ONE_TO_ONE_NEW_ITEM_EXIST',
  'NOTE_ONE_TO_ONE_NEW_ITEM_EXIST' : 16,
  '32' : 'ALBUM_ITEM_EXIST',
  'ALBUM_ITEM_EXIST' : 32,
  '64' : 'TIMELINE_ITEM_DELETED',
  'TIMELINE_ITEM_DELETED' : 64,
  '128' : 'OTOGROUP_ITEM_EXIST',
  'OTOGROUP_ITEM_EXIST' : 128,
  '256' : 'GROUPHOME_NEW_ITEM_EXIST',
  'GROUPHOME_NEW_ITEM_EXIST' : 256,
  '512' : 'GROUPHOME_HIDDEN_ITEM_CHANGED',
  'GROUPHOME_HIDDEN_ITEM_CHANGED' : 512,
  '1024' : 'NOTIFICATION_ITEM_CHANGED',
  'NOTIFICATION_ITEM_CHANGED' : 1024,
  '2048' : 'BEAD_ITEM_HIDE',
  'BEAD_ITEM_HIDE' : 2048,
  '4096' : 'BEAD_ITEM_SHOW',
  'BEAD_ITEM_SHOW' : 4096
};
ttypes.NotificationType = {
  '1' : 'APPLE_APNS',
  'APPLE_APNS' : 1,
  '2' : 'GOOGLE_C2DM',
  'GOOGLE_C2DM' : 2,
  '3' : 'NHN_NNI',
  'NHN_NNI' : 3,
  '4' : 'SKT_AOM',
  'SKT_AOM' : 4,
  '5' : 'MS_MPNS',
  'MS_MPNS' : 5,
  '6' : 'RIM_BIS',
  'RIM_BIS' : 6,
  '7' : 'GOOGLE_GCM',
  'GOOGLE_GCM' : 7,
  '8' : 'NOKIA_NNAPI',
  'NOKIA_NNAPI' : 8,
  '9' : 'TIZEN',
  'TIZEN' : 9,
  '10' : 'MOZILLA_SIMPLE',
  'MOZILLA_SIMPLE' : 10,
  '17' : 'LINE_BOT',
  'LINE_BOT' : 17,
  '18' : 'LINE_WAP',
  'LINE_WAP' : 18,
  '19' : 'APPLE_APNS_VOIP',
  'APPLE_APNS_VOIP' : 19,
  '20' : 'MS_WNS',
  'MS_WNS' : 20
};
ttypes.OpStatus = {
  '0' : 'NORMAL',
  'NORMAL' : 0,
  '1' : 'ALERT_DISABLED',
  'ALERT_DISABLED' : 1,
  '2' : 'ALWAYS',
  'ALWAYS' : 2
};
ttypes.OpType = {
  '0' : 'END_OF_OPERATION',
  'END_OF_OPERATION' : 0,
  '1' : 'UPDATE_PROFILE',
  'UPDATE_PROFILE' : 1,
  '36' : 'UPDATE_SETTINGS',
  'UPDATE_SETTINGS' : 36,
  '2' : 'NOTIFIED_UPDATE_PROFILE',
  'NOTIFIED_UPDATE_PROFILE' : 2,
  '3' : 'REGISTER_USERID',
  'REGISTER_USERID' : 3,
  '4' : 'ADD_CONTACT',
  'ADD_CONTACT' : 4,
  '5' : 'NOTIFIED_ADD_CONTACT',
  'NOTIFIED_ADD_CONTACT' : 5,
  '6' : 'BLOCK_CONTACT',
  'BLOCK_CONTACT' : 6,
  '7' : 'UNBLOCK_CONTACT',
  'UNBLOCK_CONTACT' : 7,
  '8' : 'NOTIFIED_RECOMMEND_CONTACT',
  'NOTIFIED_RECOMMEND_CONTACT' : 8,
  '9' : 'CREATE_GROUP',
  'CREATE_GROUP' : 9,
  '10' : 'UPDATE_GROUP',
  'UPDATE_GROUP' : 10,
  '11' : 'NOTIFIED_UPDATE_GROUP',
  'NOTIFIED_UPDATE_GROUP' : 11,
  '12' : 'INVITE_INTO_GROUP',
  'INVITE_INTO_GROUP' : 12,
  '13' : 'NOTIFIED_INVITE_INTO_GROUP',
  'NOTIFIED_INVITE_INTO_GROUP' : 13,
  '31' : 'CANCEL_INVITATION_GROUP',
  'CANCEL_INVITATION_GROUP' : 31,
  '32' : 'NOTIFIED_CANCEL_INVITATION_GROUP',
  'NOTIFIED_CANCEL_INVITATION_GROUP' : 32,
  '14' : 'LEAVE_GROUP',
  'LEAVE_GROUP' : 14,
  '15' : 'NOTIFIED_LEAVE_GROUP',
  'NOTIFIED_LEAVE_GROUP' : 15,
  '16' : 'ACCEPT_GROUP_INVITATION',
  'ACCEPT_GROUP_INVITATION' : 16,
  '17' : 'NOTIFIED_ACCEPT_GROUP_INVITATION',
  'NOTIFIED_ACCEPT_GROUP_INVITATION' : 17,
  '34' : 'REJECT_GROUP_INVITATION',
  'REJECT_GROUP_INVITATION' : 34,
  '35' : 'NOTIFIED_REJECT_GROUP_INVITATION',
  'NOTIFIED_REJECT_GROUP_INVITATION' : 35,
  '18' : 'KICKOUT_FROM_GROUP',
  'KICKOUT_FROM_GROUP' : 18,
  '19' : 'NOTIFIED_KICKOUT_FROM_GROUP',
  'NOTIFIED_KICKOUT_FROM_GROUP' : 19,
  '20' : 'CREATE_ROOM',
  'CREATE_ROOM' : 20,
  '21' : 'INVITE_INTO_ROOM',
  'INVITE_INTO_ROOM' : 21,
  '22' : 'NOTIFIED_INVITE_INTO_ROOM',
  'NOTIFIED_INVITE_INTO_ROOM' : 22,
  '23' : 'LEAVE_ROOM',
  'LEAVE_ROOM' : 23,
  '24' : 'NOTIFIED_LEAVE_ROOM',
  'NOTIFIED_LEAVE_ROOM' : 24,
  '25' : 'SEND_MESSAGE',
  'SEND_MESSAGE' : 25,
  '26' : 'RECEIVE_MESSAGE',
  'RECEIVE_MESSAGE' : 26,
  '27' : 'SEND_MESSAGE_RECEIPT',
  'SEND_MESSAGE_RECEIPT' : 27,
  '28' : 'RECEIVE_MESSAGE_RECEIPT',
  'RECEIVE_MESSAGE_RECEIPT' : 28,
  '29' : 'SEND_CONTENT_RECEIPT',
  'SEND_CONTENT_RECEIPT' : 29,
  '40' : 'SEND_CHAT_CHECKED',
  'SEND_CHAT_CHECKED' : 40,
  '41' : 'SEND_CHAT_REMOVED',
  'SEND_CHAT_REMOVED' : 41,
  '30' : 'RECEIVE_ANNOUNCEMENT',
  'RECEIVE_ANNOUNCEMENT' : 30,
  '38' : 'INVITE_VIA_EMAIL',
  'INVITE_VIA_EMAIL' : 38,
  '37' : 'NOTIFIED_REGISTER_USER',
  'NOTIFIED_REGISTER_USER' : 37,
  '33' : 'NOTIFIED_UNREGISTER_USER',
  'NOTIFIED_UNREGISTER_USER' : 33,
  '39' : 'NOTIFIED_REQUEST_RECOVERY',
  'NOTIFIED_REQUEST_RECOVERY' : 39,
  '42' : 'NOTIFIED_FORCE_SYNC',
  'NOTIFIED_FORCE_SYNC' : 42,
  '43' : 'SEND_CONTENT',
  'SEND_CONTENT' : 43,
  '44' : 'SEND_MESSAGE_MYHOME',
  'SEND_MESSAGE_MYHOME' : 44,
  '45' : 'NOTIFIED_UPDATE_CONTENT_PREVIEW',
  'NOTIFIED_UPDATE_CONTENT_PREVIEW' : 45,
  '46' : 'REMOVE_ALL_MESSAGES',
  'REMOVE_ALL_MESSAGES' : 46,
  '47' : 'NOTIFIED_UPDATE_PURCHASES',
  'NOTIFIED_UPDATE_PURCHASES' : 47,
  '48' : 'DUMMY',
  'DUMMY' : 48,
  '49' : 'UPDATE_CONTACT',
  'UPDATE_CONTACT' : 49,
  '50' : 'NOTIFIED_RECEIVED_CALL',
  'NOTIFIED_RECEIVED_CALL' : 50,
  '51' : 'CANCEL_CALL',
  'CANCEL_CALL' : 51,
  '52' : 'NOTIFIED_REDIRECT',
  'NOTIFIED_REDIRECT' : 52,
  '53' : 'NOTIFIED_CHANNEL_SYNC',
  'NOTIFIED_CHANNEL_SYNC' : 53,
  '54' : 'FAILED_SEND_MESSAGE',
  'FAILED_SEND_MESSAGE' : 54,
  '55' : 'NOTIFIED_READ_MESSAGE',
  'NOTIFIED_READ_MESSAGE' : 55,
  '56' : 'FAILED_EMAIL_CONFIRMATION',
  'FAILED_EMAIL_CONFIRMATION' : 56,
  '59' : 'NOTIFIED_PUSH_NOTICENTER_ITEM',
  'NOTIFIED_PUSH_NOTICENTER_ITEM' : 59,
  '58' : 'NOTIFIED_CHAT_CONTENT',
  'NOTIFIED_CHAT_CONTENT' : 58,
  '60' : 'NOTIFIED_JOIN_CHAT',
  'NOTIFIED_JOIN_CHAT' : 60,
  '61' : 'NOTIFIED_LEAVE_CHAT',
  'NOTIFIED_LEAVE_CHAT' : 61,
  '62' : 'NOTIFIED_TYPING',
  'NOTIFIED_TYPING' : 62,
  '63' : 'FRIEND_REQUEST_ACCEPTED',
  'FRIEND_REQUEST_ACCEPTED' : 63,
  '64' : 'DESTROY_MESSAGE',
  'DESTROY_MESSAGE' : 64,
  '65' : 'NOTIFIED_DESTROY_MESSAGE',
  'NOTIFIED_DESTROY_MESSAGE' : 65,
  '66' : 'UPDATE_PUBLICKEYCHAIN',
  'UPDATE_PUBLICKEYCHAIN' : 66,
  '67' : 'NOTIFIED_UPDATE_PUBLICKEYCHAIN',
  'NOTIFIED_UPDATE_PUBLICKEYCHAIN' : 67,
  '68' : 'NOTIFIED_BLOCK_CONTACT',
  'NOTIFIED_BLOCK_CONTACT' : 68,
  '69' : 'NOTIFIED_UNBLOCK_CONTACT',
  'NOTIFIED_UNBLOCK_CONTACT' : 69,
  '70' : 'UPDATE_GROUPPREFERENCE',
  'UPDATE_GROUPPREFERENCE' : 70,
  '71' : 'NOTIFIED_PAYMENT_EVENT',
  'NOTIFIED_PAYMENT_EVENT' : 71,
  '72' : 'REGISTER_E2EE_PUBLICKEY',
  'REGISTER_E2EE_PUBLICKEY' : 72,
  '73' : 'NOTIFIED_E2EE_KEY_EXCHANGE_REQ',
  'NOTIFIED_E2EE_KEY_EXCHANGE_REQ' : 73,
  '74' : 'NOTIFIED_E2EE_KEY_EXCHANGE_RESP',
  'NOTIFIED_E2EE_KEY_EXCHANGE_RESP' : 74,
  '75' : 'NOTIFIED_E2EE_MESSAGE_RESEND_REQ',
  'NOTIFIED_E2EE_MESSAGE_RESEND_REQ' : 75,
  '76' : 'NOTIFIED_E2EE_MESSAGE_RESEND_RESP',
  'NOTIFIED_E2EE_MESSAGE_RESEND_RESP' : 76,
  '77' : 'NOTIFIED_E2EE_KEY_UPDATE',
  'NOTIFIED_E2EE_KEY_UPDATE' : 77,
  '78' : 'NOTIFIED_BUDDY_UPDATE_PROFILE',
  'NOTIFIED_BUDDY_UPDATE_PROFILE' : 78,
  '79' : 'NOTIFIED_UPDATE_LINEAT_TABS',
  'NOTIFIED_UPDATE_LINEAT_TABS' : 79,
  '80' : 'UPDATE_ROOM',
  'UPDATE_ROOM' : 80,
  '81' : 'NOTIFIED_BEACON_DETECTED',
  'NOTIFIED_BEACON_DETECTED' : 81,
  '82' : 'UPDATE_EXTENDED_PROFILE',
  'UPDATE_EXTENDED_PROFILE' : 82,
  '83' : 'ADD_FOLLOW',
  'ADD_FOLLOW' : 83,
  '84' : 'NOTIFIED_ADD_FOLLOW',
  'NOTIFIED_ADD_FOLLOW' : 84,
  '85' : 'DELETE_FOLLOW',
  'DELETE_FOLLOW' : 85,
  '86' : 'NOTIFIED_DELETE_FOLLOW',
  'NOTIFIED_DELETE_FOLLOW' : 86,
  '87' : 'UPDATE_TIMELINE_SETTINGS',
  'UPDATE_TIMELINE_SETTINGS' : 87,
  '88' : 'NOTIFIED_FRIEND_REQUEST',
  'NOTIFIED_FRIEND_REQUEST' : 88,
  '89' : 'UPDATE_RINGBACK_TONE',
  'UPDATE_RINGBACK_TONE' : 89,
  '90' : 'NOTIFIED_POSTBACK',
  'NOTIFIED_POSTBACK' : 90,
  '91' : 'RECEIVE_READ_WATERMARK',
  'RECEIVE_READ_WATERMARK' : 91,
  '92' : 'NOTIFIED_MESSAGE_DELIVERED',
  'NOTIFIED_MESSAGE_DELIVERED' : 92
};
ttypes.PaidCallerIdStatus = {
  '0' : 'NOT_SPECIFIED',
  'NOT_SPECIFIED' : 0,
  '1' : 'VALID',
  'VALID' : 1,
  '2' : 'VERIFICATION_REQUIRED',
  'VERIFICATION_REQUIRED' : 2,
  '3' : 'NOT_PERMITTED',
  'NOT_PERMITTED' : 3,
  '4' : 'LIMIT_EXCEEDED',
  'LIMIT_EXCEEDED' : 4,
  '5' : 'LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED',
  'LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED' : 5
};
ttypes.PaidCallProductType = {
  '0' : 'COIN',
  'COIN' : 0,
  '1' : 'CREDIT',
  'CREDIT' : 1,
  '2' : 'MONTHLY',
  'MONTHLY' : 2
};
ttypes.PaidCallType = {
  '0' : 'OUT',
  'OUT' : 0,
  '1' : 'IN',
  'IN' : 1,
  '2' : 'TOLLFREE',
  'TOLLFREE' : 2,
  '3' : 'RECORD',
  'RECORD' : 3,
  '4' : 'AD',
  'AD' : 4,
  '5' : 'CS',
  'CS' : 5
};
ttypes.PayloadType = {
  '101' : 'PAYLOAD_BUY',
  'PAYLOAD_BUY' : 101,
  '111' : 'PAYLOAD_CS',
  'PAYLOAD_CS' : 111,
  '121' : 'PAYLOAD_BONUS',
  'PAYLOAD_BONUS' : 121,
  '131' : 'PAYLOAD_EVENT',
  'PAYLOAD_EVENT' : 131,
  '141' : 'PAYLOAD_POINT_AUTO_EXCHANGED',
  'PAYLOAD_POINT_AUTO_EXCHANGED' : 141,
  '151' : 'PAYLOAD_POINT_MANUAL_EXCHANGED',
  'PAYLOAD_POINT_MANUAL_EXCHANGED' : 151
};
ttypes.PaymentPgType = {
  '0' : 'PAYMENT_PG_NONE',
  'PAYMENT_PG_NONE' : 0,
  '1' : 'PAYMENT_PG_AU',
  'PAYMENT_PG_AU' : 1,
  '2' : 'PAYMENT_PG_AL',
  'PAYMENT_PG_AL' : 2
};
ttypes.PaymentType = {
  '1' : 'PAYMENT_APPLE',
  'PAYMENT_APPLE' : 1,
  '2' : 'PAYMENT_GOOGLE',
  'PAYMENT_GOOGLE' : 2
};
ttypes.PersonalInfo = {
  '0' : 'EMAIL',
  'EMAIL' : 0,
  '1' : 'PHONE',
  'PHONE' : 1,
  '2' : 'BIRTHDAY',
  'BIRTHDAY' : 2,
  '3' : 'RAW_BIRTHDAY',
  'RAW_BIRTHDAY' : 3
};
ttypes.PlaceSearchProvider = {
  '0' : 'GOOGLE',
  'GOOGLE' : 0,
  '1' : 'BAIDU',
  'BAIDU' : 1
};
ttypes.PointErrorCode = {
  '3001' : 'REQUEST_DUPLICATION',
  'REQUEST_DUPLICATION' : 3001,
  '3002' : 'INVALID_PARAMETER',
  'INVALID_PARAMETER' : 3002,
  '3003' : 'NOT_ENOUGH_BALANCE',
  'NOT_ENOUGH_BALANCE' : 3003,
  '3004' : 'AUTHENTICATION_FAIL',
  'AUTHENTICATION_FAIL' : 3004,
  '3005' : 'API_ACCESS_FORBIDDEN',
  'API_ACCESS_FORBIDDEN' : 3005,
  '3006' : 'MEMBER_ACCOUNT_NOT_FOUND',
  'MEMBER_ACCOUNT_NOT_FOUND' : 3006,
  '3007' : 'SERVICE_ACCOUNT_NOT_FOUND',
  'SERVICE_ACCOUNT_NOT_FOUND' : 3007,
  '3008' : 'TRANSACTION_NOT_FOUND',
  'TRANSACTION_NOT_FOUND' : 3008,
  '3009' : 'ALREADY_REVERSED_TRANSACTION',
  'ALREADY_REVERSED_TRANSACTION' : 3009,
  '3010' : 'MESSAGE_NOT_READABLE',
  'MESSAGE_NOT_READABLE' : 3010,
  '3011' : 'HTTP_REQUEST_METHOD_NOT_SUPPORTED',
  'HTTP_REQUEST_METHOD_NOT_SUPPORTED' : 3011,
  '3012' : 'HTTP_MEDIA_TYPE_NOT_SUPPORTED',
  'HTTP_MEDIA_TYPE_NOT_SUPPORTED' : 3012,
  '3013' : 'NOT_ALLOWED_TO_DEPOSIT',
  'NOT_ALLOWED_TO_DEPOSIT' : 3013,
  '3014' : 'NOT_ALLOWED_TO_PAY',
  'NOT_ALLOWED_TO_PAY' : 3014,
  '3015' : 'TRANSACTION_ACCESS_FORBIDDEN',
  'TRANSACTION_ACCESS_FORBIDDEN' : 3015,
  '4001' : 'INVALID_SERVICE_CONFIGURATION',
  'INVALID_SERVICE_CONFIGURATION' : 4001,
  '5004' : 'DCS_COMMUNICATION_FAIL',
  'DCS_COMMUNICATION_FAIL' : 5004,
  '5007' : 'UPDATE_BALANCE_FAIL',
  'UPDATE_BALANCE_FAIL' : 5007,
  '5999' : 'SYSTEM_ERROR',
  'SYSTEM_ERROR' : 5999,
  '5888' : 'SYSTEM_MAINTENANCE',
  'SYSTEM_MAINTENANCE' : 5888
};
ttypes.PrivacyLevelType = {
  '0' : 'PUBLIC',
  'PUBLIC' : 0,
  '1' : 'PRIVATE',
  'PRIVATE' : 1
};
ttypes.ProductBannerLinkType = {
  '0' : 'BANNER_LINK_NONE',
  'BANNER_LINK_NONE' : 0,
  '1' : 'BANNER_LINK_ITEM',
  'BANNER_LINK_ITEM' : 1,
  '2' : 'BANNER_LINK_URL',
  'BANNER_LINK_URL' : 2,
  '3' : 'BANNER_LINK_CATEGORY',
  'BANNER_LINK_CATEGORY' : 3
};
ttypes.ProductEventType = {
  '0' : 'NO_EVENT',
  'NO_EVENT' : 0,
  '65537' : 'CARRIER_ANY',
  'CARRIER_ANY' : 65537,
  '131073' : 'BUDDY_ANY',
  'BUDDY_ANY' : 131073,
  '196609' : 'INSTALL_IOS',
  'INSTALL_IOS' : 196609,
  '196610' : 'INSTALL_ANDROID',
  'INSTALL_ANDROID' : 196610,
  '262145' : 'MISSION_ANY',
  'MISSION_ANY' : 262145,
  '327681' : 'MUSTBUY_ANY',
  'MUSTBUY_ANY' : 327681
};
ttypes.ProfileAttribute = {
  '511' : 'ALL',
  'ALL' : 511,
  '1' : 'EMAIL',
  'EMAIL' : 1,
  '2' : 'DISPLAY_NAME',
  'DISPLAY_NAME' : 2,
  '4' : 'PHONETIC_NAME',
  'PHONETIC_NAME' : 4,
  '8' : 'PICTURE',
  'PICTURE' : 8,
  '16' : 'STATUS_MESSAGE',
  'STATUS_MESSAGE' : 16,
  '32' : 'ALLOW_SEARCH_BY_USERID',
  'ALLOW_SEARCH_BY_USERID' : 32,
  '64' : 'ALLOW_SEARCH_BY_EMAIL',
  'ALLOW_SEARCH_BY_EMAIL' : 64,
  '128' : 'BUDDY_STATUS',
  'BUDDY_STATUS' : 128,
  '256' : 'MUSIC_PROFILE',
  'MUSIC_PROFILE' : 256
};
ttypes.PublicKeychainStatus = {
  '0' : 'UPDATED',
  'UPDATED' : 0,
  '1' : 'DELETED',
  'DELETED' : 1,
  '2' : 'RESTRICTED',
  'RESTRICTED' : 2
};
ttypes.PublicType = {
  '0' : 'HIDDEN',
  'HIDDEN' : 0,
  '1000' : 'PUBLIC',
  'PUBLIC' : 1000
};
ttypes.RedirectType = {
  '0' : 'NONE',
  'NONE' : 0,
  '1' : 'EXPIRE_SECOND',
  'EXPIRE_SECOND' : 1
};
ttypes.RegistrationType = {
  '0' : 'PHONE',
  'PHONE' : 0,
  '1' : 'EMAIL_WAP',
  'EMAIL_WAP' : 1,
  '2305' : 'FACEBOOK',
  'FACEBOOK' : 2305,
  '2306' : 'SINA',
  'SINA' : 2306,
  '2307' : 'RENREN',
  'RENREN' : 2307,
  '2308' : 'FEIXIN',
  'FEIXIN' : 2308
};
ttypes.ReportCategory = {
  '0' : 'PUSH_NORMAL_PLAIN',
  'PUSH_NORMAL_PLAIN' : 0,
  '1' : 'PUSH_NORMAL_E2EE',
  'PUSH_NORMAL_E2EE' : 1,
  '2' : 'PUSH_VOIP_PLAIN',
  'PUSH_VOIP_PLAIN' : 2,
  '3' : 'PUSH_VOIP_E2EE',
  'PUSH_VOIP_E2EE' : 3
};
ttypes.ReservedMessageSessionId = {
  '0' : 'DEFAULT',
  'DEFAULT' : 0,
  '1' : 'HIDDEN_CHAT',
  'HIDDEN_CHAT' : 1
};
ttypes.RoomAttribute = {
  '255' : 'ALL',
  'ALL' : 255,
  '1' : 'NOTIFICATION_SETTING',
  'NOTIFICATION_SETTING' : 1
};
ttypes.SecurityCenterSettingsType = {
  '0' : 'NOT_APPLICABLE',
  'NOT_APPLICABLE' : 0,
  '1' : 'NOT_SET',
  'NOT_SET' : 1,
  '2' : 'SET',
  'SET' : 2,
  '3' : 'NEED_ENFORCED_INPUT',
  'NEED_ENFORCED_INPUT' : 3
};
ttypes.ServiceCode = {
  '0' : 'UNKNOWN',
  'UNKNOWN' : 0,
  '1' : 'TALK',
  'TALK' : 1,
  '2' : 'SQUARE',
  'SQUARE' : 2
};
ttypes.SettingsAttribute = {
  '1' : 'NOTIFICATION_ENABLE',
  'NOTIFICATION_ENABLE' : 1,
  '2' : 'NOTIFICATION_MUTE_EXPIRATION',
  'NOTIFICATION_MUTE_EXPIRATION' : 2,
  '4' : 'NOTIFICATION_NEW_MESSAGE',
  'NOTIFICATION_NEW_MESSAGE' : 4,
  '8' : 'NOTIFICATION_GROUP_INVITATION',
  'NOTIFICATION_GROUP_INVITATION' : 8,
  '16' : 'NOTIFICATION_SHOW_MESSAGE',
  'NOTIFICATION_SHOW_MESSAGE' : 16,
  '32' : 'NOTIFICATION_INCOMING_CALL',
  'NOTIFICATION_INCOMING_CALL' : 32,
  '256' : 'NOTIFICATION_SOUND_MESSAGE',
  'NOTIFICATION_SOUND_MESSAGE' : 256,
  '512' : 'NOTIFICATION_SOUND_GROUP',
  'NOTIFICATION_SOUND_GROUP' : 512,
  '65536' : 'NOTIFICATION_DISABLED_WITH_SUB',
  'NOTIFICATION_DISABLED_WITH_SUB' : 65536,
  '131072' : 'NOTIFICATION_PAYMENT',
  'NOTIFICATION_PAYMENT' : 131072,
  '64' : 'PRIVACY_SYNC_CONTACTS',
  'PRIVACY_SYNC_CONTACTS' : 64,
  '128' : 'PRIVACY_SEARCH_BY_PHONE_NUMBER',
  'PRIVACY_SEARCH_BY_PHONE_NUMBER' : 128,
  '8192' : 'PRIVACY_SEARCH_BY_USERID',
  'PRIVACY_SEARCH_BY_USERID' : 8192,
  '16384' : 'PRIVACY_SEARCH_BY_EMAIL',
  'PRIVACY_SEARCH_BY_EMAIL' : 16384,
  '2097152' : 'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN',
  'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN' : 2097152,
  '8388608' : 'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME',
  'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME' : 8388608,
  '1073741824' : 'PRIVACY_ALLOW_FRIEND_REQUEST',
  'PRIVACY_ALLOW_FRIEND_REQUEST' : 1073741824,
  '33554432' : 'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND',
  'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND' : 33554432,
  '67108864' : 'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL',
  'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL' : 67108864,
  '134217728' : 'PRIVACY_AGREE_USE_PAIDCALL',
  'PRIVACY_AGREE_USE_PAIDCALL' : 134217728,
  '1024' : 'CONTACT_MY_TICKET',
  'CONTACT_MY_TICKET' : 1024,
  '2048' : 'IDENTITY_PROVIDER',
  'IDENTITY_PROVIDER' : 2048,
  '4096' : 'IDENTITY_IDENTIFIER',
  'IDENTITY_IDENTIFIER' : 4096,
  '524288' : 'SNS_ACCOUNT',
  'SNS_ACCOUNT' : 524288,
  '1048576' : 'PHONE_REGISTRATION',
  'PHONE_REGISTRATION' : 1048576,
  '32768' : 'PREFERENCE_LOCALE',
  'PREFERENCE_LOCALE' : 32768,
  '4194304' : 'CUSTOM_MODE',
  'CUSTOM_MODE' : 4194304,
  '16777216' : 'EMAIL_CONFIRMATION_STATUS',
  'EMAIL_CONFIRMATION_STATUS' : 16777216,
  '268435456' : 'ACCOUNT_MIGRATION_PINCODE',
  'ACCOUNT_MIGRATION_PINCODE' : 268435456,
  '536870912' : 'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE',
  'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE' : 536870912,
  '262144' : 'SECURITY_CENTER_SETTINGS',
  'SECURITY_CENTER_SETTINGS' : 262144
};
ttypes.SettingsAttributeEx = {
  '0' : 'NOTIFICATION_ENABLE',
  'NOTIFICATION_ENABLE' : 0,
  '1' : 'NOTIFICATION_MUTE_EXPIRATION',
  'NOTIFICATION_MUTE_EXPIRATION' : 1,
  '2' : 'NOTIFICATION_NEW_MESSAGE',
  'NOTIFICATION_NEW_MESSAGE' : 2,
  '3' : 'NOTIFICATION_GROUP_INVITATION',
  'NOTIFICATION_GROUP_INVITATION' : 3,
  '4' : 'NOTIFICATION_SHOW_MESSAGE',
  'NOTIFICATION_SHOW_MESSAGE' : 4,
  '5' : 'NOTIFICATION_INCOMING_CALL',
  'NOTIFICATION_INCOMING_CALL' : 5,
  '8' : 'NOTIFICATION_SOUND_MESSAGE',
  'NOTIFICATION_SOUND_MESSAGE' : 8,
  '9' : 'NOTIFICATION_SOUND_GROUP',
  'NOTIFICATION_SOUND_GROUP' : 9,
  '16' : 'NOTIFICATION_DISABLED_WITH_SUB',
  'NOTIFICATION_DISABLED_WITH_SUB' : 16,
  '17' : 'NOTIFICATION_PAYMENT',
  'NOTIFICATION_PAYMENT' : 17,
  '40' : 'NOTIFICATION_MENTION',
  'NOTIFICATION_MENTION' : 40,
  '6' : 'PRIVACY_SYNC_CONTACTS',
  'PRIVACY_SYNC_CONTACTS' : 6,
  '7' : 'PRIVACY_SEARCH_BY_PHONE_NUMBER',
  'PRIVACY_SEARCH_BY_PHONE_NUMBER' : 7,
  '13' : 'PRIVACY_SEARCH_BY_USERID',
  'PRIVACY_SEARCH_BY_USERID' : 13,
  '14' : 'PRIVACY_SEARCH_BY_EMAIL',
  'PRIVACY_SEARCH_BY_EMAIL' : 14,
  '21' : 'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN',
  'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN' : 21,
  '23' : 'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME',
  'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME' : 23,
  '35' : 'PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME',
  'PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME' : 35,
  '30' : 'PRIVACY_ALLOW_FRIEND_REQUEST',
  'PRIVACY_ALLOW_FRIEND_REQUEST' : 30,
  '25' : 'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND',
  'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND' : 25,
  '26' : 'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL',
  'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL' : 26,
  '27' : 'PRIVACY_AGREE_USE_PAIDCALL',
  'PRIVACY_AGREE_USE_PAIDCALL' : 27,
  '10' : 'CONTACT_MY_TICKET',
  'CONTACT_MY_TICKET' : 10,
  '11' : 'IDENTITY_PROVIDER',
  'IDENTITY_PROVIDER' : 11,
  '12' : 'IDENTITY_IDENTIFIER',
  'IDENTITY_IDENTIFIER' : 12,
  '19' : 'SNS_ACCOUNT',
  'SNS_ACCOUNT' : 19,
  '20' : 'PHONE_REGISTRATION',
  'PHONE_REGISTRATION' : 20,
  '15' : 'PREFERENCE_LOCALE',
  'PREFERENCE_LOCALE' : 15,
  '22' : 'CUSTOM_MODE',
  'CUSTOM_MODE' : 22,
  '24' : 'EMAIL_CONFIRMATION_STATUS',
  'EMAIL_CONFIRMATION_STATUS' : 24,
  '28' : 'ACCOUNT_MIGRATION_PINCODE',
  'ACCOUNT_MIGRATION_PINCODE' : 28,
  '29' : 'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE',
  'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE' : 29,
  '18' : 'SECURITY_CENTER_SETTINGS',
  'SECURITY_CENTER_SETTINGS' : 18,
  '33' : 'E2EE_ENABLE',
  'E2EE_ENABLE' : 33,
  '34' : 'HITOKOTO_BACKUP_REQUESTED',
  'HITOKOTO_BACKUP_REQUESTED' : 34,
  '36' : 'CONTACT_ALLOW_FOLLOWING',
  'CONTACT_ALLOW_FOLLOWING' : 36,
  '37' : 'PRIVACY_ALLOW_NEARBY',
  'PRIVACY_ALLOW_NEARBY' : 37,
  '38' : 'AGREEMENT_NEARBY',
  'AGREEMENT_NEARBY' : 38,
  '39' : 'AGREEMENT_SQUARE',
  'AGREEMENT_SQUARE' : 39,
  '41' : 'ALLOW_UNREGISTRATION_SECONDARY_DEVICE',
  'ALLOW_UNREGISTRATION_SECONDARY_DEVICE' : 41,
  '42' : 'AGREEMENT_BOT_USE',
  'AGREEMENT_BOT_USE' : 42
};
ttypes.SnsIdType = {
  '1' : 'FACEBOOK',
  'FACEBOOK' : 1,
  '2' : 'SINA',
  'SINA' : 2,
  '3' : 'RENREN',
  'RENREN' : 3,
  '4' : 'FEIXIN',
  'FEIXIN' : 4,
  '5' : 'BBM',
  'BBM' : 5
};
ttypes.SpammerReason = {
  '0' : 'OTHER',
  'OTHER' : 0,
  '1' : 'ADVERTISING',
  'ADVERTISING' : 1,
  '2' : 'GENDER_HARASSMENT',
  'GENDER_HARASSMENT' : 2,
  '3' : 'HARASSMENT',
  'HARASSMENT' : 3
};
ttypes.SpotCategory = {
  '0' : 'UNKNOWN',
  'UNKNOWN' : 0,
  '1' : 'GOURMET',
  'GOURMET' : 1,
  '2' : 'BEAUTY',
  'BEAUTY' : 2,
  '3' : 'TRAVEL',
  'TRAVEL' : 3,
  '4' : 'SHOPPING',
  'SHOPPING' : 4,
  '5' : 'ENTERTAINMENT',
  'ENTERTAINMENT' : 5,
  '6' : 'SPORTS',
  'SPORTS' : 6,
  '7' : 'TRANSPORT',
  'TRANSPORT' : 7,
  '8' : 'LIFE',
  'LIFE' : 8,
  '9' : 'HOSPITAL',
  'HOSPITAL' : 9,
  '10' : 'FINANCE',
  'FINANCE' : 10,
  '11' : 'EDUCATION',
  'EDUCATION' : 11,
  '12' : 'OTHER',
  'OTHER' : 12,
  '10000' : 'ALL',
  'ALL' : 10000
};
ttypes.StickerResourceType = {
  '1' : 'STATIC',
  'STATIC' : 1,
  '2' : 'ANIMATION',
  'ANIMATION' : 2,
  '3' : 'SOUND',
  'SOUND' : 3,
  '4' : 'ANIMATION_SOUND',
  'ANIMATION_SOUND' : 4,
  '5' : 'POPUP',
  'POPUP' : 5,
  '6' : 'POPUP_SOUND',
  'POPUP_SOUND' : 6
};
ttypes.SuggestDictionaryIncrementStatus = {
  '0' : 'SUCCESS',
  'SUCCESS' : 0,
  '1' : 'INVALID_REVISION',
  'INVALID_REVISION' : 1,
  '2' : 'TOO_LARGE_DATA',
  'TOO_LARGE_DATA' : 2,
  '3' : 'SCHEME_CHANGED',
  'SCHEME_CHANGED' : 3,
  '4' : 'RETRY',
  'RETRY' : 4,
  '5' : 'FAIL',
  'FAIL' : 5,
  '6' : 'TOO_OLD_DATA',
  'TOO_OLD_DATA' : 6
};
ttypes.SyncActionType = {
  '0' : 'SYNC',
  'SYNC' : 0,
  '1' : 'REPORT',
  'REPORT' : 1
};
ttypes.SyncCategory = {
  '0' : 'PROFILE',
  'PROFILE' : 0,
  '1' : 'SETTINGS',
  'SETTINGS' : 1,
  '2' : 'OPS',
  'OPS' : 2,
  '3' : 'CONTACT',
  'CONTACT' : 3,
  '4' : 'RECOMMEND',
  'RECOMMEND' : 4,
  '5' : 'BLOCK',
  'BLOCK' : 5,
  '6' : 'GROUP',
  'GROUP' : 6,
  '7' : 'ROOM',
  'ROOM' : 7,
  '8' : 'NOTIFICATION',
  'NOTIFICATION' : 8,
  '9' : 'ADDRESS_BOOK',
  'ADDRESS_BOOK' : 9
};
ttypes.SyncTriggerReason = {
  '0' : 'OTHER',
  'OTHER' : 0,
  '1' : 'REVISION_GAP_TOO_LARGE',
  'REVISION_GAP_TOO_LARGE' : 1,
  '2' : 'OPERATION_EXPIRED',
  'OPERATION_EXPIRED' : 2
};
ttypes.TMessageBoxStatus = {
  '1' : 'ACTIVATED',
  'ACTIVATED' : 1,
  '2' : 'UNREAD',
  'UNREAD' : 2
};
ttypes.TrackingType = {
};
ttypes.UnregistrationReason = {
  '1' : 'UNREGISTRATION_REASON_UNREGISTER_USER',
  'UNREGISTRATION_REASON_UNREGISTER_USER' : 1,
  '2' : 'UNREGISTRATION_REASON_UNBIND_DEVICE',
  'UNREGISTRATION_REASON_UNBIND_DEVICE' : 2
};
ttypes.UserAgeType = {
  '1' : 'OVER',
  'OVER' : 1,
  '2' : 'UNDER',
  'UNDER' : 2,
  '3' : 'UNDEFINED',
  'UNDEFINED' : 3
};
ttypes.UserStatus = {
  '0' : 'NORMAL',
  'NORMAL' : 0,
  '1' : 'UNBOUND',
  'UNBOUND' : 1,
  '2' : 'UNREGISTERED',
  'UNREGISTERED' : 2
};
ttypes.VerificationMethod = {
  '0' : 'NO_AVAILABLE',
  'NO_AVAILABLE' : 0,
  '1' : 'PIN_VIA_SMS',
  'PIN_VIA_SMS' : 1,
  '2' : 'CALLERID_INDIGO',
  'CALLERID_INDIGO' : 2,
  '4' : 'PIN_VIA_TTS',
  'PIN_VIA_TTS' : 4,
  '10' : 'SKIP',
  'SKIP' : 10
};
ttypes.VerificationResult = {
  '0' : 'FAILED',
  'FAILED' : 0,
  '1' : 'OK_NOT_REGISTERED_YET',
  'OK_NOT_REGISTERED_YET' : 1,
  '2' : 'OK_REGISTERED_WITH_SAME_DEVICE',
  'OK_REGISTERED_WITH_SAME_DEVICE' : 2,
  '3' : 'OK_REGISTERED_WITH_ANOTHER_DEVICE',
  'OK_REGISTERED_WITH_ANOTHER_DEVICE' : 3
};
ttypes.WapInvitationType = {
  '1' : 'REGISTRATION',
  'REGISTRATION' : 1,
  '2' : 'CHAT',
  'CHAT' : 2
};
ttypes.LoginQrCode_ErrorCode = {
  '0' : 'INTERNAL_ERROR',
  'INTERNAL_ERROR' : 0,
  '1' : 'ILLEGAL_ARGUMENT',
  'ILLEGAL_ARGUMENT' : 1,
  '2' : 'VERIFICATION_FAILED',
  'VERIFICATION_FAILED' : 2,
  '3' : 'NOT_ALLOWED_QR_CODE_LOGIN',
  'NOT_ALLOWED_QR_CODE_LOGIN' : 3,
  '4' : 'VERIFICATION_NOTICE_FAILED',
  'VERIFICATION_NOTICE_FAILED' : 4,
  '5' : 'RETRY_LATER',
  'RETRY_LATER' : 5,
  '100' : 'INVALID_CONTEXT',
  'INVALID_CONTEXT' : 100,
  '101' : 'APP_UPGRADE_REQUIRED',
  'APP_UPGRADE_REQUIRED' : 101
};
const AgeCheckDocomoResult = module.exports.AgeCheckDocomoResult = class {
  constructor(args) {
    this.authUrl = null;
    this.userAgeType = null;
    if (args) {
      if (args.authUrl !== undefined && args.authUrl !== null) {
        this.authUrl = args.authUrl;
      }
      if (args.userAgeType !== undefined && args.userAgeType !== null) {
        this.userAgeType = args.userAgeType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.authUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.userAgeType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AgeCheckDocomoResult');
    if (this.authUrl !== null && this.authUrl !== undefined) {
      output.writeFieldBegin('authUrl', Thrift.Type.STRING, 1);
      output.writeString(this.authUrl);
      output.writeFieldEnd();
    }
    if (this.userAgeType !== null && this.userAgeType !== undefined) {
      output.writeFieldBegin('userAgeType', Thrift.Type.I32, 2);
      output.writeI32(this.userAgeType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AgeCheckRequestResult = module.exports.AgeCheckRequestResult = class {
  constructor(args) {
    this.authUrl = null;
    this.sessionId = null;
    if (args) {
      if (args.authUrl !== undefined && args.authUrl !== null) {
        this.authUrl = args.authUrl;
      }
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.authUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AgeCheckRequestResult');
    if (this.authUrl !== null && this.authUrl !== undefined) {
      output.writeFieldBegin('authUrl', Thrift.Type.STRING, 1);
      output.writeString(this.authUrl);
      output.writeFieldEnd();
    }
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AnalyticsInfo = module.exports.AnalyticsInfo = class {
  constructor(args) {
    this.gaSamplingRate = null;
    this.tmid = null;
    if (args) {
      if (args.gaSamplingRate !== undefined && args.gaSamplingRate !== null) {
        this.gaSamplingRate = args.gaSamplingRate;
      }
      if (args.tmid !== undefined && args.tmid !== null) {
        this.tmid = args.tmid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.DOUBLE) {
          this.gaSamplingRate = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tmid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AnalyticsInfo');
    if (this.gaSamplingRate !== null && this.gaSamplingRate !== undefined) {
      output.writeFieldBegin('gaSamplingRate', Thrift.Type.DOUBLE, 1);
      output.writeDouble(this.gaSamplingRate);
      output.writeFieldEnd();
    }
    if (this.tmid !== null && this.tmid !== undefined) {
      output.writeFieldBegin('tmid', Thrift.Type.STRING, 2);
      output.writeString(this.tmid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Announcement = module.exports.Announcement = class {
  constructor(args) {
    this.index = null;
    this.forceUpdate = null;
    this.title = null;
    this.text = null;
    this.createdTime = null;
    this.pictureUrl = null;
    this.thumbnailUrl = null;
    if (args) {
      if (args.index !== undefined && args.index !== null) {
        this.index = args.index;
      }
      if (args.forceUpdate !== undefined && args.forceUpdate !== null) {
        this.forceUpdate = args.forceUpdate;
      }
      if (args.title !== undefined && args.title !== null) {
        this.title = args.title;
      }
      if (args.text !== undefined && args.text !== null) {
        this.text = args.text;
      }
      if (args.createdTime !== undefined && args.createdTime !== null) {
        this.createdTime = args.createdTime;
      }
      if (args.pictureUrl !== undefined && args.pictureUrl !== null) {
        this.pictureUrl = args.pictureUrl;
      }
      if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
        this.thumbnailUrl = args.thumbnailUrl;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.index = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.BOOL) {
          this.forceUpdate = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.title = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.text = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I64) {
          this.createdTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.STRING) {
          this.pictureUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRING) {
          this.thumbnailUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Announcement');
    if (this.index !== null && this.index !== undefined) {
      output.writeFieldBegin('index', Thrift.Type.I32, 1);
      output.writeI32(this.index);
      output.writeFieldEnd();
    }
    if (this.forceUpdate !== null && this.forceUpdate !== undefined) {
      output.writeFieldBegin('forceUpdate', Thrift.Type.BOOL, 10);
      output.writeBool(this.forceUpdate);
      output.writeFieldEnd();
    }
    if (this.title !== null && this.title !== undefined) {
      output.writeFieldBegin('title', Thrift.Type.STRING, 11);
      output.writeString(this.title);
      output.writeFieldEnd();
    }
    if (this.text !== null && this.text !== undefined) {
      output.writeFieldBegin('text', Thrift.Type.STRING, 12);
      output.writeString(this.text);
      output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
      output.writeFieldBegin('createdTime', Thrift.Type.I64, 13);
      output.writeI64(this.createdTime);
      output.writeFieldEnd();
    }
    if (this.pictureUrl !== null && this.pictureUrl !== undefined) {
      output.writeFieldBegin('pictureUrl', Thrift.Type.STRING, 14);
      output.writeString(this.pictureUrl);
      output.writeFieldEnd();
    }
    if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
      output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 15);
      output.writeString(this.thumbnailUrl);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ApprovedChannelInfo = module.exports.ApprovedChannelInfo = class {
  constructor(args) {
    this.channelInfo = null;
    this.approvedAt = null;
    if (args) {
      if (args.channelInfo !== undefined && args.channelInfo !== null) {
        this.channelInfo = new ttypes.ChannelInfo(args.channelInfo);
      }
      if (args.approvedAt !== undefined && args.approvedAt !== null) {
        this.approvedAt = args.approvedAt;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.channelInfo = new ttypes.ChannelInfo();
          this.channelInfo.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.approvedAt = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ApprovedChannelInfo');
    if (this.channelInfo !== null && this.channelInfo !== undefined) {
      output.writeFieldBegin('channelInfo', Thrift.Type.STRUCT, 1);
      this.channelInfo.write(output);
      output.writeFieldEnd();
    }
    if (this.approvedAt !== null && this.approvedAt !== undefined) {
      output.writeFieldBegin('approvedAt', Thrift.Type.I64, 2);
      output.writeI64(this.approvedAt);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ApprovedChannelInfos = module.exports.ApprovedChannelInfos = class {
  constructor(args) {
    this.approvedChannelInfos = null;
    this.revision = null;
    if (args) {
      if (args.approvedChannelInfos !== undefined && args.approvedChannelInfos !== null) {
        this.approvedChannelInfos = Thrift.copyList(args.approvedChannelInfos, [ttypes.ApprovedChannelInfo]);
      }
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.approvedChannelInfos = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = new ttypes.ApprovedChannelInfo();
            elem3.read(input);
            this.approvedChannelInfos.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ApprovedChannelInfos');
    if (this.approvedChannelInfos !== null && this.approvedChannelInfos !== undefined) {
      output.writeFieldBegin('approvedChannelInfos', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.approvedChannelInfos.length);
      for (let iter4 in this.approvedChannelInfos) {
        if (this.approvedChannelInfos.hasOwnProperty(iter4)) {
          iter4 = this.approvedChannelInfos[iter4];
          iter4.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 2);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthQrcode = module.exports.AuthQrcode = class {
  constructor(args) {
    this.qrcode = null;
    this.verifier = null;
    this.callbackUrl = null;
    if (args) {
      if (args.qrcode !== undefined && args.qrcode !== null) {
        this.qrcode = args.qrcode;
      }
      if (args.verifier !== undefined && args.verifier !== null) {
        this.verifier = args.verifier;
      }
      if (args.callbackUrl !== undefined && args.callbackUrl !== null) {
        this.callbackUrl = args.callbackUrl;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.qrcode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.verifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.callbackUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthQrcode');
    if (this.qrcode !== null && this.qrcode !== undefined) {
      output.writeFieldBegin('qrcode', Thrift.Type.STRING, 1);
      output.writeString(this.qrcode);
      output.writeFieldEnd();
    }
    if (this.verifier !== null && this.verifier !== undefined) {
      output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
      output.writeString(this.verifier);
      output.writeFieldEnd();
    }
    if (this.callbackUrl !== null && this.callbackUrl !== undefined) {
      output.writeFieldBegin('callbackUrl', Thrift.Type.STRING, 3);
      output.writeString(this.callbackUrl);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Balance = module.exports.Balance = class {
  constructor(args) {
    this.currentPointsFixedPointDecimal = null;
    if (args) {
      if (args.currentPointsFixedPointDecimal !== undefined && args.currentPointsFixedPointDecimal !== null) {
        this.currentPointsFixedPointDecimal = args.currentPointsFixedPointDecimal;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.currentPointsFixedPointDecimal = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Balance');
    if (this.currentPointsFixedPointDecimal !== null && this.currentPointsFixedPointDecimal !== undefined) {
      output.writeFieldBegin('currentPointsFixedPointDecimal', Thrift.Type.STRING, 1);
      output.writeString(this.currentPointsFixedPointDecimal);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BanPage = module.exports.BanPage = class {
  constructor(args) {
    this.url = null;
    if (args) {
      if (args.url !== undefined && args.url !== null) {
        this.url = args.url;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.url = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BanPage');
    if (this.url !== null && this.url !== undefined) {
      output.writeFieldBegin('url', Thrift.Type.STRING, 1);
      output.writeString(this.url);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BeaconBackgroundNotification = module.exports.BeaconBackgroundNotification = class {
  constructor(args) {
    this.actionInterval = null;
    this.actionAndConditions = null;
    this.actionDelay = null;
    this.actionConditions = null;
    if (args) {
      if (args.actionInterval !== undefined && args.actionInterval !== null) {
        this.actionInterval = args.actionInterval;
      }
      if (args.actionAndConditions !== undefined && args.actionAndConditions !== null) {
        this.actionAndConditions = Thrift.copyList(args.actionAndConditions, [null]);
      }
      if (args.actionDelay !== undefined && args.actionDelay !== null) {
        this.actionDelay = args.actionDelay;
      }
      if (args.actionConditions !== undefined && args.actionConditions !== null) {
        this.actionConditions = Thrift.copyList(args.actionConditions, [Thrift.copyList, null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.actionInterval = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.actionAndConditions = [];
          const _rtmp36 = input.readListBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let elem8 = null;
            elem8 = new ttypes.BeaconCondition();
            elem8.read(input);
            this.actionAndConditions.push(elem8);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.actionDelay = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.actionConditions = [];
          const _rtmp310 = input.readListBegin();
          const _size9 = _rtmp310.size || 0;
          for (let _i11 = 0; _i11 < _size9; ++_i11) {
            let elem12 = null;
            elem12 = [];
            const _rtmp314 = input.readListBegin();
            const _size13 = _rtmp314.size || 0;
            for (let _i15 = 0; _i15 < _size13; ++_i15) {
              let elem16 = null;
              elem16 = new ttypes.BeaconCondition();
              elem16.read(input);
              elem12.push(elem16);
            }
            input.readListEnd();
            this.actionConditions.push(elem12);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BeaconBackgroundNotification');
    if (this.actionInterval !== null && this.actionInterval !== undefined) {
      output.writeFieldBegin('actionInterval', Thrift.Type.I64, 1);
      output.writeI64(this.actionInterval);
      output.writeFieldEnd();
    }
    if (this.actionAndConditions !== null && this.actionAndConditions !== undefined) {
      output.writeFieldBegin('actionAndConditions', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.actionAndConditions.length);
      for (let iter17 in this.actionAndConditions) {
        if (this.actionAndConditions.hasOwnProperty(iter17)) {
          iter17 = this.actionAndConditions[iter17];
          iter17.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.actionDelay !== null && this.actionDelay !== undefined) {
      output.writeFieldBegin('actionDelay', Thrift.Type.I64, 3);
      output.writeI64(this.actionDelay);
      output.writeFieldEnd();
    }
    if (this.actionConditions !== null && this.actionConditions !== undefined) {
      output.writeFieldBegin('actionConditions', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.LIST, this.actionConditions.length);
      for (let iter18 in this.actionConditions) {
        if (this.actionConditions.hasOwnProperty(iter18)) {
          iter18 = this.actionConditions[iter18];
          output.writeListBegin(Thrift.Type.STRUCT, iter18.length);
          for (let iter19 in iter18) {
            if (iter18.hasOwnProperty(iter19)) {
              iter19 = iter18[iter19];
              iter19.write(output);
            }
          }
          output.writeListEnd();
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BeaconCondition = module.exports.BeaconCondition = class {
  constructor(args) {
    this.inFriends = null;
    this.notInFriends = null;
    this.termsAgreed = null;
    if (args) {
      if (args.inFriends !== undefined && args.inFriends !== null) {
        this.inFriends = args.inFriends;
      }
      if (args.notInFriends !== undefined && args.notInFriends !== null) {
        this.notInFriends = args.notInFriends;
      }
      if (args.termsAgreed !== undefined && args.termsAgreed !== null) {
        this.termsAgreed = args.termsAgreed;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.inFriends = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.notInFriends = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.termsAgreed = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BeaconCondition');
    if (this.inFriends !== null && this.inFriends !== undefined) {
      output.writeFieldBegin('inFriends', Thrift.Type.STRING, 1);
      output.writeString(this.inFriends);
      output.writeFieldEnd();
    }
    if (this.notInFriends !== null && this.notInFriends !== undefined) {
      output.writeFieldBegin('notInFriends', Thrift.Type.STRING, 2);
      output.writeString(this.notInFriends);
      output.writeFieldEnd();
    }
    if (this.termsAgreed !== null && this.termsAgreed !== undefined) {
      output.writeFieldBegin('termsAgreed', Thrift.Type.BOOL, 3);
      output.writeBool(this.termsAgreed);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BeaconLayerInfoAndActions = module.exports.BeaconLayerInfoAndActions = class {
  constructor(args) {
    this.pictureUrl = null;
    this.label = null;
    this.text = null;
    this.actions = null;
    this.showOrConditions = null;
    this.showConditions = null;
    this.timeToHide = null;
    if (args) {
      if (args.pictureUrl !== undefined && args.pictureUrl !== null) {
        this.pictureUrl = args.pictureUrl;
      }
      if (args.label !== undefined && args.label !== null) {
        this.label = args.label;
      }
      if (args.text !== undefined && args.text !== null) {
        this.text = args.text;
      }
      if (args.actions !== undefined && args.actions !== null) {
        this.actions = Thrift.copyList(args.actions, [null]);
      }
      if (args.showOrConditions !== undefined && args.showOrConditions !== null) {
        this.showOrConditions = Thrift.copyList(args.showOrConditions, [ttypes.BeaconCondition]);
      }
      if (args.showConditions !== undefined && args.showConditions !== null) {
        this.showConditions = Thrift.copyList(args.showConditions, [Thrift.copyList, ttypes.BeaconCondition]);
      }
      if (args.timeToHide !== undefined && args.timeToHide !== null) {
        this.timeToHide = args.timeToHide;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.pictureUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.label = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.text = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.actions = [];
          const _rtmp321 = input.readListBegin();
          const _size20 = _rtmp321.size || 0;
          for (let _i22 = 0; _i22 < _size20; ++_i22) {
            let elem23 = null;
            elem23 = input.readString();
            this.actions.push(elem23);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.showOrConditions = [];
          const _rtmp325 = input.readListBegin();
          const _size24 = _rtmp325.size || 0;
          for (let _i26 = 0; _i26 < _size24; ++_i26) {
            let elem27 = null;
            elem27 = new ttypes.BeaconCondition();
            elem27.read(input);
            this.showOrConditions.push(elem27);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.showConditions = [];
          const _rtmp329 = input.readListBegin();
          const _size28 = _rtmp329.size || 0;
          for (let _i30 = 0; _i30 < _size28; ++_i30) {
            let elem31 = null;
            elem31 = [];
            const _rtmp333 = input.readListBegin();
            const _size32 = _rtmp333.size || 0;
            for (let _i34 = 0; _i34 < _size32; ++_i34) {
              let elem35 = null;
              elem35 = new ttypes.BeaconCondition();
              elem35.read(input);
              elem31.push(elem35);
            }
            input.readListEnd();
            this.showConditions.push(elem31);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.timeToHide = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BeaconLayerInfoAndActions');
    if (this.pictureUrl !== null && this.pictureUrl !== undefined) {
      output.writeFieldBegin('pictureUrl', Thrift.Type.STRING, 1);
      output.writeString(this.pictureUrl);
      output.writeFieldEnd();
    }
    if (this.label !== null && this.label !== undefined) {
      output.writeFieldBegin('label', Thrift.Type.STRING, 2);
      output.writeString(this.label);
      output.writeFieldEnd();
    }
    if (this.text !== null && this.text !== undefined) {
      output.writeFieldBegin('text', Thrift.Type.STRING, 3);
      output.writeString(this.text);
      output.writeFieldEnd();
    }
    if (this.actions !== null && this.actions !== undefined) {
      output.writeFieldBegin('actions', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.actions.length);
      for (let iter36 in this.actions) {
        if (this.actions.hasOwnProperty(iter36)) {
          iter36 = this.actions[iter36];
          output.writeString(iter36);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.showOrConditions !== null && this.showOrConditions !== undefined) {
      output.writeFieldBegin('showOrConditions', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.STRUCT, this.showOrConditions.length);
      for (let iter37 in this.showOrConditions) {
        if (this.showOrConditions.hasOwnProperty(iter37)) {
          iter37 = this.showOrConditions[iter37];
          iter37.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.showConditions !== null && this.showConditions !== undefined) {
      output.writeFieldBegin('showConditions', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.LIST, this.showConditions.length);
      for (let iter38 in this.showConditions) {
        if (this.showConditions.hasOwnProperty(iter38)) {
          iter38 = this.showConditions[iter38];
          output.writeListBegin(Thrift.Type.STRUCT, iter38.length);
          for (let iter39 in iter38) {
            if (iter38.hasOwnProperty(iter39)) {
              iter39 = iter38[iter39];
              iter39.write(output);
            }
          }
          output.writeListEnd();
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timeToHide !== null && this.timeToHide !== undefined) {
      output.writeFieldBegin('timeToHide', Thrift.Type.I64, 7);
      output.writeI64(this.timeToHide);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BeaconQueryResponse = module.exports.BeaconQueryResponse = class {
  constructor(args) {
    this.deprecated_actionUrls = null;
    this.cacheTtl = null;
    this.touchActions = null;
    this.layerInfoAndActions = null;
    this.backgroundEnteringNotification = null;
    this.backgroundLeavingNotification = null;
    this.group = null;
    this.major = null;
    this.minor = null;
    this.effectiveRange = null;
    this.channelWhiteList = null;
    if (args) {
      if (args.deprecated_actionUrls !== undefined && args.deprecated_actionUrls !== null) {
        this.deprecated_actionUrls = Thrift.copyList(args.deprecated_actionUrls, [null]);
      }
      if (args.cacheTtl !== undefined && args.cacheTtl !== null) {
        this.cacheTtl = args.cacheTtl;
      }
      if (args.touchActions !== undefined && args.touchActions !== null) {
        this.touchActions = new ttypes.BeaconTouchActions(args.touchActions);
      }
      if (args.layerInfoAndActions !== undefined && args.layerInfoAndActions !== null) {
        this.layerInfoAndActions = new ttypes.BeaconLayerInfoAndActions(args.layerInfoAndActions);
      }
      if (args.backgroundEnteringNotification !== undefined && args.backgroundEnteringNotification !== null) {
        this.backgroundEnteringNotification = new ttypes.BeaconBackgroundNotification(args.backgroundEnteringNotification);
      }
      if (args.backgroundLeavingNotification !== undefined && args.backgroundLeavingNotification !== null) {
        this.backgroundLeavingNotification = new ttypes.BeaconBackgroundNotification(args.backgroundLeavingNotification);
      }
      if (args.group !== undefined && args.group !== null) {
        this.group = args.group;
      }
      if (args.major !== undefined && args.major !== null) {
        this.major = args.major;
      }
      if (args.minor !== undefined && args.minor !== null) {
        this.minor = args.minor;
      }
      if (args.effectiveRange !== undefined && args.effectiveRange !== null) {
        this.effectiveRange = args.effectiveRange;
      }
      if (args.channelWhiteList !== undefined && args.channelWhiteList !== null) {
        this.channelWhiteList = Thrift.copyList(args.channelWhiteList, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.deprecated_actionUrls = [];
          const _rtmp341 = input.readListBegin();
          const _size40 = _rtmp341.size || 0;
          for (let _i42 = 0; _i42 < _size40; ++_i42) {
            let elem43 = null;
            elem43 = input.readString();
            this.deprecated_actionUrls.push(elem43);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.cacheTtl = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.touchActions = new ttypes.BeaconTouchActions();
          this.touchActions.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.layerInfoAndActions = new ttypes.BeaconLayerInfoAndActions();
          this.layerInfoAndActions.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.backgroundEnteringNotification = new ttypes.BeaconBackgroundNotification();
          this.backgroundEnteringNotification.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRUCT) {
          this.backgroundLeavingNotification = new ttypes.BeaconBackgroundNotification();
          this.backgroundLeavingNotification.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.group = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.major = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.minor = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.DOUBLE) {
          this.effectiveRange = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.LIST) {
          this.channelWhiteList = [];
          const _rtmp345 = input.readListBegin();
          const _size44 = _rtmp345.size || 0;
          for (let _i46 = 0; _i46 < _size44; ++_i46) {
            let elem47 = null;
            elem47 = input.readString();
            this.channelWhiteList.push(elem47);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BeaconQueryResponse');
    if (this.deprecated_actionUrls !== null && this.deprecated_actionUrls !== undefined) {
      output.writeFieldBegin('deprecated_actionUrls', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.deprecated_actionUrls.length);
      for (let iter48 in this.deprecated_actionUrls) {
        if (this.deprecated_actionUrls.hasOwnProperty(iter48)) {
          iter48 = this.deprecated_actionUrls[iter48];
          output.writeString(iter48);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.cacheTtl !== null && this.cacheTtl !== undefined) {
      output.writeFieldBegin('cacheTtl', Thrift.Type.I64, 3);
      output.writeI64(this.cacheTtl);
      output.writeFieldEnd();
    }
    if (this.touchActions !== null && this.touchActions !== undefined) {
      output.writeFieldBegin('touchActions', Thrift.Type.STRUCT, 4);
      this.touchActions.write(output);
      output.writeFieldEnd();
    }
    if (this.layerInfoAndActions !== null && this.layerInfoAndActions !== undefined) {
      output.writeFieldBegin('layerInfoAndActions', Thrift.Type.STRUCT, 5);
      this.layerInfoAndActions.write(output);
      output.writeFieldEnd();
    }
    if (this.backgroundEnteringNotification !== null && this.backgroundEnteringNotification !== undefined) {
      output.writeFieldBegin('backgroundEnteringNotification', Thrift.Type.STRUCT, 6);
      this.backgroundEnteringNotification.write(output);
      output.writeFieldEnd();
    }
    if (this.backgroundLeavingNotification !== null && this.backgroundLeavingNotification !== undefined) {
      output.writeFieldBegin('backgroundLeavingNotification', Thrift.Type.STRUCT, 7);
      this.backgroundLeavingNotification.write(output);
      output.writeFieldEnd();
    }
    if (this.group !== null && this.group !== undefined) {
      output.writeFieldBegin('group', Thrift.Type.STRING, 8);
      output.writeString(this.group);
      output.writeFieldEnd();
    }
    if (this.major !== null && this.major !== undefined) {
      output.writeFieldBegin('major', Thrift.Type.STRING, 9);
      output.writeString(this.major);
      output.writeFieldEnd();
    }
    if (this.minor !== null && this.minor !== undefined) {
      output.writeFieldBegin('minor', Thrift.Type.STRING, 10);
      output.writeString(this.minor);
      output.writeFieldEnd();
    }
    if (this.effectiveRange !== null && this.effectiveRange !== undefined) {
      output.writeFieldBegin('effectiveRange', Thrift.Type.DOUBLE, 11);
      output.writeDouble(this.effectiveRange);
      output.writeFieldEnd();
    }
    if (this.channelWhiteList !== null && this.channelWhiteList !== undefined) {
      output.writeFieldBegin('channelWhiteList', Thrift.Type.LIST, 12);
      output.writeListBegin(Thrift.Type.STRING, this.channelWhiteList.length);
      for (let iter49 in this.channelWhiteList) {
        if (this.channelWhiteList.hasOwnProperty(iter49)) {
          iter49 = this.channelWhiteList[iter49];
          output.writeString(iter49);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BeaconTouchActions = module.exports.BeaconTouchActions = class {
  constructor(args) {
    this.actions = null;
    if (args) {
      if (args.actions !== undefined && args.actions !== null) {
        this.actions = Thrift.copyList(args.actions, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.actions = [];
          const _rtmp351 = input.readListBegin();
          const _size50 = _rtmp351.size || 0;
          for (let _i52 = 0; _i52 < _size50; ++_i52) {
            let elem53 = null;
            elem53 = input.readString();
            this.actions.push(elem53);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BeaconTouchActions');
    if (this.actions !== null && this.actions !== undefined) {
      output.writeFieldBegin('actions', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.actions.length);
      for (let iter54 in this.actions) {
        if (this.actions.hasOwnProperty(iter54)) {
          iter54 = this.actions[iter54];
          output.writeString(iter54);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BotUseInfo = module.exports.BotUseInfo = class {
  constructor(args) {
    this.botUseAgreementAccepted = null;
    this.botInFriends = null;
    this.primaryApplication = null;
    this.locale = null;
    if (args) {
      if (args.botUseAgreementAccepted !== undefined && args.botUseAgreementAccepted !== null) {
        this.botUseAgreementAccepted = args.botUseAgreementAccepted;
      }
      if (args.botInFriends !== undefined && args.botInFriends !== null) {
        this.botInFriends = args.botInFriends;
      }
      if (args.primaryApplication !== undefined && args.primaryApplication !== null) {
        this.primaryApplication = args.primaryApplication;
      }
      if (args.locale !== undefined && args.locale !== null) {
        this.locale = args.locale;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.botUseAgreementAccepted = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.botInFriends = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.primaryApplication = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.locale = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BotUseInfo');
    if (this.botUseAgreementAccepted !== null && this.botUseAgreementAccepted !== undefined) {
      output.writeFieldBegin('botUseAgreementAccepted', Thrift.Type.BOOL, 1);
      output.writeBool(this.botUseAgreementAccepted);
      output.writeFieldEnd();
    }
    if (this.botInFriends !== null && this.botInFriends !== undefined) {
      output.writeFieldBegin('botInFriends', Thrift.Type.BOOL, 2);
      output.writeBool(this.botInFriends);
      output.writeFieldEnd();
    }
    if (this.primaryApplication !== null && this.primaryApplication !== undefined) {
      output.writeFieldBegin('primaryApplication', Thrift.Type.STRING, 3);
      output.writeString(this.primaryApplication);
      output.writeFieldEnd();
    }
    if (this.locale !== null && this.locale !== undefined) {
      output.writeFieldBegin('locale', Thrift.Type.STRING, 4);
      output.writeString(this.locale);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyBanner = module.exports.BuddyBanner = class {
  constructor(args) {
    this.buddyBannerLinkType = null;
    this.buddyBannerLink = null;
    this.buddyBannerImageUrl = null;
    this.width = null;
    this.height = null;
    this.bannerId = null;
    if (args) {
      if (args.buddyBannerLinkType !== undefined && args.buddyBannerLinkType !== null) {
        this.buddyBannerLinkType = args.buddyBannerLinkType;
      }
      if (args.buddyBannerLink !== undefined && args.buddyBannerLink !== null) {
        this.buddyBannerLink = args.buddyBannerLink;
      }
      if (args.buddyBannerImageUrl !== undefined && args.buddyBannerImageUrl !== null) {
        this.buddyBannerImageUrl = args.buddyBannerImageUrl;
      }
      if (args.width !== undefined && args.width !== null) {
        this.width = args.width;
      }
      if (args.height !== undefined && args.height !== null) {
        this.height = args.height;
      }
      if (args.bannerId !== undefined && args.bannerId !== null) {
        this.bannerId = args.bannerId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.buddyBannerLinkType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.buddyBannerLink = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.buddyBannerImageUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.width = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.height = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.bannerId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyBanner');
    if (this.buddyBannerLinkType !== null && this.buddyBannerLinkType !== undefined) {
      output.writeFieldBegin('buddyBannerLinkType', Thrift.Type.I32, 1);
      output.writeI32(this.buddyBannerLinkType);
      output.writeFieldEnd();
    }
    if (this.buddyBannerLink !== null && this.buddyBannerLink !== undefined) {
      output.writeFieldBegin('buddyBannerLink', Thrift.Type.STRING, 2);
      output.writeString(this.buddyBannerLink);
      output.writeFieldEnd();
    }
    if (this.buddyBannerImageUrl !== null && this.buddyBannerImageUrl !== undefined) {
      output.writeFieldBegin('buddyBannerImageUrl', Thrift.Type.STRING, 3);
      output.writeString(this.buddyBannerImageUrl);
      output.writeFieldEnd();
    }
    if (this.width !== null && this.width !== undefined) {
      output.writeFieldBegin('width', Thrift.Type.I32, 4);
      output.writeI32(this.width);
      output.writeFieldEnd();
    }
    if (this.height !== null && this.height !== undefined) {
      output.writeFieldBegin('height', Thrift.Type.I32, 5);
      output.writeI32(this.height);
      output.writeFieldEnd();
    }
    if (this.bannerId !== null && this.bannerId !== undefined) {
      output.writeFieldBegin('bannerId', Thrift.Type.I64, 6);
      output.writeI64(this.bannerId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyCategoryEntry = module.exports.BuddyCategoryEntry = class {
  constructor(args) {
    this.classification = null;
    this.displayName = null;
    this.totalBuddyCount = null;
    if (args) {
      if (args.classification !== undefined && args.classification !== null) {
        this.classification = args.classification;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.totalBuddyCount !== undefined && args.totalBuddyCount !== null) {
        this.totalBuddyCount = args.totalBuddyCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.classification = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.totalBuddyCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyCategoryEntry');
    if (this.classification !== null && this.classification !== undefined) {
      output.writeFieldBegin('classification', Thrift.Type.STRING, 1);
      output.writeString(this.classification);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.totalBuddyCount !== null && this.totalBuddyCount !== undefined) {
      output.writeFieldBegin('totalBuddyCount', Thrift.Type.I32, 3);
      output.writeI32(this.totalBuddyCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyCategoryView = module.exports.BuddyCategoryView = class {
  constructor(args) {
    this.categoryEntries = null;
    if (args) {
      if (args.categoryEntries !== undefined && args.categoryEntries !== null) {
        this.categoryEntries = Thrift.copyList(args.categoryEntries, [ttypes.BuddyCategoryEntry]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.categoryEntries = [];
          const _rtmp356 = input.readListBegin();
          const _size55 = _rtmp356.size || 0;
          for (let _i57 = 0; _i57 < _size55; ++_i57) {
            let elem58 = null;
            elem58 = new ttypes.BuddyCategoryEntry();
            elem58.read(input);
            this.categoryEntries.push(elem58);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyCategoryView');
    if (this.categoryEntries !== null && this.categoryEntries !== undefined) {
      output.writeFieldBegin('categoryEntries', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.categoryEntries.length);
      for (let iter59 in this.categoryEntries) {
        if (this.categoryEntries.hasOwnProperty(iter59)) {
          iter59 = this.categoryEntries[iter59];
          iter59.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyChatBar = module.exports.BuddyChatBar = class {
  constructor(args) {
    this.barItems = null;
    if (args) {
      if (args.barItems !== undefined && args.barItems !== null) {
        this.barItems = Thrift.copyList(args.barItems, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.barItems = [];
          const _rtmp361 = input.readListBegin();
          const _size60 = _rtmp361.size || 0;
          for (let _i62 = 0; _i62 < _size60; ++_i62) {
            let elem63 = null;
            elem63 = new ttypes.BuddyChatBarItem();
            elem63.read(input);
            this.barItems.push(elem63);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyChatBar');
    if (this.barItems !== null && this.barItems !== undefined) {
      output.writeFieldBegin('barItems', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.barItems.length);
      for (let iter64 in this.barItems) {
        if (this.barItems.hasOwnProperty(iter64)) {
          iter64 = this.barItems[iter64];
          iter64.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyChatBarItem = module.exports.BuddyChatBarItem = class {
  constructor(args) {
    this.rich = null;
    this.widgetList = null;
    this.web = null;
    if (args) {
      if (args.rich !== undefined && args.rich !== null) {
        this.rich = new ttypes.BuddyRichMenuChatBarItem(args.rich);
      }
      if (args.widgetList !== undefined && args.widgetList !== null) {
        this.widgetList = new ttypes.BuddyWidgetListCharBarItem(args.widgetList);
      }
      if (args.web !== undefined && args.web !== null) {
        this.web = new ttypes.BuddyWebChatBarItem(args.web);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.rich = new ttypes.BuddyRichMenuChatBarItem();
          this.rich.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.widgetList = new ttypes.BuddyWidgetListCharBarItem();
          this.widgetList.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.web = new ttypes.BuddyWebChatBarItem();
          this.web.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyChatBarItem');
    if (this.rich !== null && this.rich !== undefined) {
      output.writeFieldBegin('rich', Thrift.Type.STRUCT, 1);
      this.rich.write(output);
      output.writeFieldEnd();
    }
    if (this.widgetList !== null && this.widgetList !== undefined) {
      output.writeFieldBegin('widgetList', Thrift.Type.STRUCT, 2);
      this.widgetList.write(output);
      output.writeFieldEnd();
    }
    if (this.web !== null && this.web !== undefined) {
      output.writeFieldBegin('web', Thrift.Type.STRUCT, 3);
      this.web.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyCollection = module.exports.BuddyCollection = class {
  constructor(args) {
    this.code = null;
    this.displayName = null;
    this.totalBuddyCount = null;
    this.entries = null;
    this.horizontal = null;
    this.type = null;
    if (args) {
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.totalBuddyCount !== undefined && args.totalBuddyCount !== null) {
        this.totalBuddyCount = args.totalBuddyCount;
      }
      if (args.entries !== undefined && args.entries !== null) {
        this.entries = Thrift.copyList(args.entries, [null]);
      }
      if (args.horizontal !== undefined && args.horizontal !== null) {
        this.horizontal = args.horizontal;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.code = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.totalBuddyCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.entries = [];
          const _rtmp366 = input.readListBegin();
          const _size65 = _rtmp366.size || 0;
          for (let _i67 = 0; _i67 < _size65; ++_i67) {
            let elem68 = null;
            elem68 = new ttypes.BuddyCollectionEntry();
            elem68.read(input);
            this.entries.push(elem68);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.horizontal = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyCollection');
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.I32, 1);
      output.writeI32(this.code);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.totalBuddyCount !== null && this.totalBuddyCount !== undefined) {
      output.writeFieldBegin('totalBuddyCount', Thrift.Type.I32, 3);
      output.writeI32(this.totalBuddyCount);
      output.writeFieldEnd();
    }
    if (this.entries !== null && this.entries !== undefined) {
      output.writeFieldBegin('entries', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.entries.length);
      for (let iter69 in this.entries) {
        if (this.entries.hasOwnProperty(iter69)) {
          iter69 = this.entries[iter69];
          iter69.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.horizontal !== null && this.horizontal !== undefined) {
      output.writeFieldBegin('horizontal', Thrift.Type.BOOL, 5);
      output.writeBool(this.horizontal);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 6);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyCollectionEntry = module.exports.BuddyCollectionEntry = class {
  constructor(args) {
    this.contact = null;
    this.onAir = null;
    this.asNew = null;
    if (args) {
      if (args.contact !== undefined && args.contact !== null) {
        this.contact = new ttypes.Contact(args.contact);
      }
      if (args.onAir !== undefined && args.onAir !== null) {
        this.onAir = args.onAir;
      }
      if (args.asNew !== undefined && args.asNew !== null) {
        this.asNew = args.asNew;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.contact = new ttypes.Contact();
          this.contact.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.onAir = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.asNew = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyCollectionEntry');
    if (this.contact !== null && this.contact !== undefined) {
      output.writeFieldBegin('contact', Thrift.Type.STRUCT, 1);
      this.contact.write(output);
      output.writeFieldEnd();
    }
    if (this.onAir !== null && this.onAir !== undefined) {
      output.writeFieldBegin('onAir', Thrift.Type.BOOL, 2);
      output.writeBool(this.onAir);
      output.writeFieldEnd();
    }
    if (this.asNew !== null && this.asNew !== undefined) {
      output.writeFieldBegin('asNew', Thrift.Type.BOOL, 3);
      output.writeBool(this.asNew);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyDetail = module.exports.BuddyDetail = class {
  constructor(args) {
    this.mid = null;
    this.memberCount = null;
    this.onAir = null;
    this.businessAccount = null;
    this.addable = null;
    this.acceptableContentTypes = null;
    this.capableMyhome = null;
    this.freePhoneCallable = null;
    this.phoneNumberToDial = null;
    this.needPermissionApproval = null;
    this.channelId = null;
    this.channelProviderName = null;
    this.iconType = null;
    this.botType = null;
    this.showRichMenu = null;
    this.richMenuRevision = null;
    this.onAirLabel = null;
    this.useTheme = null;
    this.themeId = null;
    this.useBar = null;
    this.barRevision = null;
    this.useBackground = null;
    this.backgroundId = null;
    this.statusBarEnabled = null;
    this.statusBarRevision = null;
    this.capableChat = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.memberCount !== undefined && args.memberCount !== null) {
        this.memberCount = args.memberCount;
      }
      if (args.onAir !== undefined && args.onAir !== null) {
        this.onAir = args.onAir;
      }
      if (args.businessAccount !== undefined && args.businessAccount !== null) {
        this.businessAccount = args.businessAccount;
      }
      if (args.addable !== undefined && args.addable !== null) {
        this.addable = args.addable;
      }
      if (args.acceptableContentTypes !== undefined && args.acceptableContentTypes !== null) {
        this.acceptableContentTypes = Thrift.copyList(args.acceptableContentTypes, [null]);
      }
      if (args.capableMyhome !== undefined && args.capableMyhome !== null) {
        this.capableMyhome = args.capableMyhome;
      }
      if (args.freePhoneCallable !== undefined && args.freePhoneCallable !== null) {
        this.freePhoneCallable = args.freePhoneCallable;
      }
      if (args.phoneNumberToDial !== undefined && args.phoneNumberToDial !== null) {
        this.phoneNumberToDial = args.phoneNumberToDial;
      }
      if (args.needPermissionApproval !== undefined && args.needPermissionApproval !== null) {
        this.needPermissionApproval = args.needPermissionApproval;
      }
      if (args.channelId !== undefined && args.channelId !== null) {
        this.channelId = args.channelId;
      }
      if (args.channelProviderName !== undefined && args.channelProviderName !== null) {
        this.channelProviderName = args.channelProviderName;
      }
      if (args.iconType !== undefined && args.iconType !== null) {
        this.iconType = args.iconType;
      }
      if (args.botType !== undefined && args.botType !== null) {
        this.botType = args.botType;
      }
      if (args.showRichMenu !== undefined && args.showRichMenu !== null) {
        this.showRichMenu = args.showRichMenu;
      }
      if (args.richMenuRevision !== undefined && args.richMenuRevision !== null) {
        this.richMenuRevision = args.richMenuRevision;
      }
      if (args.onAirLabel !== undefined && args.onAirLabel !== null) {
        this.onAirLabel = args.onAirLabel;
      }
      if (args.useTheme !== undefined && args.useTheme !== null) {
        this.useTheme = args.useTheme;
      }
      if (args.themeId !== undefined && args.themeId !== null) {
        this.themeId = args.themeId;
      }
      if (args.useBar !== undefined && args.useBar !== null) {
        this.useBar = args.useBar;
      }
      if (args.barRevision !== undefined && args.barRevision !== null) {
        this.barRevision = args.barRevision;
      }
      if (args.useBackground !== undefined && args.useBackground !== null) {
        this.useBackground = args.useBackground;
      }
      if (args.backgroundId !== undefined && args.backgroundId !== null) {
        this.backgroundId = args.backgroundId;
      }
      if (args.statusBarEnabled !== undefined && args.statusBarEnabled !== null) {
        this.statusBarEnabled = args.statusBarEnabled;
      }
      if (args.statusBarRevision !== undefined && args.statusBarRevision !== null) {
        this.statusBarRevision = args.statusBarRevision;
      }
      if (args.capableChat !== undefined && args.capableChat !== null) {
        this.capableChat = args.capableChat;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.memberCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.onAir = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.businessAccount = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.addable = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.SET) {
          this.acceptableContentTypes = [];
          const _rtmp371 = input.readSetBegin();
          const _size70 = _rtmp371.size || 0;
          for (let _i72 = 0; _i72 < _size70; ++_i72) {
            let elem73 = null;
            elem73 = input.readI32();
            this.acceptableContentTypes.push(elem73);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.capableMyhome = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.freePhoneCallable = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.phoneNumberToDial = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.BOOL) {
          this.needPermissionApproval = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.channelId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.channelProviderName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I32) {
          this.iconType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I32) {
          this.botType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.BOOL) {
          this.showRichMenu = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.I64) {
          this.richMenuRevision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.I32) {
          this.onAirLabel = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.BOOL) {
          this.useTheme = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.STRING) {
          this.themeId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.BOOL) {
          this.useBar = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.I64) {
          this.barRevision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.BOOL) {
          this.useBackground = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.STRING) {
          this.backgroundId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.BOOL) {
          this.statusBarEnabled = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.I64) {
          this.statusBarRevision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.BOOL) {
          this.capableChat = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyDetail');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.memberCount !== null && this.memberCount !== undefined) {
      output.writeFieldBegin('memberCount', Thrift.Type.I64, 2);
      output.writeI64(this.memberCount);
      output.writeFieldEnd();
    }
    if (this.onAir !== null && this.onAir !== undefined) {
      output.writeFieldBegin('onAir', Thrift.Type.BOOL, 3);
      output.writeBool(this.onAir);
      output.writeFieldEnd();
    }
    if (this.businessAccount !== null && this.businessAccount !== undefined) {
      output.writeFieldBegin('businessAccount', Thrift.Type.BOOL, 4);
      output.writeBool(this.businessAccount);
      output.writeFieldEnd();
    }
    if (this.addable !== null && this.addable !== undefined) {
      output.writeFieldBegin('addable', Thrift.Type.BOOL, 5);
      output.writeBool(this.addable);
      output.writeFieldEnd();
    }
    if (this.acceptableContentTypes !== null && this.acceptableContentTypes !== undefined) {
      output.writeFieldBegin('acceptableContentTypes', Thrift.Type.SET, 6);
      output.writeSetBegin(Thrift.Type.I32, this.acceptableContentTypes.length);
      for (let iter74 in this.acceptableContentTypes) {
        if (this.acceptableContentTypes.hasOwnProperty(iter74)) {
          iter74 = this.acceptableContentTypes[iter74];
          output.writeI32(iter74);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.capableMyhome !== null && this.capableMyhome !== undefined) {
      output.writeFieldBegin('capableMyhome', Thrift.Type.BOOL, 7);
      output.writeBool(this.capableMyhome);
      output.writeFieldEnd();
    }
    if (this.freePhoneCallable !== null && this.freePhoneCallable !== undefined) {
      output.writeFieldBegin('freePhoneCallable', Thrift.Type.BOOL, 8);
      output.writeBool(this.freePhoneCallable);
      output.writeFieldEnd();
    }
    if (this.phoneNumberToDial !== null && this.phoneNumberToDial !== undefined) {
      output.writeFieldBegin('phoneNumberToDial', Thrift.Type.STRING, 9);
      output.writeString(this.phoneNumberToDial);
      output.writeFieldEnd();
    }
    if (this.needPermissionApproval !== null && this.needPermissionApproval !== undefined) {
      output.writeFieldBegin('needPermissionApproval', Thrift.Type.BOOL, 10);
      output.writeBool(this.needPermissionApproval);
      output.writeFieldEnd();
    }
    if (this.channelId !== null && this.channelId !== undefined) {
      output.writeFieldBegin('channelId', Thrift.Type.I32, 11);
      output.writeI32(this.channelId);
      output.writeFieldEnd();
    }
    if (this.channelProviderName !== null && this.channelProviderName !== undefined) {
      output.writeFieldBegin('channelProviderName', Thrift.Type.STRING, 12);
      output.writeString(this.channelProviderName);
      output.writeFieldEnd();
    }
    if (this.iconType !== null && this.iconType !== undefined) {
      output.writeFieldBegin('iconType', Thrift.Type.I32, 13);
      output.writeI32(this.iconType);
      output.writeFieldEnd();
    }
    if (this.botType !== null && this.botType !== undefined) {
      output.writeFieldBegin('botType', Thrift.Type.I32, 14);
      output.writeI32(this.botType);
      output.writeFieldEnd();
    }
    if (this.showRichMenu !== null && this.showRichMenu !== undefined) {
      output.writeFieldBegin('showRichMenu', Thrift.Type.BOOL, 15);
      output.writeBool(this.showRichMenu);
      output.writeFieldEnd();
    }
    if (this.richMenuRevision !== null && this.richMenuRevision !== undefined) {
      output.writeFieldBegin('richMenuRevision', Thrift.Type.I64, 16);
      output.writeI64(this.richMenuRevision);
      output.writeFieldEnd();
    }
    if (this.onAirLabel !== null && this.onAirLabel !== undefined) {
      output.writeFieldBegin('onAirLabel', Thrift.Type.I32, 17);
      output.writeI32(this.onAirLabel);
      output.writeFieldEnd();
    }
    if (this.useTheme !== null && this.useTheme !== undefined) {
      output.writeFieldBegin('useTheme', Thrift.Type.BOOL, 18);
      output.writeBool(this.useTheme);
      output.writeFieldEnd();
    }
    if (this.themeId !== null && this.themeId !== undefined) {
      output.writeFieldBegin('themeId', Thrift.Type.STRING, 19);
      output.writeString(this.themeId);
      output.writeFieldEnd();
    }
    if (this.useBar !== null && this.useBar !== undefined) {
      output.writeFieldBegin('useBar', Thrift.Type.BOOL, 20);
      output.writeBool(this.useBar);
      output.writeFieldEnd();
    }
    if (this.barRevision !== null && this.barRevision !== undefined) {
      output.writeFieldBegin('barRevision', Thrift.Type.I64, 21);
      output.writeI64(this.barRevision);
      output.writeFieldEnd();
    }
    if (this.useBackground !== null && this.useBackground !== undefined) {
      output.writeFieldBegin('useBackground', Thrift.Type.BOOL, 22);
      output.writeBool(this.useBackground);
      output.writeFieldEnd();
    }
    if (this.backgroundId !== null && this.backgroundId !== undefined) {
      output.writeFieldBegin('backgroundId', Thrift.Type.STRING, 23);
      output.writeString(this.backgroundId);
      output.writeFieldEnd();
    }
    if (this.statusBarEnabled !== null && this.statusBarEnabled !== undefined) {
      output.writeFieldBegin('statusBarEnabled', Thrift.Type.BOOL, 24);
      output.writeBool(this.statusBarEnabled);
      output.writeFieldEnd();
    }
    if (this.statusBarRevision !== null && this.statusBarRevision !== undefined) {
      output.writeFieldBegin('statusBarRevision', Thrift.Type.I64, 25);
      output.writeI64(this.statusBarRevision);
      output.writeFieldEnd();
    }
    if (this.capableChat !== null && this.capableChat !== undefined) {
      output.writeFieldBegin('capableChat', Thrift.Type.BOOL, 26);
      output.writeBool(this.capableChat);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyList = module.exports.BuddyList = class {
  constructor(args) {
    this.classification = null;
    this.displayName = null;
    this.totalBuddyCount = null;
    this.popularContacts = null;
    if (args) {
      if (args.classification !== undefined && args.classification !== null) {
        this.classification = args.classification;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.totalBuddyCount !== undefined && args.totalBuddyCount !== null) {
        this.totalBuddyCount = args.totalBuddyCount;
      }
      if (args.popularContacts !== undefined && args.popularContacts !== null) {
        this.popularContacts = Thrift.copyList(args.popularContacts, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.classification = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.totalBuddyCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.popularContacts = [];
          const _rtmp376 = input.readListBegin();
          const _size75 = _rtmp376.size || 0;
          for (let _i77 = 0; _i77 < _size75; ++_i77) {
            let elem78 = null;
            elem78 = new ttypes.Contact();
            elem78.read(input);
            this.popularContacts.push(elem78);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyList');
    if (this.classification !== null && this.classification !== undefined) {
      output.writeFieldBegin('classification', Thrift.Type.STRING, 1);
      output.writeString(this.classification);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.totalBuddyCount !== null && this.totalBuddyCount !== undefined) {
      output.writeFieldBegin('totalBuddyCount', Thrift.Type.I32, 3);
      output.writeI32(this.totalBuddyCount);
      output.writeFieldEnd();
    }
    if (this.popularContacts !== null && this.popularContacts !== undefined) {
      output.writeFieldBegin('popularContacts', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.popularContacts.length);
      for (let iter79 in this.popularContacts) {
        if (this.popularContacts.hasOwnProperty(iter79)) {
          iter79 = this.popularContacts[iter79];
          iter79.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyMessageRequest = module.exports.BuddyMessageRequest = class {
  constructor(args) {
    this.contentType = null;
    this.text = null;
    this.location = null;
    this.content = null;
    this.contentMetadata = null;
    this.sourceContentId = null;
    this.usePermanent = null;
    this.toMid = null;
    if (args) {
      if (args.contentType !== undefined && args.contentType !== null) {
        this.contentType = args.contentType;
      }
      if (args.text !== undefined && args.text !== null) {
        this.text = args.text;
      }
      if (args.location !== undefined && args.location !== null) {
        this.location = new ttypes.Location(args.location);
      }
      if (args.content !== undefined && args.content !== null) {
        this.content = args.content;
      }
      if (args.contentMetadata !== undefined && args.contentMetadata !== null) {
        this.contentMetadata = Thrift.copyMap(args.contentMetadata, [null]);
      }
      if (args.sourceContentId !== undefined && args.sourceContentId !== null) {
        this.sourceContentId = args.sourceContentId;
      }
      if (args.usePermanent !== undefined && args.usePermanent !== null) {
        this.usePermanent = args.usePermanent;
      }
      if (args.toMid !== undefined && args.toMid !== null) {
        this.toMid = args.toMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.contentType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.text = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.location = new ttypes.Location();
          this.location.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.content = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.MAP) {
          this.contentMetadata = {};
          const _rtmp381 = input.readMapBegin();
          const _size80 = _rtmp381.size || 0;
          for (let _i82 = 0; _i82 < _size80; ++_i82) {
            let key83 = null;
            let val84 = null;
            key83 = input.readString();
            val84 = input.readString();
            this.contentMetadata[key83] = val84;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.sourceContentId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.usePermanent = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.toMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyMessageRequest');
    if (this.contentType !== null && this.contentType !== undefined) {
      output.writeFieldBegin('contentType', Thrift.Type.I32, 1);
      output.writeI32(this.contentType);
      output.writeFieldEnd();
    }
    if (this.text !== null && this.text !== undefined) {
      output.writeFieldBegin('text', Thrift.Type.STRING, 2);
      output.writeString(this.text);
      output.writeFieldEnd();
    }
    if (this.location !== null && this.location !== undefined) {
      output.writeFieldBegin('location', Thrift.Type.STRUCT, 3);
      this.location.write(output);
      output.writeFieldEnd();
    }
    if (this.content !== null && this.content !== undefined) {
      output.writeFieldBegin('content', Thrift.Type.STRING, 4);
      output.writeBinary(this.content);
      output.writeFieldEnd();
    }
    if (this.contentMetadata !== null && this.contentMetadata !== undefined) {
      output.writeFieldBegin('contentMetadata', Thrift.Type.MAP, 5);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.contentMetadata));
      for (let kiter85 in this.contentMetadata) {
        if (this.contentMetadata.hasOwnProperty(kiter85)) {
          let viter86 = this.contentMetadata[kiter85];
          output.writeString(kiter85);
          output.writeString(viter86);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.sourceContentId !== null && this.sourceContentId !== undefined) {
      output.writeFieldBegin('sourceContentId', Thrift.Type.STRING, 6);
      output.writeString(this.sourceContentId);
      output.writeFieldEnd();
    }
    if (this.usePermanent !== null && this.usePermanent !== undefined) {
      output.writeFieldBegin('usePermanent', Thrift.Type.BOOL, 7);
      output.writeBool(this.usePermanent);
      output.writeFieldEnd();
    }
    if (this.toMid !== null && this.toMid !== undefined) {
      output.writeFieldBegin('toMid', Thrift.Type.STRING, 8);
      output.writeString(this.toMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyNewsEntry = module.exports.BuddyNewsEntry = class {
  constructor(args) {
    this.banner = null;
    this.contact = null;
    this.memberCount = null;
    this.subtitle = null;
    this.releasedTime = null;
    this.newsId = null;
    if (args) {
      if (args.banner !== undefined && args.banner !== null) {
        this.banner = new ttypes.BuddyBanner(args.banner);
      }
      if (args.contact !== undefined && args.contact !== null) {
        this.contact = new ttypes.Contact(args.contact);
      }
      if (args.memberCount !== undefined && args.memberCount !== null) {
        this.memberCount = args.memberCount;
      }
      if (args.subtitle !== undefined && args.subtitle !== null) {
        this.subtitle = args.subtitle;
      }
      if (args.releasedTime !== undefined && args.releasedTime !== null) {
        this.releasedTime = args.releasedTime;
      }
      if (args.newsId !== undefined && args.newsId !== null) {
        this.newsId = args.newsId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.banner = new ttypes.BuddyBanner();
          this.banner.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.contact = new ttypes.Contact();
          this.contact.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.memberCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.subtitle = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.releasedTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.newsId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyNewsEntry');
    if (this.banner !== null && this.banner !== undefined) {
      output.writeFieldBegin('banner', Thrift.Type.STRUCT, 1);
      this.banner.write(output);
      output.writeFieldEnd();
    }
    if (this.contact !== null && this.contact !== undefined) {
      output.writeFieldBegin('contact', Thrift.Type.STRUCT, 2);
      this.contact.write(output);
      output.writeFieldEnd();
    }
    if (this.memberCount !== null && this.memberCount !== undefined) {
      output.writeFieldBegin('memberCount', Thrift.Type.I64, 3);
      output.writeI64(this.memberCount);
      output.writeFieldEnd();
    }
    if (this.subtitle !== null && this.subtitle !== undefined) {
      output.writeFieldBegin('subtitle', Thrift.Type.STRING, 4);
      output.writeString(this.subtitle);
      output.writeFieldEnd();
    }
    if (this.releasedTime !== null && this.releasedTime !== undefined) {
      output.writeFieldBegin('releasedTime', Thrift.Type.I64, 5);
      output.writeI64(this.releasedTime);
      output.writeFieldEnd();
    }
    if (this.newsId !== null && this.newsId !== undefined) {
      output.writeFieldBegin('newsId', Thrift.Type.I64, 6);
      output.writeI64(this.newsId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyNewsView = module.exports.BuddyNewsView = class {
  constructor(args) {
    this.hasNext = null;
    this.newsEntries = null;
    if (args) {
      if (args.hasNext !== undefined && args.hasNext !== null) {
        this.hasNext = args.hasNext;
      }
      if (args.newsEntries !== undefined && args.newsEntries !== null) {
        this.newsEntries = Thrift.copyList(args.newsEntries, [ttypes.BuddyNewsEntry]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.hasNext = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.newsEntries = [];
          const _rtmp388 = input.readListBegin();
          const _size87 = _rtmp388.size || 0;
          for (let _i89 = 0; _i89 < _size87; ++_i89) {
            let elem90 = null;
            elem90 = new ttypes.BuddyNewsEntry();
            elem90.read(input);
            this.newsEntries.push(elem90);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyNewsView');
    if (this.hasNext !== null && this.hasNext !== undefined) {
      output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 1);
      output.writeBool(this.hasNext);
      output.writeFieldEnd();
    }
    if (this.newsEntries !== null && this.newsEntries !== undefined) {
      output.writeFieldBegin('newsEntries', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.newsEntries.length);
      for (let iter91 in this.newsEntries) {
        if (this.newsEntries.hasOwnProperty(iter91)) {
          iter91 = this.newsEntries[iter91];
          iter91.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyOnAir = module.exports.BuddyOnAir = class {
  constructor(args) {
    this.mid = null;
    this.freshnessLifetime = null;
    this.onAirId = null;
    this.onAir = null;
    this.text = null;
    this.viewerCount = null;
    this.targetCount = null;
    this.livePlayTime = null;
    this.screenAspectRate = null;
    this.onAirType = null;
    this.onAirUrls = null;
    this.aspectRatioOfSource = null;
    this.useFadingOut = null;
    this.fadingOutIn = null;
    this.urlAfterFadingOut = null;
    this.labelAfterFadingOut = null;
    this.useLowerBanner = null;
    this.lowerBannerUrl = null;
    this.lowerBannerLabel = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.freshnessLifetime !== undefined && args.freshnessLifetime !== null) {
        this.freshnessLifetime = args.freshnessLifetime;
      }
      if (args.onAirId !== undefined && args.onAirId !== null) {
        this.onAirId = args.onAirId;
      }
      if (args.onAir !== undefined && args.onAir !== null) {
        this.onAir = args.onAir;
      }
      if (args.text !== undefined && args.text !== null) {
        this.text = args.text;
      }
      if (args.viewerCount !== undefined && args.viewerCount !== null) {
        this.viewerCount = args.viewerCount;
      }
      if (args.targetCount !== undefined && args.targetCount !== null) {
        this.targetCount = args.targetCount;
      }
      if (args.livePlayTime !== undefined && args.livePlayTime !== null) {
        this.livePlayTime = args.livePlayTime;
      }
      if (args.screenAspectRate !== undefined && args.screenAspectRate !== null) {
        this.screenAspectRate = args.screenAspectRate;
      }
      if (args.onAirType !== undefined && args.onAirType !== null) {
        this.onAirType = args.onAirType;
      }
      if (args.onAirUrls !== undefined && args.onAirUrls !== null) {
        this.onAirUrls = new ttypes.BuddyOnAirUrls(args.onAirUrls);
      }
      if (args.aspectRatioOfSource !== undefined && args.aspectRatioOfSource !== null) {
        this.aspectRatioOfSource = args.aspectRatioOfSource;
      }
      if (args.useFadingOut !== undefined && args.useFadingOut !== null) {
        this.useFadingOut = args.useFadingOut;
      }
      if (args.fadingOutIn !== undefined && args.fadingOutIn !== null) {
        this.fadingOutIn = args.fadingOutIn;
      }
      if (args.urlAfterFadingOut !== undefined && args.urlAfterFadingOut !== null) {
        this.urlAfterFadingOut = args.urlAfterFadingOut;
      }
      if (args.labelAfterFadingOut !== undefined && args.labelAfterFadingOut !== null) {
        this.labelAfterFadingOut = args.labelAfterFadingOut;
      }
      if (args.useLowerBanner !== undefined && args.useLowerBanner !== null) {
        this.useLowerBanner = args.useLowerBanner;
      }
      if (args.lowerBannerUrl !== undefined && args.lowerBannerUrl !== null) {
        this.lowerBannerUrl = args.lowerBannerUrl;
      }
      if (args.lowerBannerLabel !== undefined && args.lowerBannerLabel !== null) {
        this.lowerBannerLabel = args.lowerBannerLabel;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.freshnessLifetime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.onAirId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.onAir = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.text = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I64) {
          this.viewerCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I64) {
          this.targetCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I64) {
          this.livePlayTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRING) {
          this.screenAspectRate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.I32) {
          this.onAirType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.STRUCT) {
          this.onAirUrls = new ttypes.BuddyOnAirUrls();
          this.onAirUrls.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 33:
        if (ftype == Thrift.Type.STRING) {
          this.aspectRatioOfSource = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 41:
        if (ftype == Thrift.Type.BOOL) {
          this.useFadingOut = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 42:
        if (ftype == Thrift.Type.I64) {
          this.fadingOutIn = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 43:
        if (ftype == Thrift.Type.STRING) {
          this.urlAfterFadingOut = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 44:
        if (ftype == Thrift.Type.STRING) {
          this.labelAfterFadingOut = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 51:
        if (ftype == Thrift.Type.BOOL) {
          this.useLowerBanner = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 52:
        if (ftype == Thrift.Type.STRING) {
          this.lowerBannerUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 53:
        if (ftype == Thrift.Type.STRING) {
          this.lowerBannerLabel = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyOnAir');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.freshnessLifetime !== null && this.freshnessLifetime !== undefined) {
      output.writeFieldBegin('freshnessLifetime', Thrift.Type.I64, 3);
      output.writeI64(this.freshnessLifetime);
      output.writeFieldEnd();
    }
    if (this.onAirId !== null && this.onAirId !== undefined) {
      output.writeFieldBegin('onAirId', Thrift.Type.STRING, 4);
      output.writeString(this.onAirId);
      output.writeFieldEnd();
    }
    if (this.onAir !== null && this.onAir !== undefined) {
      output.writeFieldBegin('onAir', Thrift.Type.BOOL, 5);
      output.writeBool(this.onAir);
      output.writeFieldEnd();
    }
    if (this.text !== null && this.text !== undefined) {
      output.writeFieldBegin('text', Thrift.Type.STRING, 11);
      output.writeString(this.text);
      output.writeFieldEnd();
    }
    if (this.viewerCount !== null && this.viewerCount !== undefined) {
      output.writeFieldBegin('viewerCount', Thrift.Type.I64, 12);
      output.writeI64(this.viewerCount);
      output.writeFieldEnd();
    }
    if (this.targetCount !== null && this.targetCount !== undefined) {
      output.writeFieldBegin('targetCount', Thrift.Type.I64, 13);
      output.writeI64(this.targetCount);
      output.writeFieldEnd();
    }
    if (this.livePlayTime !== null && this.livePlayTime !== undefined) {
      output.writeFieldBegin('livePlayTime', Thrift.Type.I64, 14);
      output.writeI64(this.livePlayTime);
      output.writeFieldEnd();
    }
    if (this.screenAspectRate !== null && this.screenAspectRate !== undefined) {
      output.writeFieldBegin('screenAspectRate', Thrift.Type.STRING, 15);
      output.writeString(this.screenAspectRate);
      output.writeFieldEnd();
    }
    if (this.onAirType !== null && this.onAirType !== undefined) {
      output.writeFieldBegin('onAirType', Thrift.Type.I32, 31);
      output.writeI32(this.onAirType);
      output.writeFieldEnd();
    }
    if (this.onAirUrls !== null && this.onAirUrls !== undefined) {
      output.writeFieldBegin('onAirUrls', Thrift.Type.STRUCT, 32);
      this.onAirUrls.write(output);
      output.writeFieldEnd();
    }
    if (this.aspectRatioOfSource !== null && this.aspectRatioOfSource !== undefined) {
      output.writeFieldBegin('aspectRatioOfSource', Thrift.Type.STRING, 33);
      output.writeString(this.aspectRatioOfSource);
      output.writeFieldEnd();
    }
    if (this.useFadingOut !== null && this.useFadingOut !== undefined) {
      output.writeFieldBegin('useFadingOut', Thrift.Type.BOOL, 41);
      output.writeBool(this.useFadingOut);
      output.writeFieldEnd();
    }
    if (this.fadingOutIn !== null && this.fadingOutIn !== undefined) {
      output.writeFieldBegin('fadingOutIn', Thrift.Type.I64, 42);
      output.writeI64(this.fadingOutIn);
      output.writeFieldEnd();
    }
    if (this.urlAfterFadingOut !== null && this.urlAfterFadingOut !== undefined) {
      output.writeFieldBegin('urlAfterFadingOut', Thrift.Type.STRING, 43);
      output.writeString(this.urlAfterFadingOut);
      output.writeFieldEnd();
    }
    if (this.labelAfterFadingOut !== null && this.labelAfterFadingOut !== undefined) {
      output.writeFieldBegin('labelAfterFadingOut', Thrift.Type.STRING, 44);
      output.writeString(this.labelAfterFadingOut);
      output.writeFieldEnd();
    }
    if (this.useLowerBanner !== null && this.useLowerBanner !== undefined) {
      output.writeFieldBegin('useLowerBanner', Thrift.Type.BOOL, 51);
      output.writeBool(this.useLowerBanner);
      output.writeFieldEnd();
    }
    if (this.lowerBannerUrl !== null && this.lowerBannerUrl !== undefined) {
      output.writeFieldBegin('lowerBannerUrl', Thrift.Type.STRING, 52);
      output.writeString(this.lowerBannerUrl);
      output.writeFieldEnd();
    }
    if (this.lowerBannerLabel !== null && this.lowerBannerLabel !== undefined) {
      output.writeFieldBegin('lowerBannerLabel', Thrift.Type.STRING, 53);
      output.writeString(this.lowerBannerLabel);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyOnAirUrls = module.exports.BuddyOnAirUrls = class {
  constructor(args) {
    this.hls = null;
    this.smoothStreaming = null;
    if (args) {
      if (args.hls !== undefined && args.hls !== null) {
        this.hls = Thrift.copyMap(args.hls, [null]);
      }
      if (args.smoothStreaming !== undefined && args.smoothStreaming !== null) {
        this.smoothStreaming = Thrift.copyMap(args.smoothStreaming, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.MAP) {
          this.hls = {};
          const _rtmp393 = input.readMapBegin();
          const _size92 = _rtmp393.size || 0;
          for (let _i94 = 0; _i94 < _size92; ++_i94) {
            let key95 = null;
            let val96 = null;
            key95 = input.readString();
            val96 = input.readString();
            this.hls[key95] = val96;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.MAP) {
          this.smoothStreaming = {};
          const _rtmp398 = input.readMapBegin();
          const _size97 = _rtmp398.size || 0;
          for (let _i99 = 0; _i99 < _size97; ++_i99) {
            let key100 = null;
            let val101 = null;
            key100 = input.readString();
            val101 = input.readString();
            this.smoothStreaming[key100] = val101;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyOnAirUrls');
    if (this.hls !== null && this.hls !== undefined) {
      output.writeFieldBegin('hls', Thrift.Type.MAP, 1);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.hls));
      for (let kiter102 in this.hls) {
        if (this.hls.hasOwnProperty(kiter102)) {
          let viter103 = this.hls[kiter102];
          output.writeString(kiter102);
          output.writeString(viter103);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.smoothStreaming !== null && this.smoothStreaming !== undefined) {
      output.writeFieldBegin('smoothStreaming', Thrift.Type.MAP, 2);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.smoothStreaming));
      for (let kiter104 in this.smoothStreaming) {
        if (this.smoothStreaming.hasOwnProperty(kiter104)) {
          let viter105 = this.smoothStreaming[kiter104];
          output.writeString(kiter104);
          output.writeString(viter105);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyProfile = module.exports.BuddyProfile = class {
  constructor(args) {
    this.buddyId = null;
    this.mid = null;
    this.searchId = null;
    this.displayName = null;
    this.statusMessage = null;
    this.contactCount = null;
    if (args) {
      if (args.buddyId !== undefined && args.buddyId !== null) {
        this.buddyId = args.buddyId;
      }
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.searchId !== undefined && args.searchId !== null) {
        this.searchId = args.searchId;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.statusMessage !== undefined && args.statusMessage !== null) {
        this.statusMessage = args.statusMessage;
      }
      if (args.contactCount !== undefined && args.contactCount !== null) {
        this.contactCount = args.contactCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.buddyId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.searchId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.statusMessage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.contactCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyProfile');
    if (this.buddyId !== null && this.buddyId !== undefined) {
      output.writeFieldBegin('buddyId', Thrift.Type.STRING, 1);
      output.writeString(this.buddyId);
      output.writeFieldEnd();
    }
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.searchId !== null && this.searchId !== undefined) {
      output.writeFieldBegin('searchId', Thrift.Type.STRING, 3);
      output.writeString(this.searchId);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 4);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.statusMessage !== null && this.statusMessage !== undefined) {
      output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
      output.writeString(this.statusMessage);
      output.writeFieldEnd();
    }
    if (this.contactCount !== null && this.contactCount !== undefined) {
      output.writeFieldBegin('contactCount', Thrift.Type.I64, 11);
      output.writeI64(this.contactCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyProfilePopup = module.exports.BuddyProfilePopup = class {
  constructor(args) {
    this.popupType = null;
    this.linkUrl = null;
    this.backgroundColorRgb = null;
    this.textColorRgb = null;
    this.label = null;
    if (args) {
      if (args.popupType !== undefined && args.popupType !== null) {
        this.popupType = args.popupType;
      }
      if (args.linkUrl !== undefined && args.linkUrl !== null) {
        this.linkUrl = args.linkUrl;
      }
      if (args.backgroundColorRgb !== undefined && args.backgroundColorRgb !== null) {
        this.backgroundColorRgb = args.backgroundColorRgb;
      }
      if (args.textColorRgb !== undefined && args.textColorRgb !== null) {
        this.textColorRgb = args.textColorRgb;
      }
      if (args.label !== undefined && args.label !== null) {
        this.label = args.label;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.popupType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.linkUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.backgroundColorRgb = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.textColorRgb = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.label = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyProfilePopup');
    if (this.popupType !== null && this.popupType !== undefined) {
      output.writeFieldBegin('popupType', Thrift.Type.I32, 1);
      output.writeI32(this.popupType);
      output.writeFieldEnd();
    }
    if (this.linkUrl !== null && this.linkUrl !== undefined) {
      output.writeFieldBegin('linkUrl', Thrift.Type.STRING, 2);
      output.writeString(this.linkUrl);
      output.writeFieldEnd();
    }
    if (this.backgroundColorRgb !== null && this.backgroundColorRgb !== undefined) {
      output.writeFieldBegin('backgroundColorRgb', Thrift.Type.I32, 3);
      output.writeI32(this.backgroundColorRgb);
      output.writeFieldEnd();
    }
    if (this.textColorRgb !== null && this.textColorRgb !== undefined) {
      output.writeFieldBegin('textColorRgb', Thrift.Type.I32, 4);
      output.writeI32(this.textColorRgb);
      output.writeFieldEnd();
    }
    if (this.label !== null && this.label !== undefined) {
      output.writeFieldBegin('label', Thrift.Type.STRING, 5);
      output.writeString(this.label);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyRichMenuChatBarItem = module.exports.BuddyRichMenuChatBarItem = class {
  constructor(args) {
    this.label = null;
    this.body = null;
    this.selected = null;
    if (args) {
      if (args.label !== undefined && args.label !== null) {
        this.label = args.label;
      }
      if (args.body !== undefined && args.body !== null) {
        this.body = args.body;
      }
      if (args.selected !== undefined && args.selected !== null) {
        this.selected = args.selected;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.label = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.body = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.selected = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyRichMenuChatBarItem');
    if (this.label !== null && this.label !== undefined) {
      output.writeFieldBegin('label', Thrift.Type.STRING, 1);
      output.writeString(this.label);
      output.writeFieldEnd();
    }
    if (this.body !== null && this.body !== undefined) {
      output.writeFieldBegin('body', Thrift.Type.STRING, 2);
      output.writeString(this.body);
      output.writeFieldEnd();
    }
    if (this.selected !== null && this.selected !== undefined) {
      output.writeFieldBegin('selected', Thrift.Type.BOOL, 3);
      output.writeBool(this.selected);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyRichMenuContents = module.exports.BuddyRichMenuContents = class {
  constructor(args) {
    this.body = null;
    if (args) {
      if (args.body !== undefined && args.body !== null) {
        this.body = args.body;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.body = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyRichMenuContents');
    if (this.body !== null && this.body !== undefined) {
      output.writeFieldBegin('body', Thrift.Type.STRING, 1);
      output.writeString(this.body);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddySearchResult = module.exports.BuddySearchResult = class {
  constructor(args) {
    this.mid = null;
    this.displayName = null;
    this.pictureStatus = null;
    this.picturePath = null;
    this.statusMessage = null;
    this.businessAccount = null;
    this.iconType = null;
    this.botType = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
        this.pictureStatus = args.pictureStatus;
      }
      if (args.picturePath !== undefined && args.picturePath !== null) {
        this.picturePath = args.picturePath;
      }
      if (args.statusMessage !== undefined && args.statusMessage !== null) {
        this.statusMessage = args.statusMessage;
      }
      if (args.businessAccount !== undefined && args.businessAccount !== null) {
        this.businessAccount = args.businessAccount;
      }
      if (args.iconType !== undefined && args.iconType !== null) {
        this.iconType = args.iconType;
      }
      if (args.botType !== undefined && args.botType !== null) {
        this.botType = args.botType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.pictureStatus = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.picturePath = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.statusMessage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.businessAccount = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.iconType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.botType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddySearchResult');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
      output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 3);
      output.writeString(this.pictureStatus);
      output.writeFieldEnd();
    }
    if (this.picturePath !== null && this.picturePath !== undefined) {
      output.writeFieldBegin('picturePath', Thrift.Type.STRING, 4);
      output.writeString(this.picturePath);
      output.writeFieldEnd();
    }
    if (this.statusMessage !== null && this.statusMessage !== undefined) {
      output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
      output.writeString(this.statusMessage);
      output.writeFieldEnd();
    }
    if (this.businessAccount !== null && this.businessAccount !== undefined) {
      output.writeFieldBegin('businessAccount', Thrift.Type.BOOL, 6);
      output.writeBool(this.businessAccount);
      output.writeFieldEnd();
    }
    if (this.iconType !== null && this.iconType !== undefined) {
      output.writeFieldBegin('iconType', Thrift.Type.I32, 7);
      output.writeI32(this.iconType);
      output.writeFieldEnd();
    }
    if (this.botType !== null && this.botType !== undefined) {
      output.writeFieldBegin('botType', Thrift.Type.I32, 8);
      output.writeI32(this.botType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyStatusBar = module.exports.BuddyStatusBar = class {
  constructor(args) {
    this.label = null;
    this.displayType = null;
    if (args) {
      if (args.label !== undefined && args.label !== null) {
        this.label = args.label;
      }
      if (args.displayType !== undefined && args.displayType !== null) {
        this.displayType = args.displayType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.label = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.displayType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyStatusBar');
    if (this.label !== null && this.label !== undefined) {
      output.writeFieldBegin('label', Thrift.Type.STRING, 1);
      output.writeString(this.label);
      output.writeFieldEnd();
    }
    if (this.displayType !== null && this.displayType !== undefined) {
      output.writeFieldBegin('displayType', Thrift.Type.I32, 2);
      output.writeI32(this.displayType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyTopView = module.exports.BuddyTopView = class {
  constructor(args) {
    this.banners = null;
    this.collections = null;
    this.rotationInterval = null;
    if (args) {
      if (args.banners !== undefined && args.banners !== null) {
        this.banners = Thrift.copyList(args.banners, [ttypes.BuddyBanner]);
      }
      if (args.collections !== undefined && args.collections !== null) {
        this.collections = Thrift.copyList(args.collections, [ttypes.BuddyCollection]);
      }
      if (args.rotationInterval !== undefined && args.rotationInterval !== null) {
        this.rotationInterval = args.rotationInterval;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.banners = [];
          const _rtmp3107 = input.readListBegin();
          const _size106 = _rtmp3107.size || 0;
          for (let _i108 = 0; _i108 < _size106; ++_i108) {
            let elem109 = null;
            elem109 = new ttypes.BuddyBanner();
            elem109.read(input);
            this.banners.push(elem109);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.collections = [];
          const _rtmp3111 = input.readListBegin();
          const _size110 = _rtmp3111.size || 0;
          for (let _i112 = 0; _i112 < _size110; ++_i112) {
            let elem113 = null;
            elem113 = new ttypes.BuddyCollection();
            elem113.read(input);
            this.collections.push(elem113);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.rotationInterval = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyTopView');
    if (this.banners !== null && this.banners !== undefined) {
      output.writeFieldBegin('banners', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.banners.length);
      for (let iter114 in this.banners) {
        if (this.banners.hasOwnProperty(iter114)) {
          iter114 = this.banners[iter114];
          iter114.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.collections !== null && this.collections !== undefined) {
      output.writeFieldBegin('collections', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.collections.length);
      for (let iter115 in this.collections) {
        if (this.collections.hasOwnProperty(iter115)) {
          iter115 = this.collections[iter115];
          iter115.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.rotationInterval !== null && this.rotationInterval !== undefined) {
      output.writeFieldBegin('rotationInterval', Thrift.Type.I64, 3);
      output.writeI64(this.rotationInterval);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyWebChatBarItem = module.exports.BuddyWebChatBarItem = class {
  constructor(args) {
    this.label = null;
    this.url = null;
    if (args) {
      if (args.label !== undefined && args.label !== null) {
        this.label = args.label;
      }
      if (args.url !== undefined && args.url !== null) {
        this.url = args.url;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.label = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.url = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyWebChatBarItem');
    if (this.label !== null && this.label !== undefined) {
      output.writeFieldBegin('label', Thrift.Type.STRING, 1);
      output.writeString(this.label);
      output.writeFieldEnd();
    }
    if (this.url !== null && this.url !== undefined) {
      output.writeFieldBegin('url', Thrift.Type.STRING, 2);
      output.writeString(this.url);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyWidget = module.exports.BuddyWidget = class {
  constructor(args) {
    this.icon = null;
    this.label = null;
    this.url = null;
    if (args) {
      if (args.icon !== undefined && args.icon !== null) {
        this.icon = args.icon;
      }
      if (args.label !== undefined && args.label !== null) {
        this.label = args.label;
      }
      if (args.url !== undefined && args.url !== null) {
        this.url = args.url;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.icon = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.label = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.url = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyWidget');
    if (this.icon !== null && this.icon !== undefined) {
      output.writeFieldBegin('icon', Thrift.Type.STRING, 1);
      output.writeString(this.icon);
      output.writeFieldEnd();
    }
    if (this.label !== null && this.label !== undefined) {
      output.writeFieldBegin('label', Thrift.Type.STRING, 2);
      output.writeString(this.label);
      output.writeFieldEnd();
    }
    if (this.url !== null && this.url !== undefined) {
      output.writeFieldBegin('url', Thrift.Type.STRING, 3);
      output.writeString(this.url);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyWidgetListCharBarItem = module.exports.BuddyWidgetListCharBarItem = class {
  constructor(args) {
    this.label = null;
    this.widgets = null;
    this.selected = null;
    if (args) {
      if (args.label !== undefined && args.label !== null) {
        this.label = args.label;
      }
      if (args.widgets !== undefined && args.widgets !== null) {
        this.widgets = Thrift.copyList(args.widgets, [ttypes.BuddyWidget]);
      }
      if (args.selected !== undefined && args.selected !== null) {
        this.selected = args.selected;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.label = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.widgets = [];
          const _rtmp3117 = input.readListBegin();
          const _size116 = _rtmp3117.size || 0;
          for (let _i118 = 0; _i118 < _size116; ++_i118) {
            let elem119 = null;
            elem119 = new ttypes.BuddyWidget();
            elem119.read(input);
            this.widgets.push(elem119);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.selected = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyWidgetListCharBarItem');
    if (this.label !== null && this.label !== undefined) {
      output.writeFieldBegin('label', Thrift.Type.STRING, 1);
      output.writeString(this.label);
      output.writeFieldEnd();
    }
    if (this.widgets !== null && this.widgets !== undefined) {
      output.writeFieldBegin('widgets', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.widgets.length);
      for (let iter120 in this.widgets) {
        if (this.widgets.hasOwnProperty(iter120)) {
          iter120 = this.widgets[iter120];
          iter120.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.selected !== null && this.selected !== undefined) {
      output.writeFieldBegin('selected', Thrift.Type.BOOL, 3);
      output.writeBool(this.selected);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CallHost = module.exports.CallHost = class {
  constructor(args) {
    this.host = null;
    this.port = null;
    this.zone = null;
    if (args) {
      if (args.host !== undefined && args.host !== null) {
        this.host = args.host;
      }
      if (args.port !== undefined && args.port !== null) {
        this.port = args.port;
      }
      if (args.zone !== undefined && args.zone !== null) {
        this.zone = args.zone;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.host = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.port = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.zone = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CallHost');
    if (this.host !== null && this.host !== undefined) {
      output.writeFieldBegin('host', Thrift.Type.STRING, 1);
      output.writeString(this.host);
      output.writeFieldEnd();
    }
    if (this.port !== null && this.port !== undefined) {
      output.writeFieldBegin('port', Thrift.Type.I32, 2);
      output.writeI32(this.port);
      output.writeFieldEnd();
    }
    if (this.zone !== null && this.zone !== undefined) {
      output.writeFieldBegin('zone', Thrift.Type.STRING, 3);
      output.writeString(this.zone);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ChannelDomain = module.exports.ChannelDomain = class {
  constructor(args) {
    this.host = null;
    this.removed = null;
    if (args) {
      if (args.host !== undefined && args.host !== null) {
        this.host = args.host;
      }
      if (args.removed !== undefined && args.removed !== null) {
        this.removed = args.removed;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.host = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.removed = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ChannelDomain');
    if (this.host !== null && this.host !== undefined) {
      output.writeFieldBegin('host', Thrift.Type.STRING, 1);
      output.writeString(this.host);
      output.writeFieldEnd();
    }
    if (this.removed !== null && this.removed !== undefined) {
      output.writeFieldBegin('removed', Thrift.Type.BOOL, 2);
      output.writeBool(this.removed);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ChannelDomains = module.exports.ChannelDomains = class {
  constructor(args) {
    this.channelDomains = null;
    this.revision = null;
    if (args) {
      if (args.channelDomains !== undefined && args.channelDomains !== null) {
        this.channelDomains = Thrift.copyList(args.channelDomains, [ttypes.ChannelDomain]);
      }
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.channelDomains = [];
          const _rtmp3122 = input.readListBegin();
          const _size121 = _rtmp3122.size || 0;
          for (let _i123 = 0; _i123 < _size121; ++_i123) {
            let elem124 = null;
            elem124 = new ttypes.ChannelDomain();
            elem124.read(input);
            this.channelDomains.push(elem124);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ChannelDomains');
    if (this.channelDomains !== null && this.channelDomains !== undefined) {
      output.writeFieldBegin('channelDomains', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.channelDomains.length);
      for (let iter125 in this.channelDomains) {
        if (this.channelDomains.hasOwnProperty(iter125)) {
          iter125 = this.channelDomains[iter125];
          iter125.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 2);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ChannelException = module.exports.ChannelException = class extends Thrift.TException {
  constructor(args) {
    super(args);
    this.name = "ChannelException";
    this.code = null;
    this.reason = null;
    this.parameterMap = null;
    if (args) {
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.reason !== undefined && args.reason !== null) {
        this.reason = args.reason;
      }
      if (args.parameterMap !== undefined && args.parameterMap !== null) {
        this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.code = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.reason = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.MAP) {
          this.parameterMap = {};
          const _rtmp3127 = input.readMapBegin();
          const _size126 = _rtmp3127.size || 0;
          for (let _i128 = 0; _i128 < _size126; ++_i128) {
            let key129 = null;
            let val130 = null;
            key129 = input.readString();
            val130 = input.readString();
            this.parameterMap[key129] = val130;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ChannelException');
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.I32, 1);
      output.writeI32(this.code);
      output.writeFieldEnd();
    }
    if (this.reason !== null && this.reason !== undefined) {
      output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
      output.writeString(this.reason);
      output.writeFieldEnd();
    }
    if (this.parameterMap !== null && this.parameterMap !== undefined) {
      output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
      for (let kiter131 in this.parameterMap) {
        if (this.parameterMap.hasOwnProperty(kiter131)) {
          let viter132 = this.parameterMap[kiter131];
          output.writeString(kiter131);
          output.writeString(viter132);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ChannelIdWithLastUpdated = module.exports.ChannelIdWithLastUpdated = class {
  constructor(args) {
    this.channelId = null;
    this.lastUpdated = null;
    if (args) {
      if (args.channelId !== undefined && args.channelId !== null) {
        this.channelId = args.channelId;
      }
      if (args.lastUpdated !== undefined && args.lastUpdated !== null) {
        this.lastUpdated = args.lastUpdated;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.channelId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.lastUpdated = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ChannelIdWithLastUpdated');
    if (this.channelId !== null && this.channelId !== undefined) {
      output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
      output.writeString(this.channelId);
      output.writeFieldEnd();
    }
    if (this.lastUpdated !== null && this.lastUpdated !== undefined) {
      output.writeFieldBegin('lastUpdated', Thrift.Type.I64, 2);
      output.writeI64(this.lastUpdated);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ChannelInfo = module.exports.ChannelInfo = class {
  constructor(args) {
    this.channelId = null;
    this.name = null;
    this.entryPageUrl = null;
    this.descriptionText = null;
    this.provider = null;
    this.publicType = null;
    this.iconImage = null;
    this.permissions = null;
    this.iconThumbnailImage = null;
    this.channelConfigurations = null;
    this.lcsAllApiUsable = null;
    this.allowedPermissions = null;
    this.channelDomains = null;
    this.updatedTimestamp = null;
    if (args) {
      if (args.channelId !== undefined && args.channelId !== null) {
        this.channelId = args.channelId;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.entryPageUrl !== undefined && args.entryPageUrl !== null) {
        this.entryPageUrl = args.entryPageUrl;
      }
      if (args.descriptionText !== undefined && args.descriptionText !== null) {
        this.descriptionText = args.descriptionText;
      }
      if (args.provider !== undefined && args.provider !== null) {
        this.provider = new ttypes.ChannelProvider(args.provider);
      }
      if (args.publicType !== undefined && args.publicType !== null) {
        this.publicType = args.publicType;
      }
      if (args.iconImage !== undefined && args.iconImage !== null) {
        this.iconImage = args.iconImage;
      }
      if (args.permissions !== undefined && args.permissions !== null) {
        this.permissions = Thrift.copyList(args.permissions, [null]);
      }
      if (args.iconThumbnailImage !== undefined && args.iconThumbnailImage !== null) {
        this.iconThumbnailImage = args.iconThumbnailImage;
      }
      if (args.channelConfigurations !== undefined && args.channelConfigurations !== null) {
        this.channelConfigurations = Thrift.copyList(args.channelConfigurations, [null]);
      }
      if (args.lcsAllApiUsable !== undefined && args.lcsAllApiUsable !== null) {
        this.lcsAllApiUsable = args.lcsAllApiUsable;
      }
      if (args.allowedPermissions !== undefined && args.allowedPermissions !== null) {
        this.allowedPermissions = Thrift.copyList(args.allowedPermissions, [null]);
      }
      if (args.channelDomains !== undefined && args.channelDomains !== null) {
        this.channelDomains = Thrift.copyList(args.channelDomains, [ttypes.ChannelDomain]);
      }
      if (args.updatedTimestamp !== undefined && args.updatedTimestamp !== null) {
        this.updatedTimestamp = args.updatedTimestamp;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.channelId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.entryPageUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.descriptionText = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.provider = new ttypes.ChannelProvider();
          this.provider.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.publicType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.iconImage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.LIST) {
          this.permissions = [];
          const _rtmp3134 = input.readListBegin();
          const _size133 = _rtmp3134.size || 0;
          for (let _i135 = 0; _i135 < _size133; ++_i135) {
            let elem136 = null;
            elem136 = input.readString();
            this.permissions.push(elem136);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.iconThumbnailImage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.LIST) {
          this.channelConfigurations = [];
          const _rtmp3138 = input.readListBegin();
          const _size137 = _rtmp3138.size || 0;
          for (let _i139 = 0; _i139 < _size137; ++_i139) {
            let elem140 = null;
            elem140 = input.readI32();
            this.channelConfigurations.push(elem140);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.BOOL) {
          this.lcsAllApiUsable = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.SET) {
          this.allowedPermissions = [];
          const _rtmp3142 = input.readSetBegin();
          const _size141 = _rtmp3142.size || 0;
          for (let _i143 = 0; _i143 < _size141; ++_i143) {
            let elem144 = null;
            elem144 = input.readI32();
            this.allowedPermissions.push(elem144);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.LIST) {
          this.channelDomains = [];
          const _rtmp3146 = input.readListBegin();
          const _size145 = _rtmp3146.size || 0;
          for (let _i147 = 0; _i147 < _size145; ++_i147) {
            let elem148 = null;
            elem148 = new ttypes.ChannelDomain();
            elem148.read(input);
            this.channelDomains.push(elem148);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.I64) {
          this.updatedTimestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ChannelInfo');
    if (this.channelId !== null && this.channelId !== undefined) {
      output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
      output.writeString(this.channelId);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 3);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.entryPageUrl !== null && this.entryPageUrl !== undefined) {
      output.writeFieldBegin('entryPageUrl', Thrift.Type.STRING, 4);
      output.writeString(this.entryPageUrl);
      output.writeFieldEnd();
    }
    if (this.descriptionText !== null && this.descriptionText !== undefined) {
      output.writeFieldBegin('descriptionText', Thrift.Type.STRING, 5);
      output.writeString(this.descriptionText);
      output.writeFieldEnd();
    }
    if (this.provider !== null && this.provider !== undefined) {
      output.writeFieldBegin('provider', Thrift.Type.STRUCT, 6);
      this.provider.write(output);
      output.writeFieldEnd();
    }
    if (this.publicType !== null && this.publicType !== undefined) {
      output.writeFieldBegin('publicType', Thrift.Type.I32, 7);
      output.writeI32(this.publicType);
      output.writeFieldEnd();
    }
    if (this.iconImage !== null && this.iconImage !== undefined) {
      output.writeFieldBegin('iconImage', Thrift.Type.STRING, 8);
      output.writeString(this.iconImage);
      output.writeFieldEnd();
    }
    if (this.permissions !== null && this.permissions !== undefined) {
      output.writeFieldBegin('permissions', Thrift.Type.LIST, 9);
      output.writeListBegin(Thrift.Type.STRING, this.permissions.length);
      for (let iter149 in this.permissions) {
        if (this.permissions.hasOwnProperty(iter149)) {
          iter149 = this.permissions[iter149];
          output.writeString(iter149);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.iconThumbnailImage !== null && this.iconThumbnailImage !== undefined) {
      output.writeFieldBegin('iconThumbnailImage', Thrift.Type.STRING, 11);
      output.writeString(this.iconThumbnailImage);
      output.writeFieldEnd();
    }
    if (this.channelConfigurations !== null && this.channelConfigurations !== undefined) {
      output.writeFieldBegin('channelConfigurations', Thrift.Type.LIST, 12);
      output.writeListBegin(Thrift.Type.I32, this.channelConfigurations.length);
      for (let iter150 in this.channelConfigurations) {
        if (this.channelConfigurations.hasOwnProperty(iter150)) {
          iter150 = this.channelConfigurations[iter150];
          output.writeI32(iter150);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.lcsAllApiUsable !== null && this.lcsAllApiUsable !== undefined) {
      output.writeFieldBegin('lcsAllApiUsable', Thrift.Type.BOOL, 13);
      output.writeBool(this.lcsAllApiUsable);
      output.writeFieldEnd();
    }
    if (this.allowedPermissions !== null && this.allowedPermissions !== undefined) {
      output.writeFieldBegin('allowedPermissions', Thrift.Type.SET, 14);
      output.writeSetBegin(Thrift.Type.I32, this.allowedPermissions.length);
      for (let iter151 in this.allowedPermissions) {
        if (this.allowedPermissions.hasOwnProperty(iter151)) {
          iter151 = this.allowedPermissions[iter151];
          output.writeI32(iter151);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.channelDomains !== null && this.channelDomains !== undefined) {
      output.writeFieldBegin('channelDomains', Thrift.Type.LIST, 15);
      output.writeListBegin(Thrift.Type.STRUCT, this.channelDomains.length);
      for (let iter152 in this.channelDomains) {
        if (this.channelDomains.hasOwnProperty(iter152)) {
          iter152 = this.channelDomains[iter152];
          iter152.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.updatedTimestamp !== null && this.updatedTimestamp !== undefined) {
      output.writeFieldBegin('updatedTimestamp', Thrift.Type.I64, 16);
      output.writeI64(this.updatedTimestamp);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ChannelInfos = module.exports.ChannelInfos = class {
  constructor(args) {
    this.channelInfos = null;
    this.revision = null;
    if (args) {
      if (args.channelInfos !== undefined && args.channelInfos !== null) {
        this.channelInfos = Thrift.copyList(args.channelInfos, [ttypes.ChannelInfo]);
      }
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.channelInfos = [];
          const _rtmp3154 = input.readListBegin();
          const _size153 = _rtmp3154.size || 0;
          for (let _i155 = 0; _i155 < _size153; ++_i155) {
            let elem156 = null;
            elem156 = new ttypes.ChannelInfo();
            elem156.read(input);
            this.channelInfos.push(elem156);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ChannelInfos');
    if (this.channelInfos !== null && this.channelInfos !== undefined) {
      output.writeFieldBegin('channelInfos', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.channelInfos.length);
      for (let iter157 in this.channelInfos) {
        if (this.channelInfos.hasOwnProperty(iter157)) {
          iter157 = this.channelInfos[iter157];
          iter157.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 2);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ChannelNotificationSetting = module.exports.ChannelNotificationSetting = class {
  constructor(args) {
    this.channelId = null;
    this.name = null;
    this.notificationReceivable = null;
    this.messageReceivable = null;
    this.showDefault = null;
    if (args) {
      if (args.channelId !== undefined && args.channelId !== null) {
        this.channelId = args.channelId;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.notificationReceivable !== undefined && args.notificationReceivable !== null) {
        this.notificationReceivable = args.notificationReceivable;
      }
      if (args.messageReceivable !== undefined && args.messageReceivable !== null) {
        this.messageReceivable = args.messageReceivable;
      }
      if (args.showDefault !== undefined && args.showDefault !== null) {
        this.showDefault = args.showDefault;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.channelId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.notificationReceivable = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.messageReceivable = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.showDefault = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ChannelNotificationSetting');
    if (this.channelId !== null && this.channelId !== undefined) {
      output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
      output.writeString(this.channelId);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.notificationReceivable !== null && this.notificationReceivable !== undefined) {
      output.writeFieldBegin('notificationReceivable', Thrift.Type.BOOL, 3);
      output.writeBool(this.notificationReceivable);
      output.writeFieldEnd();
    }
    if (this.messageReceivable !== null && this.messageReceivable !== undefined) {
      output.writeFieldBegin('messageReceivable', Thrift.Type.BOOL, 4);
      output.writeBool(this.messageReceivable);
      output.writeFieldEnd();
    }
    if (this.showDefault !== null && this.showDefault !== undefined) {
      output.writeFieldBegin('showDefault', Thrift.Type.BOOL, 5);
      output.writeBool(this.showDefault);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ChannelProvider = module.exports.ChannelProvider = class {
  constructor(args) {
    this.name = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ChannelProvider');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ChannelSettings = module.exports.ChannelSettings = class {
  constructor(args) {
    this.unapprovedMessageReceivable = null;
    if (args) {
      if (args.unapprovedMessageReceivable !== undefined && args.unapprovedMessageReceivable !== null) {
        this.unapprovedMessageReceivable = args.unapprovedMessageReceivable;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.unapprovedMessageReceivable = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ChannelSettings');
    if (this.unapprovedMessageReceivable !== null && this.unapprovedMessageReceivable !== undefined) {
      output.writeFieldBegin('unapprovedMessageReceivable', Thrift.Type.BOOL, 1);
      output.writeBool(this.unapprovedMessageReceivable);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ChannelSyncDatas = module.exports.ChannelSyncDatas = class {
  constructor(args) {
    this.channelInfos = null;
    this.channelDomains = null;
    this.revision = null;
    this.expires = null;
    if (args) {
      if (args.channelInfos !== undefined && args.channelInfos !== null) {
        this.channelInfos = Thrift.copyList(args.channelInfos, [ttypes.ChannelInfo]);
      }
      if (args.channelDomains !== undefined && args.channelDomains !== null) {
        this.channelDomains = Thrift.copyList(args.channelDomains, [ttypes.ChannelDomain]);
      }
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
      if (args.expires !== undefined && args.expires !== null) {
        this.expires = args.expires;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.channelInfos = [];
          const _rtmp3159 = input.readListBegin();
          const _size158 = _rtmp3159.size || 0;
          for (let _i160 = 0; _i160 < _size158; ++_i160) {
            let elem161 = null;
            elem161 = new ttypes.ChannelInfo();
            elem161.read(input);
            this.channelInfos.push(elem161);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.channelDomains = [];
          const _rtmp3163 = input.readListBegin();
          const _size162 = _rtmp3163.size || 0;
          for (let _i164 = 0; _i164 < _size162; ++_i164) {
            let elem165 = null;
            elem165 = new ttypes.ChannelDomain();
            elem165.read(input);
            this.channelDomains.push(elem165);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.expires = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ChannelSyncDatas');
    if (this.channelInfos !== null && this.channelInfos !== undefined) {
      output.writeFieldBegin('channelInfos', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.channelInfos.length);
      for (let iter166 in this.channelInfos) {
        if (this.channelInfos.hasOwnProperty(iter166)) {
          iter166 = this.channelInfos[iter166];
          iter166.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.channelDomains !== null && this.channelDomains !== undefined) {
      output.writeFieldBegin('channelDomains', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.channelDomains.length);
      for (let iter167 in this.channelDomains) {
        if (this.channelDomains.hasOwnProperty(iter167)) {
          iter167 = this.channelDomains[iter167];
          iter167.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 3);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    if (this.expires !== null && this.expires !== undefined) {
      output.writeFieldBegin('expires', Thrift.Type.I64, 4);
      output.writeI64(this.expires);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ChannelToken = module.exports.ChannelToken = class {
  constructor(args) {
    this.token = null;
    this.obsToken = null;
    this.expiration = null;
    this.refreshToken = null;
    this.channelAccessToken = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.obsToken !== undefined && args.obsToken !== null) {
        this.obsToken = args.obsToken;
      }
      if (args.expiration !== undefined && args.expiration !== null) {
        this.expiration = args.expiration;
      }
      if (args.refreshToken !== undefined && args.refreshToken !== null) {
        this.refreshToken = args.refreshToken;
      }
      if (args.channelAccessToken !== undefined && args.channelAccessToken !== null) {
        this.channelAccessToken = args.channelAccessToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.obsToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.expiration = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.refreshToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.channelAccessToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ChannelToken');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.obsToken !== null && this.obsToken !== undefined) {
      output.writeFieldBegin('obsToken', Thrift.Type.STRING, 2);
      output.writeString(this.obsToken);
      output.writeFieldEnd();
    }
    if (this.expiration !== null && this.expiration !== undefined) {
      output.writeFieldBegin('expiration', Thrift.Type.I64, 3);
      output.writeI64(this.expiration);
      output.writeFieldEnd();
    }
    if (this.refreshToken !== null && this.refreshToken !== undefined) {
      output.writeFieldBegin('refreshToken', Thrift.Type.STRING, 4);
      output.writeString(this.refreshToken);
      output.writeFieldEnd();
    }
    if (this.channelAccessToken !== null && this.channelAccessToken !== undefined) {
      output.writeFieldBegin('channelAccessToken', Thrift.Type.STRING, 5);
      output.writeString(this.channelAccessToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ClientLastStatus = module.exports.ClientLastStatus = class {
  constructor(args) {
    this.lastRev = null;
    this.badgeCount = null;
    if (args) {
      if (args.lastRev !== undefined && args.lastRev !== null) {
        this.lastRev = args.lastRev;
      }
      if (args.badgeCount !== undefined && args.badgeCount !== null) {
        this.badgeCount = args.badgeCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.lastRev = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.badgeCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClientLastStatus');
    if (this.lastRev !== null && this.lastRev !== undefined) {
      output.writeFieldBegin('lastRev', Thrift.Type.I64, 1);
      output.writeI64(this.lastRev);
      output.writeFieldEnd();
    }
    if (this.badgeCount !== null && this.badgeCount !== undefined) {
      output.writeFieldBegin('badgeCount', Thrift.Type.I32, 2);
      output.writeI32(this.badgeCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Coin = module.exports.Coin = class {
  constructor(args) {
    this.freeCoinBalance = null;
    this.payedCoinBalance = null;
    this.totalCoinBalance = null;
    this.rewardCoinBalance = null;
    if (args) {
      if (args.freeCoinBalance !== undefined && args.freeCoinBalance !== null) {
        this.freeCoinBalance = args.freeCoinBalance;
      }
      if (args.payedCoinBalance !== undefined && args.payedCoinBalance !== null) {
        this.payedCoinBalance = args.payedCoinBalance;
      }
      if (args.totalCoinBalance !== undefined && args.totalCoinBalance !== null) {
        this.totalCoinBalance = args.totalCoinBalance;
      }
      if (args.rewardCoinBalance !== undefined && args.rewardCoinBalance !== null) {
        this.rewardCoinBalance = args.rewardCoinBalance;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.freeCoinBalance = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.payedCoinBalance = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.totalCoinBalance = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.rewardCoinBalance = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Coin');
    if (this.freeCoinBalance !== null && this.freeCoinBalance !== undefined) {
      output.writeFieldBegin('freeCoinBalance', Thrift.Type.I32, 1);
      output.writeI32(this.freeCoinBalance);
      output.writeFieldEnd();
    }
    if (this.payedCoinBalance !== null && this.payedCoinBalance !== undefined) {
      output.writeFieldBegin('payedCoinBalance', Thrift.Type.I32, 2);
      output.writeI32(this.payedCoinBalance);
      output.writeFieldEnd();
    }
    if (this.totalCoinBalance !== null && this.totalCoinBalance !== undefined) {
      output.writeFieldBegin('totalCoinBalance', Thrift.Type.I32, 3);
      output.writeI32(this.totalCoinBalance);
      output.writeFieldEnd();
    }
    if (this.rewardCoinBalance !== null && this.rewardCoinBalance !== undefined) {
      output.writeFieldBegin('rewardCoinBalance', Thrift.Type.I32, 4);
      output.writeI32(this.rewardCoinBalance);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CoinHistory = module.exports.CoinHistory = class {
  constructor(args) {
    this.payDate = null;
    this.coinBalance = null;
    this.coin = null;
    this.price = null;
    this.title = null;
    this.refund = null;
    this.paySeq = null;
    this.currency = null;
    this.currencySign = null;
    this.displayPrice = null;
    this.payload = null;
    this.channelId = null;
    if (args) {
      if (args.payDate !== undefined && args.payDate !== null) {
        this.payDate = args.payDate;
      }
      if (args.coinBalance !== undefined && args.coinBalance !== null) {
        this.coinBalance = args.coinBalance;
      }
      if (args.coin !== undefined && args.coin !== null) {
        this.coin = args.coin;
      }
      if (args.price !== undefined && args.price !== null) {
        this.price = args.price;
      }
      if (args.title !== undefined && args.title !== null) {
        this.title = args.title;
      }
      if (args.refund !== undefined && args.refund !== null) {
        this.refund = args.refund;
      }
      if (args.paySeq !== undefined && args.paySeq !== null) {
        this.paySeq = args.paySeq;
      }
      if (args.currency !== undefined && args.currency !== null) {
        this.currency = args.currency;
      }
      if (args.currencySign !== undefined && args.currencySign !== null) {
        this.currencySign = args.currencySign;
      }
      if (args.displayPrice !== undefined && args.displayPrice !== null) {
        this.displayPrice = args.displayPrice;
      }
      if (args.payload !== undefined && args.payload !== null) {
        this.payload = new ttypes.CoinPayLoad(args.payload);
      }
      if (args.channelId !== undefined && args.channelId !== null) {
        this.channelId = args.channelId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.payDate = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.coinBalance = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.coin = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.price = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.title = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.refund = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.paySeq = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.currency = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.currencySign = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.displayPrice = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRUCT) {
          this.payload = new ttypes.CoinPayLoad();
          this.payload.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.channelId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CoinHistory');
    if (this.payDate !== null && this.payDate !== undefined) {
      output.writeFieldBegin('payDate', Thrift.Type.I64, 1);
      output.writeI64(this.payDate);
      output.writeFieldEnd();
    }
    if (this.coinBalance !== null && this.coinBalance !== undefined) {
      output.writeFieldBegin('coinBalance', Thrift.Type.I32, 2);
      output.writeI32(this.coinBalance);
      output.writeFieldEnd();
    }
    if (this.coin !== null && this.coin !== undefined) {
      output.writeFieldBegin('coin', Thrift.Type.I32, 3);
      output.writeI32(this.coin);
      output.writeFieldEnd();
    }
    if (this.price !== null && this.price !== undefined) {
      output.writeFieldBegin('price', Thrift.Type.STRING, 4);
      output.writeString(this.price);
      output.writeFieldEnd();
    }
    if (this.title !== null && this.title !== undefined) {
      output.writeFieldBegin('title', Thrift.Type.STRING, 5);
      output.writeString(this.title);
      output.writeFieldEnd();
    }
    if (this.refund !== null && this.refund !== undefined) {
      output.writeFieldBegin('refund', Thrift.Type.BOOL, 6);
      output.writeBool(this.refund);
      output.writeFieldEnd();
    }
    if (this.paySeq !== null && this.paySeq !== undefined) {
      output.writeFieldBegin('paySeq', Thrift.Type.STRING, 7);
      output.writeString(this.paySeq);
      output.writeFieldEnd();
    }
    if (this.currency !== null && this.currency !== undefined) {
      output.writeFieldBegin('currency', Thrift.Type.STRING, 8);
      output.writeString(this.currency);
      output.writeFieldEnd();
    }
    if (this.currencySign !== null && this.currencySign !== undefined) {
      output.writeFieldBegin('currencySign', Thrift.Type.STRING, 9);
      output.writeString(this.currencySign);
      output.writeFieldEnd();
    }
    if (this.displayPrice !== null && this.displayPrice !== undefined) {
      output.writeFieldBegin('displayPrice', Thrift.Type.STRING, 10);
      output.writeString(this.displayPrice);
      output.writeFieldEnd();
    }
    if (this.payload !== null && this.payload !== undefined) {
      output.writeFieldBegin('payload', Thrift.Type.STRUCT, 11);
      this.payload.write(output);
      output.writeFieldEnd();
    }
    if (this.channelId !== null && this.channelId !== undefined) {
      output.writeFieldBegin('channelId', Thrift.Type.STRING, 12);
      output.writeString(this.channelId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CoinHistoryCondition = module.exports.CoinHistoryCondition = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.eddt = null;
    this.appStoreCode = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.eddt !== undefined && args.eddt !== null) {
        this.eddt = args.eddt;
      }
      if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
        this.appStoreCode = args.appStoreCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.eddt = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.appStoreCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CoinHistoryCondition');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 1);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 2);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.eddt !== null && this.eddt !== undefined) {
      output.writeFieldBegin('eddt', Thrift.Type.STRING, 4);
      output.writeString(this.eddt);
      output.writeFieldEnd();
    }
    if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
      output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 5);
      output.writeI32(this.appStoreCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CoinHistoryResult = module.exports.CoinHistoryResult = class {
  constructor(args) {
    this.historys = null;
    this.balance = null;
    this.hasNext = null;
    if (args) {
      if (args.historys !== undefined && args.historys !== null) {
        this.historys = Thrift.copyList(args.historys, [ttypes.CoinHistory]);
      }
      if (args.balance !== undefined && args.balance !== null) {
        this.balance = new ttypes.Coin(args.balance);
      }
      if (args.hasNext !== undefined && args.hasNext !== null) {
        this.hasNext = args.hasNext;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.historys = [];
          const _rtmp3169 = input.readListBegin();
          const _size168 = _rtmp3169.size || 0;
          for (let _i170 = 0; _i170 < _size168; ++_i170) {
            let elem171 = null;
            elem171 = new ttypes.CoinHistory();
            elem171.read(input);
            this.historys.push(elem171);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.balance = new ttypes.Coin();
          this.balance.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.hasNext = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CoinHistoryResult');
    if (this.historys !== null && this.historys !== undefined) {
      output.writeFieldBegin('historys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.historys.length);
      for (let iter172 in this.historys) {
        if (this.historys.hasOwnProperty(iter172)) {
          iter172 = this.historys[iter172];
          iter172.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.balance !== null && this.balance !== undefined) {
      output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
      this.balance.write(output);
      output.writeFieldEnd();
    }
    if (this.hasNext !== null && this.hasNext !== undefined) {
      output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 3);
      output.writeBool(this.hasNext);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CoinPayLoad = module.exports.CoinPayLoad = class {
  constructor(args) {
    this.payCoin = null;
    this.freeCoin = null;
    this.type = null;
    this.rewardCoin = null;
    if (args) {
      if (args.payCoin !== undefined && args.payCoin !== null) {
        this.payCoin = args.payCoin;
      }
      if (args.freeCoin !== undefined && args.freeCoin !== null) {
        this.freeCoin = args.freeCoin;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.rewardCoin !== undefined && args.rewardCoin !== null) {
        this.rewardCoin = args.rewardCoin;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.payCoin = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.freeCoin = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.rewardCoin = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CoinPayLoad');
    if (this.payCoin !== null && this.payCoin !== undefined) {
      output.writeFieldBegin('payCoin', Thrift.Type.I32, 1);
      output.writeI32(this.payCoin);
      output.writeFieldEnd();
    }
    if (this.freeCoin !== null && this.freeCoin !== undefined) {
      output.writeFieldBegin('freeCoin', Thrift.Type.I32, 2);
      output.writeI32(this.freeCoin);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 3);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.rewardCoin !== null && this.rewardCoin !== undefined) {
      output.writeFieldBegin('rewardCoin', Thrift.Type.I32, 4);
      output.writeI32(this.rewardCoin);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CoinProductItem = module.exports.CoinProductItem = class {
  constructor(args) {
    this.itemId = null;
    this.coin = null;
    this.freeCoin = null;
    this.currency = null;
    this.price = null;
    this.displayPrice = null;
    this.name = null;
    this.desc = null;
    if (args) {
      if (args.itemId !== undefined && args.itemId !== null) {
        this.itemId = args.itemId;
      }
      if (args.coin !== undefined && args.coin !== null) {
        this.coin = args.coin;
      }
      if (args.freeCoin !== undefined && args.freeCoin !== null) {
        this.freeCoin = args.freeCoin;
      }
      if (args.currency !== undefined && args.currency !== null) {
        this.currency = args.currency;
      }
      if (args.price !== undefined && args.price !== null) {
        this.price = args.price;
      }
      if (args.displayPrice !== undefined && args.displayPrice !== null) {
        this.displayPrice = args.displayPrice;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.desc !== undefined && args.desc !== null) {
        this.desc = args.desc;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.itemId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.coin = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.freeCoin = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.currency = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.price = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.displayPrice = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.desc = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CoinProductItem');
    if (this.itemId !== null && this.itemId !== undefined) {
      output.writeFieldBegin('itemId', Thrift.Type.STRING, 1);
      output.writeString(this.itemId);
      output.writeFieldEnd();
    }
    if (this.coin !== null && this.coin !== undefined) {
      output.writeFieldBegin('coin', Thrift.Type.I32, 2);
      output.writeI32(this.coin);
      output.writeFieldEnd();
    }
    if (this.freeCoin !== null && this.freeCoin !== undefined) {
      output.writeFieldBegin('freeCoin', Thrift.Type.I32, 3);
      output.writeI32(this.freeCoin);
      output.writeFieldEnd();
    }
    if (this.currency !== null && this.currency !== undefined) {
      output.writeFieldBegin('currency', Thrift.Type.STRING, 5);
      output.writeString(this.currency);
      output.writeFieldEnd();
    }
    if (this.price !== null && this.price !== undefined) {
      output.writeFieldBegin('price', Thrift.Type.STRING, 6);
      output.writeString(this.price);
      output.writeFieldEnd();
    }
    if (this.displayPrice !== null && this.displayPrice !== undefined) {
      output.writeFieldBegin('displayPrice', Thrift.Type.STRING, 7);
      output.writeString(this.displayPrice);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 8);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.desc !== null && this.desc !== undefined) {
      output.writeFieldBegin('desc', Thrift.Type.STRING, 9);
      output.writeString(this.desc);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CoinPurchaseConfirm = module.exports.CoinPurchaseConfirm = class {
  constructor(args) {
    this.orderId = null;
    this.appStoreCode = null;
    this.receipt = null;
    this.signature = null;
    this.seller = null;
    this.requestType = null;
    this.ignoreReceipt = null;
    if (args) {
      if (args.orderId !== undefined && args.orderId !== null) {
        this.orderId = args.orderId;
      }
      if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
        this.appStoreCode = args.appStoreCode;
      }
      if (args.receipt !== undefined && args.receipt !== null) {
        this.receipt = args.receipt;
      }
      if (args.signature !== undefined && args.signature !== null) {
        this.signature = args.signature;
      }
      if (args.seller !== undefined && args.seller !== null) {
        this.seller = args.seller;
      }
      if (args.requestType !== undefined && args.requestType !== null) {
        this.requestType = args.requestType;
      }
      if (args.ignoreReceipt !== undefined && args.ignoreReceipt !== null) {
        this.ignoreReceipt = args.ignoreReceipt;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.orderId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.appStoreCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.receipt = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.signature = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.seller = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.requestType = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.ignoreReceipt = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CoinPurchaseConfirm');
    if (this.orderId !== null && this.orderId !== undefined) {
      output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
      output.writeString(this.orderId);
      output.writeFieldEnd();
    }
    if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
      output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 2);
      output.writeI32(this.appStoreCode);
      output.writeFieldEnd();
    }
    if (this.receipt !== null && this.receipt !== undefined) {
      output.writeFieldBegin('receipt', Thrift.Type.STRING, 3);
      output.writeString(this.receipt);
      output.writeFieldEnd();
    }
    if (this.signature !== null && this.signature !== undefined) {
      output.writeFieldBegin('signature', Thrift.Type.STRING, 4);
      output.writeString(this.signature);
      output.writeFieldEnd();
    }
    if (this.seller !== null && this.seller !== undefined) {
      output.writeFieldBegin('seller', Thrift.Type.STRING, 5);
      output.writeString(this.seller);
      output.writeFieldEnd();
    }
    if (this.requestType !== null && this.requestType !== undefined) {
      output.writeFieldBegin('requestType', Thrift.Type.STRING, 6);
      output.writeString(this.requestType);
      output.writeFieldEnd();
    }
    if (this.ignoreReceipt !== null && this.ignoreReceipt !== undefined) {
      output.writeFieldBegin('ignoreReceipt', Thrift.Type.BOOL, 7);
      output.writeBool(this.ignoreReceipt);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CoinPurchaseReservation = module.exports.CoinPurchaseReservation = class {
  constructor(args) {
    this.productId = null;
    this.country = null;
    this.currency = null;
    this.price = null;
    this.appStoreCode = null;
    this.language = null;
    this.pgCode = null;
    this.redirectUrl = null;
    if (args) {
      if (args.productId !== undefined && args.productId !== null) {
        this.productId = args.productId;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.currency !== undefined && args.currency !== null) {
        this.currency = args.currency;
      }
      if (args.price !== undefined && args.price !== null) {
        this.price = args.price;
      }
      if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
        this.appStoreCode = args.appStoreCode;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.pgCode !== undefined && args.pgCode !== null) {
        this.pgCode = args.pgCode;
      }
      if (args.redirectUrl !== undefined && args.redirectUrl !== null) {
        this.redirectUrl = args.redirectUrl;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.productId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.currency = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.price = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.appStoreCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.pgCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.redirectUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CoinPurchaseReservation');
    if (this.productId !== null && this.productId !== undefined) {
      output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
      output.writeString(this.productId);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 2);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.currency !== null && this.currency !== undefined) {
      output.writeFieldBegin('currency', Thrift.Type.STRING, 3);
      output.writeString(this.currency);
      output.writeFieldEnd();
    }
    if (this.price !== null && this.price !== undefined) {
      output.writeFieldBegin('price', Thrift.Type.STRING, 4);
      output.writeString(this.price);
      output.writeFieldEnd();
    }
    if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
      output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 5);
      output.writeI32(this.appStoreCode);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 6);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.pgCode !== null && this.pgCode !== undefined) {
      output.writeFieldBegin('pgCode', Thrift.Type.I32, 7);
      output.writeI32(this.pgCode);
      output.writeFieldEnd();
    }
    if (this.redirectUrl !== null && this.redirectUrl !== undefined) {
      output.writeFieldBegin('redirectUrl', Thrift.Type.STRING, 8);
      output.writeString(this.redirectUrl);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CoinUseReservation = module.exports.CoinUseReservation = class {
  constructor(args) {
    this.channelId = null;
    this.shopOrderId = null;
    this.appStoreCode = null;
    this.items = null;
    this.country = null;
    if (args) {
      if (args.channelId !== undefined && args.channelId !== null) {
        this.channelId = args.channelId;
      }
      if (args.shopOrderId !== undefined && args.shopOrderId !== null) {
        this.shopOrderId = args.shopOrderId;
      }
      if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
        this.appStoreCode = args.appStoreCode;
      }
      if (args.items !== undefined && args.items !== null) {
        this.items = Thrift.copyList(args.items, [null]);
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.channelId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.shopOrderId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.appStoreCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.items = [];
          const _rtmp3174 = input.readListBegin();
          const _size173 = _rtmp3174.size || 0;
          for (let _i175 = 0; _i175 < _size173; ++_i175) {
            let elem176 = null;
            elem176 = new ttypes.CoinUseReservationItem();
            elem176.read(input);
            this.items.push(elem176);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CoinUseReservation');
    if (this.channelId !== null && this.channelId !== undefined) {
      output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
      output.writeString(this.channelId);
      output.writeFieldEnd();
    }
    if (this.shopOrderId !== null && this.shopOrderId !== undefined) {
      output.writeFieldBegin('shopOrderId', Thrift.Type.STRING, 2);
      output.writeString(this.shopOrderId);
      output.writeFieldEnd();
    }
    if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
      output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 3);
      output.writeI32(this.appStoreCode);
      output.writeFieldEnd();
    }
    if (this.items !== null && this.items !== undefined) {
      output.writeFieldBegin('items', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
      for (let iter177 in this.items) {
        if (this.items.hasOwnProperty(iter177)) {
          iter177 = this.items[iter177];
          iter177.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CoinUseReservationItem = module.exports.CoinUseReservationItem = class {
  constructor(args) {
    this.itemId = null;
    this.itemName = null;
    this.amount = null;
    if (args) {
      if (args.itemId !== undefined && args.itemId !== null) {
        this.itemId = args.itemId;
      }
      if (args.itemName !== undefined && args.itemName !== null) {
        this.itemName = args.itemName;
      }
      if (args.amount !== undefined && args.amount !== null) {
        this.amount = args.amount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.itemId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.itemName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.amount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CoinUseReservationItem');
    if (this.itemId !== null && this.itemId !== undefined) {
      output.writeFieldBegin('itemId', Thrift.Type.STRING, 1);
      output.writeString(this.itemId);
      output.writeFieldEnd();
    }
    if (this.itemName !== null && this.itemName !== undefined) {
      output.writeFieldBegin('itemName', Thrift.Type.STRING, 2);
      output.writeString(this.itemName);
      output.writeFieldEnd();
    }
    if (this.amount !== null && this.amount !== undefined) {
      output.writeFieldBegin('amount', Thrift.Type.I32, 3);
      output.writeI32(this.amount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CommitMessageResult = module.exports.CommitMessageResult = class {
  constructor(args) {
    this.message = null;
    this.code = null;
    this.reason = null;
    this.successCount = null;
    this.failCount = null;
    this.unregisterCount = null;
    this.blockCount = null;
    if (args) {
      if (args.message !== undefined && args.message !== null) {
        this.message = new ttypes.Message(args.message);
      }
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.reason !== undefined && args.reason !== null) {
        this.reason = args.reason;
      }
      if (args.successCount !== undefined && args.successCount !== null) {
        this.successCount = args.successCount;
      }
      if (args.failCount !== undefined && args.failCount !== null) {
        this.failCount = args.failCount;
      }
      if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
        this.unregisterCount = args.unregisterCount;
      }
      if (args.blockCount !== undefined && args.blockCount !== null) {
        this.blockCount = args.blockCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.message = new ttypes.Message();
          this.message.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.code = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.reason = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.successCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.failCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.unregisterCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.blockCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CommitMessageResult');
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
      this.message.write(output);
      output.writeFieldEnd();
    }
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.I32, 2);
      output.writeI32(this.code);
      output.writeFieldEnd();
    }
    if (this.reason !== null && this.reason !== undefined) {
      output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
      output.writeString(this.reason);
      output.writeFieldEnd();
    }
    if (this.successCount !== null && this.successCount !== undefined) {
      output.writeFieldBegin('successCount', Thrift.Type.I64, 4);
      output.writeI64(this.successCount);
      output.writeFieldEnd();
    }
    if (this.failCount !== null && this.failCount !== undefined) {
      output.writeFieldBegin('failCount', Thrift.Type.I64, 5);
      output.writeI64(this.failCount);
      output.writeFieldEnd();
    }
    if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
      output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 6);
      output.writeI64(this.unregisterCount);
      output.writeFieldEnd();
    }
    if (this.blockCount !== null && this.blockCount !== undefined) {
      output.writeFieldBegin('blockCount', Thrift.Type.I64, 7);
      output.writeI64(this.blockCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CommitSendMessagesToMidRequest = module.exports.CommitSendMessagesToMidRequest = class {
  constructor(args) {
    this.seq = null;
    this.messageIds = null;
    if (args) {
      if (args.seq !== undefined && args.seq !== null) {
        this.seq = args.seq;
      }
      if (args.messageIds !== undefined && args.messageIds !== null) {
        this.messageIds = Thrift.copyList(args.messageIds, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.seq = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.messageIds = [];
          const _rtmp3179 = input.readListBegin();
          const _size178 = _rtmp3179.size || 0;
          for (let _i180 = 0; _i180 < _size178; ++_i180) {
            let elem181 = null;
            elem181 = input.readString();
            this.messageIds.push(elem181);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CommitSendMessagesToMidRequest');
    if (this.seq !== null && this.seq !== undefined) {
      output.writeFieldBegin('seq', Thrift.Type.I32, 1);
      output.writeI32(this.seq);
      output.writeFieldEnd();
    }
    if (this.messageIds !== null && this.messageIds !== undefined) {
      output.writeFieldBegin('messageIds', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
      for (let iter182 in this.messageIds) {
        if (this.messageIds.hasOwnProperty(iter182)) {
          iter182 = this.messageIds[iter182];
          output.writeString(iter182);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CommitSendMessagesToMidResponse = module.exports.CommitSendMessagesToMidResponse = class {
  constructor(args) {
    this.successCount = null;
    this.failCount = null;
    this.unregisterCount = null;
    this.blockCount = null;
    if (args) {
      if (args.successCount !== undefined && args.successCount !== null) {
        this.successCount = args.successCount;
      }
      if (args.failCount !== undefined && args.failCount !== null) {
        this.failCount = args.failCount;
      }
      if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
        this.unregisterCount = args.unregisterCount;
      }
      if (args.blockCount !== undefined && args.blockCount !== null) {
        this.blockCount = args.blockCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.successCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.failCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.unregisterCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.blockCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CommitSendMessagesToMidResponse');
    if (this.successCount !== null && this.successCount !== undefined) {
      output.writeFieldBegin('successCount', Thrift.Type.I64, 1);
      output.writeI64(this.successCount);
      output.writeFieldEnd();
    }
    if (this.failCount !== null && this.failCount !== undefined) {
      output.writeFieldBegin('failCount', Thrift.Type.I64, 2);
      output.writeI64(this.failCount);
      output.writeFieldEnd();
    }
    if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
      output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 3);
      output.writeI64(this.unregisterCount);
      output.writeFieldEnd();
    }
    if (this.blockCount !== null && this.blockCount !== undefined) {
      output.writeFieldBegin('blockCount', Thrift.Type.I64, 4);
      output.writeI64(this.blockCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CompactContact = module.exports.CompactContact = class {
  constructor(args) {
    this.mid = null;
    this.createdTime = null;
    this.modifiedTime = null;
    this.status = null;
    this.settings = null;
    this.displayNameOverridden = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.createdTime !== undefined && args.createdTime !== null) {
        this.createdTime = args.createdTime;
      }
      if (args.modifiedTime !== undefined && args.modifiedTime !== null) {
        this.modifiedTime = args.modifiedTime;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.settings !== undefined && args.settings !== null) {
        this.settings = args.settings;
      }
      if (args.displayNameOverridden !== undefined && args.displayNameOverridden !== null) {
        this.displayNameOverridden = args.displayNameOverridden;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createdTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.modifiedTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.settings = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.displayNameOverridden = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CompactContact');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
      output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
      output.writeI64(this.createdTime);
      output.writeFieldEnd();
    }
    if (this.modifiedTime !== null && this.modifiedTime !== undefined) {
      output.writeFieldBegin('modifiedTime', Thrift.Type.I64, 3);
      output.writeI64(this.modifiedTime);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 4);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.settings !== null && this.settings !== undefined) {
      output.writeFieldBegin('settings', Thrift.Type.I64, 5);
      output.writeI64(this.settings);
      output.writeFieldEnd();
    }
    if (this.displayNameOverridden !== null && this.displayNameOverridden !== undefined) {
      output.writeFieldBegin('displayNameOverridden', Thrift.Type.STRING, 6);
      output.writeString(this.displayNameOverridden);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Configurations = module.exports.Configurations = class {
  constructor(args) {
    this.revision = null;
    this.configMap = null;
    if (args) {
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
      if (args.configMap !== undefined && args.configMap !== null) {
        this.configMap = Thrift.copyMap(args.configMap, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.MAP) {
          this.configMap = {};
          const _rtmp3184 = input.readMapBegin();
          const _size183 = _rtmp3184.size || 0;
          for (let _i185 = 0; _i185 < _size183; ++_i185) {
            let key186 = null;
            let val187 = null;
            key186 = input.readString();
            val187 = input.readString();
            this.configMap[key186] = val187;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Configurations');
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 1);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    if (this.configMap !== null && this.configMap !== undefined) {
      output.writeFieldBegin('configMap', Thrift.Type.MAP, 2);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configMap));
      for (let kiter188 in this.configMap) {
        if (this.configMap.hasOwnProperty(kiter188)) {
          let viter189 = this.configMap[kiter188];
          output.writeString(kiter188);
          output.writeString(viter189);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Contact = module.exports.Contact = class {
  constructor(args) {
    this.mid = null;
    this.createdTime = null;
    this.type = null;
    this.status = null;
    this.relation = null;
    this.displayName = null;
    this.phoneticName = null;
    this.pictureStatus = null;
    this.thumbnailUrl = null;
    this.statusMessage = null;
    this.displayNameOverridden = null;
    this.favoriteTime = null;
    this.capableVoiceCall = null;
    this.capableVideoCall = null;
    this.capableMyhome = null;
    this.capableBuddy = null;
    this.attributes = null;
    this.settings = null;
    this.picturePath = null;
    this.recommendParams = null;
    this.friendRequestStatus = null;
    this.musicProfile = null;
    this.videoProfile = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.createdTime !== undefined && args.createdTime !== null) {
        this.createdTime = args.createdTime;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.relation !== undefined && args.relation !== null) {
        this.relation = args.relation;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.phoneticName !== undefined && args.phoneticName !== null) {
        this.phoneticName = args.phoneticName;
      }
      if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
        this.pictureStatus = args.pictureStatus;
      }
      if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
        this.thumbnailUrl = args.thumbnailUrl;
      }
      if (args.statusMessage !== undefined && args.statusMessage !== null) {
        this.statusMessage = args.statusMessage;
      }
      if (args.displayNameOverridden !== undefined && args.displayNameOverridden !== null) {
        this.displayNameOverridden = args.displayNameOverridden;
      }
      if (args.favoriteTime !== undefined && args.favoriteTime !== null) {
        this.favoriteTime = args.favoriteTime;
      }
      if (args.capableVoiceCall !== undefined && args.capableVoiceCall !== null) {
        this.capableVoiceCall = args.capableVoiceCall;
      }
      if (args.capableVideoCall !== undefined && args.capableVideoCall !== null) {
        this.capableVideoCall = args.capableVideoCall;
      }
      if (args.capableMyhome !== undefined && args.capableMyhome !== null) {
        this.capableMyhome = args.capableMyhome;
      }
      if (args.capableBuddy !== undefined && args.capableBuddy !== null) {
        this.capableBuddy = args.capableBuddy;
      }
      if (args.attributes !== undefined && args.attributes !== null) {
        this.attributes = args.attributes;
      }
      if (args.settings !== undefined && args.settings !== null) {
        this.settings = args.settings;
      }
      if (args.picturePath !== undefined && args.picturePath !== null) {
        this.picturePath = args.picturePath;
      }
      if (args.recommendParams !== undefined && args.recommendParams !== null) {
        this.recommendParams = args.recommendParams;
      }
      if (args.friendRequestStatus !== undefined && args.friendRequestStatus !== null) {
        this.friendRequestStatus = args.friendRequestStatus;
      }
      if (args.musicProfile !== undefined && args.musicProfile !== null) {
        this.musicProfile = args.musicProfile;
      }
      if (args.videoProfile !== undefined && args.videoProfile !== null) {
        this.videoProfile = args.videoProfile;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createdTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.I32) {
          this.relation = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.STRING) {
          this.phoneticName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.STRING) {
          this.pictureStatus = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.STRING) {
          this.thumbnailUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.STRING) {
          this.statusMessage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.STRING) {
          this.displayNameOverridden = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 28:
        if (ftype == Thrift.Type.I64) {
          this.favoriteTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.BOOL) {
          this.capableVoiceCall = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.BOOL) {
          this.capableVideoCall = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 33:
        if (ftype == Thrift.Type.BOOL) {
          this.capableMyhome = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 34:
        if (ftype == Thrift.Type.BOOL) {
          this.capableBuddy = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 35:
        if (ftype == Thrift.Type.I32) {
          this.attributes = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 36:
        if (ftype == Thrift.Type.I64) {
          this.settings = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 37:
        if (ftype == Thrift.Type.STRING) {
          this.picturePath = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 38:
        if (ftype == Thrift.Type.STRING) {
          this.recommendParams = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 39:
        if (ftype == Thrift.Type.I32) {
          this.friendRequestStatus = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 40:
        if (ftype == Thrift.Type.STRING) {
          this.musicProfile = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 42:
        if (ftype == Thrift.Type.STRING) {
          this.videoProfile = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Contact');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
      output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
      output.writeI64(this.createdTime);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 10);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 11);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.relation !== null && this.relation !== undefined) {
      output.writeFieldBegin('relation', Thrift.Type.I32, 21);
      output.writeI32(this.relation);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 22);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.phoneticName !== null && this.phoneticName !== undefined) {
      output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 23);
      output.writeString(this.phoneticName);
      output.writeFieldEnd();
    }
    if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
      output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 24);
      output.writeString(this.pictureStatus);
      output.writeFieldEnd();
    }
    if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
      output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 25);
      output.writeString(this.thumbnailUrl);
      output.writeFieldEnd();
    }
    if (this.statusMessage !== null && this.statusMessage !== undefined) {
      output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 26);
      output.writeString(this.statusMessage);
      output.writeFieldEnd();
    }
    if (this.displayNameOverridden !== null && this.displayNameOverridden !== undefined) {
      output.writeFieldBegin('displayNameOverridden', Thrift.Type.STRING, 27);
      output.writeString(this.displayNameOverridden);
      output.writeFieldEnd();
    }
    if (this.favoriteTime !== null && this.favoriteTime !== undefined) {
      output.writeFieldBegin('favoriteTime', Thrift.Type.I64, 28);
      output.writeI64(this.favoriteTime);
      output.writeFieldEnd();
    }
    if (this.capableVoiceCall !== null && this.capableVoiceCall !== undefined) {
      output.writeFieldBegin('capableVoiceCall', Thrift.Type.BOOL, 31);
      output.writeBool(this.capableVoiceCall);
      output.writeFieldEnd();
    }
    if (this.capableVideoCall !== null && this.capableVideoCall !== undefined) {
      output.writeFieldBegin('capableVideoCall', Thrift.Type.BOOL, 32);
      output.writeBool(this.capableVideoCall);
      output.writeFieldEnd();
    }
    if (this.capableMyhome !== null && this.capableMyhome !== undefined) {
      output.writeFieldBegin('capableMyhome', Thrift.Type.BOOL, 33);
      output.writeBool(this.capableMyhome);
      output.writeFieldEnd();
    }
    if (this.capableBuddy !== null && this.capableBuddy !== undefined) {
      output.writeFieldBegin('capableBuddy', Thrift.Type.BOOL, 34);
      output.writeBool(this.capableBuddy);
      output.writeFieldEnd();
    }
    if (this.attributes !== null && this.attributes !== undefined) {
      output.writeFieldBegin('attributes', Thrift.Type.I32, 35);
      output.writeI32(this.attributes);
      output.writeFieldEnd();
    }
    if (this.settings !== null && this.settings !== undefined) {
      output.writeFieldBegin('settings', Thrift.Type.I64, 36);
      output.writeI64(this.settings);
      output.writeFieldEnd();
    }
    if (this.picturePath !== null && this.picturePath !== undefined) {
      output.writeFieldBegin('picturePath', Thrift.Type.STRING, 37);
      output.writeString(this.picturePath);
      output.writeFieldEnd();
    }
    if (this.recommendParams !== null && this.recommendParams !== undefined) {
      output.writeFieldBegin('recommendParams', Thrift.Type.STRING, 38);
      output.writeString(this.recommendParams);
      output.writeFieldEnd();
    }
    if (this.friendRequestStatus !== null && this.friendRequestStatus !== undefined) {
      output.writeFieldBegin('friendRequestStatus', Thrift.Type.I32, 39);
      output.writeI32(this.friendRequestStatus);
      output.writeFieldEnd();
    }
    if (this.musicProfile !== null && this.musicProfile !== undefined) {
      output.writeFieldBegin('musicProfile', Thrift.Type.STRING, 40);
      output.writeString(this.musicProfile);
      output.writeFieldEnd();
    }
    if (this.videoProfile !== null && this.videoProfile !== undefined) {
      output.writeFieldBegin('videoProfile', Thrift.Type.STRING, 42);
      output.writeString(this.videoProfile);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ContactModification = module.exports.ContactModification = class {
  constructor(args) {
    this.type = null;
    this.luid = null;
    this.phones = null;
    this.emails = null;
    this.userids = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.luid !== undefined && args.luid !== null) {
        this.luid = args.luid;
      }
      if (args.phones !== undefined && args.phones !== null) {
        this.phones = Thrift.copyList(args.phones, [null]);
      }
      if (args.emails !== undefined && args.emails !== null) {
        this.emails = Thrift.copyList(args.emails, [null]);
      }
      if (args.userids !== undefined && args.userids !== null) {
        this.userids = Thrift.copyList(args.userids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.luid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.LIST) {
          this.phones = [];
          const _rtmp3191 = input.readListBegin();
          const _size190 = _rtmp3191.size || 0;
          for (let _i192 = 0; _i192 < _size190; ++_i192) {
            let elem193 = null;
            elem193 = input.readString();
            this.phones.push(elem193);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.LIST) {
          this.emails = [];
          const _rtmp3195 = input.readListBegin();
          const _size194 = _rtmp3195.size || 0;
          for (let _i196 = 0; _i196 < _size194; ++_i196) {
            let elem197 = null;
            elem197 = input.readString();
            this.emails.push(elem197);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.LIST) {
          this.userids = [];
          const _rtmp3199 = input.readListBegin();
          const _size198 = _rtmp3199.size || 0;
          for (let _i200 = 0; _i200 < _size198; ++_i200) {
            let elem201 = null;
            elem201 = input.readString();
            this.userids.push(elem201);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContactModification');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.luid !== null && this.luid !== undefined) {
      output.writeFieldBegin('luid', Thrift.Type.STRING, 2);
      output.writeString(this.luid);
      output.writeFieldEnd();
    }
    if (this.phones !== null && this.phones !== undefined) {
      output.writeFieldBegin('phones', Thrift.Type.LIST, 11);
      output.writeListBegin(Thrift.Type.STRING, this.phones.length);
      for (let iter202 in this.phones) {
        if (this.phones.hasOwnProperty(iter202)) {
          iter202 = this.phones[iter202];
          output.writeString(iter202);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.emails !== null && this.emails !== undefined) {
      output.writeFieldBegin('emails', Thrift.Type.LIST, 12);
      output.writeListBegin(Thrift.Type.STRING, this.emails.length);
      for (let iter203 in this.emails) {
        if (this.emails.hasOwnProperty(iter203)) {
          iter203 = this.emails[iter203];
          output.writeString(iter203);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.userids !== null && this.userids !== undefined) {
      output.writeFieldBegin('userids', Thrift.Type.LIST, 13);
      output.writeListBegin(Thrift.Type.STRING, this.userids.length);
      for (let iter204 in this.userids) {
        if (this.userids.hasOwnProperty(iter204)) {
          iter204 = this.userids[iter204];
          output.writeString(iter204);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ContactRegistration = module.exports.ContactRegistration = class {
  constructor(args) {
    this.contact = null;
    this.luid = null;
    this.contactType = null;
    this.contactKey = null;
    if (args) {
      if (args.contact !== undefined && args.contact !== null) {
        this.contact = new ttypes.Contact(args.contact);
      }
      if (args.luid !== undefined && args.luid !== null) {
        this.luid = args.luid;
      }
      if (args.contactType !== undefined && args.contactType !== null) {
        this.contactType = args.contactType;
      }
      if (args.contactKey !== undefined && args.contactKey !== null) {
        this.contactKey = args.contactKey;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.contact = new ttypes.Contact();
          this.contact.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.luid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.contactType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.contactKey = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContactRegistration');
    if (this.contact !== null && this.contact !== undefined) {
      output.writeFieldBegin('contact', Thrift.Type.STRUCT, 1);
      this.contact.write(output);
      output.writeFieldEnd();
    }
    if (this.luid !== null && this.luid !== undefined) {
      output.writeFieldBegin('luid', Thrift.Type.STRING, 10);
      output.writeString(this.luid);
      output.writeFieldEnd();
    }
    if (this.contactType !== null && this.contactType !== undefined) {
      output.writeFieldBegin('contactType', Thrift.Type.I32, 11);
      output.writeI32(this.contactType);
      output.writeFieldEnd();
    }
    if (this.contactKey !== null && this.contactKey !== undefined) {
      output.writeFieldBegin('contactKey', Thrift.Type.STRING, 12);
      output.writeString(this.contactKey);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ContactReport = module.exports.ContactReport = class {
  constructor(args) {
    this.mid = null;
    this.exists = null;
    this.contact = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.exists !== undefined && args.exists !== null) {
        this.exists = args.exists;
      }
      if (args.contact !== undefined && args.contact !== null) {
        this.contact = new ttypes.Contact(args.contact);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.exists = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.contact = new ttypes.Contact();
          this.contact.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContactReport');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.exists !== null && this.exists !== undefined) {
      output.writeFieldBegin('exists', Thrift.Type.BOOL, 2);
      output.writeBool(this.exists);
      output.writeFieldEnd();
    }
    if (this.contact !== null && this.contact !== undefined) {
      output.writeFieldBegin('contact', Thrift.Type.STRUCT, 3);
      this.contact.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ContactReportResult = module.exports.ContactReportResult = class {
  constructor(args) {
    this.mid = null;
    this.exists = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.exists !== undefined && args.exists !== null) {
        this.exists = args.exists;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.exists = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContactReportResult');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.exists !== null && this.exists !== undefined) {
      output.writeFieldBegin('exists', Thrift.Type.BOOL, 2);
      output.writeBool(this.exists);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ContactTransition = module.exports.ContactTransition = class {
  constructor(args) {
    this.ownerMid = null;
    this.targetMid = null;
    this.previousStatus = null;
    this.resultStatus = null;
    if (args) {
      if (args.ownerMid !== undefined && args.ownerMid !== null) {
        this.ownerMid = args.ownerMid;
      }
      if (args.targetMid !== undefined && args.targetMid !== null) {
        this.targetMid = args.targetMid;
      }
      if (args.previousStatus !== undefined && args.previousStatus !== null) {
        this.previousStatus = args.previousStatus;
      }
      if (args.resultStatus !== undefined && args.resultStatus !== null) {
        this.resultStatus = args.resultStatus;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ownerMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.targetMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.previousStatus = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.resultStatus = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContactTransition');
    if (this.ownerMid !== null && this.ownerMid !== undefined) {
      output.writeFieldBegin('ownerMid', Thrift.Type.STRING, 1);
      output.writeString(this.ownerMid);
      output.writeFieldEnd();
    }
    if (this.targetMid !== null && this.targetMid !== undefined) {
      output.writeFieldBegin('targetMid', Thrift.Type.STRING, 2);
      output.writeString(this.targetMid);
      output.writeFieldEnd();
    }
    if (this.previousStatus !== null && this.previousStatus !== undefined) {
      output.writeFieldBegin('previousStatus', Thrift.Type.I32, 3);
      output.writeI32(this.previousStatus);
      output.writeFieldEnd();
    }
    if (this.resultStatus !== null && this.resultStatus !== undefined) {
      output.writeFieldBegin('resultStatus', Thrift.Type.I32, 4);
      output.writeI32(this.resultStatus);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const DeviceInfo = module.exports.DeviceInfo = class {
  constructor(args) {
    this.deviceName = null;
    this.systemName = null;
    this.systemVersion = null;
    this.model = null;
    this.webViewVersion = null;
    this.carrierCode = null;
    this.carrierName = null;
    this.applicationType = null;
    if (args) {
      if (args.deviceName !== undefined && args.deviceName !== null) {
        this.deviceName = args.deviceName;
      }
      if (args.systemName !== undefined && args.systemName !== null) {
        this.systemName = args.systemName;
      }
      if (args.systemVersion !== undefined && args.systemVersion !== null) {
        this.systemVersion = args.systemVersion;
      }
      if (args.model !== undefined && args.model !== null) {
        this.model = args.model;
      }
      if (args.webViewVersion !== undefined && args.webViewVersion !== null) {
        this.webViewVersion = args.webViewVersion;
      }
      if (args.carrierCode !== undefined && args.carrierCode !== null) {
        this.carrierCode = args.carrierCode;
      }
      if (args.carrierName !== undefined && args.carrierName !== null) {
        this.carrierName = args.carrierName;
      }
      if (args.applicationType !== undefined && args.applicationType !== null) {
        this.applicationType = args.applicationType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.deviceName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.systemName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.systemVersion = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.model = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.webViewVersion = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.carrierCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.carrierName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.I32) {
          this.applicationType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DeviceInfo');
    if (this.deviceName !== null && this.deviceName !== undefined) {
      output.writeFieldBegin('deviceName', Thrift.Type.STRING, 1);
      output.writeString(this.deviceName);
      output.writeFieldEnd();
    }
    if (this.systemName !== null && this.systemName !== undefined) {
      output.writeFieldBegin('systemName', Thrift.Type.STRING, 2);
      output.writeString(this.systemName);
      output.writeFieldEnd();
    }
    if (this.systemVersion !== null && this.systemVersion !== undefined) {
      output.writeFieldBegin('systemVersion', Thrift.Type.STRING, 3);
      output.writeString(this.systemVersion);
      output.writeFieldEnd();
    }
    if (this.model !== null && this.model !== undefined) {
      output.writeFieldBegin('model', Thrift.Type.STRING, 4);
      output.writeString(this.model);
      output.writeFieldEnd();
    }
    if (this.webViewVersion !== null && this.webViewVersion !== undefined) {
      output.writeFieldBegin('webViewVersion', Thrift.Type.STRING, 5);
      output.writeString(this.webViewVersion);
      output.writeFieldEnd();
    }
    if (this.carrierCode !== null && this.carrierCode !== undefined) {
      output.writeFieldBegin('carrierCode', Thrift.Type.I32, 10);
      output.writeI32(this.carrierCode);
      output.writeFieldEnd();
    }
    if (this.carrierName !== null && this.carrierName !== undefined) {
      output.writeFieldBegin('carrierName', Thrift.Type.STRING, 11);
      output.writeString(this.carrierName);
      output.writeFieldEnd();
    }
    if (this.applicationType !== null && this.applicationType !== undefined) {
      output.writeFieldBegin('applicationType', Thrift.Type.I32, 20);
      output.writeI32(this.applicationType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const E2EEGroupSharedKey = module.exports.E2EEGroupSharedKey = class {
  constructor(args) {
    this.version = null;
    this.groupKeyId = null;
    this.creator = null;
    this.creatorKeyId = null;
    this.receiver = null;
    this.receiverKeyId = null;
    this.encryptedSharedKey = null;
    this.allowedTypes = null;
    if (args) {
      if (args.version !== undefined && args.version !== null) {
        this.version = args.version;
      }
      if (args.groupKeyId !== undefined && args.groupKeyId !== null) {
        this.groupKeyId = args.groupKeyId;
      }
      if (args.creator !== undefined && args.creator !== null) {
        this.creator = args.creator;
      }
      if (args.creatorKeyId !== undefined && args.creatorKeyId !== null) {
        this.creatorKeyId = args.creatorKeyId;
      }
      if (args.receiver !== undefined && args.receiver !== null) {
        this.receiver = args.receiver;
      }
      if (args.receiverKeyId !== undefined && args.receiverKeyId !== null) {
        this.receiverKeyId = args.receiverKeyId;
      }
      if (args.encryptedSharedKey !== undefined && args.encryptedSharedKey !== null) {
        this.encryptedSharedKey = args.encryptedSharedKey;
      }
      if (args.allowedTypes !== undefined && args.allowedTypes !== null) {
        this.allowedTypes = Thrift.copyList(args.allowedTypes, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.version = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.groupKeyId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.creator = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.creatorKeyId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.receiver = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.receiverKeyId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.encryptedSharedKey = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.SET) {
          this.allowedTypes = [];
          const _rtmp3206 = input.readSetBegin();
          const _size205 = _rtmp3206.size || 0;
          for (let _i207 = 0; _i207 < _size205; ++_i207) {
            let elem208 = null;
            elem208 = input.readI32();
            this.allowedTypes.push(elem208);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('E2EEGroupSharedKey');
    if (this.version !== null && this.version !== undefined) {
      output.writeFieldBegin('version', Thrift.Type.I32, 1);
      output.writeI32(this.version);
      output.writeFieldEnd();
    }
    if (this.groupKeyId !== null && this.groupKeyId !== undefined) {
      output.writeFieldBegin('groupKeyId', Thrift.Type.I32, 2);
      output.writeI32(this.groupKeyId);
      output.writeFieldEnd();
    }
    if (this.creator !== null && this.creator !== undefined) {
      output.writeFieldBegin('creator', Thrift.Type.STRING, 3);
      output.writeString(this.creator);
      output.writeFieldEnd();
    }
    if (this.creatorKeyId !== null && this.creatorKeyId !== undefined) {
      output.writeFieldBegin('creatorKeyId', Thrift.Type.I32, 4);
      output.writeI32(this.creatorKeyId);
      output.writeFieldEnd();
    }
    if (this.receiver !== null && this.receiver !== undefined) {
      output.writeFieldBegin('receiver', Thrift.Type.STRING, 5);
      output.writeString(this.receiver);
      output.writeFieldEnd();
    }
    if (this.receiverKeyId !== null && this.receiverKeyId !== undefined) {
      output.writeFieldBegin('receiverKeyId', Thrift.Type.I32, 6);
      output.writeI32(this.receiverKeyId);
      output.writeFieldEnd();
    }
    if (this.encryptedSharedKey !== null && this.encryptedSharedKey !== undefined) {
      output.writeFieldBegin('encryptedSharedKey', Thrift.Type.STRING, 7);
      output.writeBinary(this.encryptedSharedKey);
      output.writeFieldEnd();
    }
    if (this.allowedTypes !== null && this.allowedTypes !== undefined) {
      output.writeFieldBegin('allowedTypes', Thrift.Type.SET, 8);
      output.writeSetBegin(Thrift.Type.I32, this.allowedTypes.length);
      for (let iter209 in this.allowedTypes) {
        if (this.allowedTypes.hasOwnProperty(iter209)) {
          iter209 = this.allowedTypes[iter209];
          output.writeI32(iter209);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const E2EEKey = module.exports.E2EEKey = class {
  constructor(args) {
    this.version = null;
    this.keyId = null;
    this.publicKey = null;
    this.privateKey = null;
    this.createdTime = null;
    if (args) {
      if (args.version !== undefined && args.version !== null) {
        this.version = args.version;
      }
      if (args.keyId !== undefined && args.keyId !== null) {
        this.keyId = args.keyId;
      }
      if (args.publicKey !== undefined && args.publicKey !== null) {
        this.publicKey = args.publicKey;
      }
      if (args.privateKey !== undefined && args.privateKey !== null) {
        this.privateKey = args.privateKey;
      }
      if (args.createdTime !== undefined && args.createdTime !== null) {
        this.createdTime = args.createdTime;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.version = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.keyId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.publicKey = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.privateKey = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.createdTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('E2EEKey');
    if (this.version !== null && this.version !== undefined) {
      output.writeFieldBegin('version', Thrift.Type.I32, 1);
      output.writeI32(this.version);
      output.writeFieldEnd();
    }
    if (this.keyId !== null && this.keyId !== undefined) {
      output.writeFieldBegin('keyId', Thrift.Type.I32, 2);
      output.writeI32(this.keyId);
      output.writeFieldEnd();
    }
    if (this.publicKey !== null && this.publicKey !== undefined) {
      output.writeFieldBegin('publicKey', Thrift.Type.STRING, 4);
      output.writeBinary(this.publicKey);
      output.writeFieldEnd();
    }
    if (this.privateKey !== null && this.privateKey !== undefined) {
      output.writeFieldBegin('privateKey', Thrift.Type.STRING, 5);
      output.writeBinary(this.privateKey);
      output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
      output.writeFieldBegin('createdTime', Thrift.Type.I64, 6);
      output.writeI64(this.createdTime);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const E2EEKeyChain = module.exports.E2EEKeyChain = class {
  constructor(args) {
    this.keychain = null;
    if (args) {
      if (args.keychain !== undefined && args.keychain !== null) {
        this.keychain = Thrift.copyList(args.keychain, [ttypes.E2EEKey]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.keychain = [];
          const _rtmp3211 = input.readListBegin();
          const _size210 = _rtmp3211.size || 0;
          for (let _i212 = 0; _i212 < _size210; ++_i212) {
            let elem213 = null;
            elem213 = new ttypes.E2EEKey();
            elem213.read(input);
            this.keychain.push(elem213);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('E2EEKeyChain');
    if (this.keychain !== null && this.keychain !== undefined) {
      output.writeFieldBegin('keychain', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.keychain.length);
      for (let iter214 in this.keychain) {
        if (this.keychain.hasOwnProperty(iter214)) {
          iter214 = this.keychain[iter214];
          iter214.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const E2EENegotiationResult = module.exports.E2EENegotiationResult = class {
  constructor(args) {
    this.allowedTypes = null;
    this.publicKey = null;
    if (args) {
      if (args.allowedTypes !== undefined && args.allowedTypes !== null) {
        this.allowedTypes = Thrift.copyList(args.allowedTypes, [null]);
      }
      if (args.publicKey !== undefined && args.publicKey !== null) {
        this.publicKey = new ttypes.E2EEPublicKey(args.publicKey);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.SET) {
          this.allowedTypes = [];
          const _rtmp3216 = input.readSetBegin();
          const _size215 = _rtmp3216.size || 0;
          for (let _i217 = 0; _i217 < _size215; ++_i217) {
            let elem218 = null;
            elem218 = input.readI32();
            this.allowedTypes.push(elem218);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.publicKey = new ttypes.E2EEPublicKey();
          this.publicKey.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('E2EENegotiationResult');
    if (this.allowedTypes !== null && this.allowedTypes !== undefined) {
      output.writeFieldBegin('allowedTypes', Thrift.Type.SET, 1);
      output.writeSetBegin(Thrift.Type.I32, this.allowedTypes.length);
      for (let iter219 in this.allowedTypes) {
        if (this.allowedTypes.hasOwnProperty(iter219)) {
          iter219 = this.allowedTypes[iter219];
          output.writeI32(iter219);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.publicKey !== null && this.publicKey !== undefined) {
      output.writeFieldBegin('publicKey', Thrift.Type.STRUCT, 2);
      this.publicKey.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const E2EEPublicKey = module.exports.E2EEPublicKey = class {
  constructor(args) {
    this.version = null;
    this.keyId = null;
    this.keyData = null;
    this.createdTime = null;
    if (args) {
      if (args.version !== undefined && args.version !== null) {
        this.version = args.version;
      }
      if (args.keyId !== undefined && args.keyId !== null) {
        this.keyId = args.keyId;
      }
      if (args.keyData !== undefined && args.keyData !== null) {
        this.keyData = args.keyData;
      }
      if (args.createdTime !== undefined && args.createdTime !== null) {
        this.createdTime = args.createdTime;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.version = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.keyId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.keyData = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.createdTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('E2EEPublicKey');
    if (this.version !== null && this.version !== undefined) {
      output.writeFieldBegin('version', Thrift.Type.I32, 1);
      output.writeI32(this.version);
      output.writeFieldEnd();
    }
    if (this.keyId !== null && this.keyId !== undefined) {
      output.writeFieldBegin('keyId', Thrift.Type.I32, 2);
      output.writeI32(this.keyId);
      output.writeFieldEnd();
    }
    if (this.keyData !== null && this.keyData !== undefined) {
      output.writeFieldBegin('keyData', Thrift.Type.STRING, 4);
      output.writeBinary(this.keyData);
      output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
      output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
      output.writeI64(this.createdTime);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const EmailConfirmation = module.exports.EmailConfirmation = class {
  constructor(args) {
    this.usePasswordSet = null;
    this.email = null;
    this.password = null;
    this.ignoreDuplication = null;
    this.useEmailOnly = null;
    if (args) {
      if (args.usePasswordSet !== undefined && args.usePasswordSet !== null) {
        this.usePasswordSet = args.usePasswordSet;
      }
      if (args.email !== undefined && args.email !== null) {
        this.email = args.email;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
      if (args.ignoreDuplication !== undefined && args.ignoreDuplication !== null) {
        this.ignoreDuplication = args.ignoreDuplication;
      }
      if (args.useEmailOnly !== undefined && args.useEmailOnly !== null) {
        this.useEmailOnly = args.useEmailOnly;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.usePasswordSet = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.email = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.ignoreDuplication = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.useEmailOnly = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('EmailConfirmation');
    if (this.usePasswordSet !== null && this.usePasswordSet !== undefined) {
      output.writeFieldBegin('usePasswordSet', Thrift.Type.BOOL, 1);
      output.writeBool(this.usePasswordSet);
      output.writeFieldEnd();
    }
    if (this.email !== null && this.email !== undefined) {
      output.writeFieldBegin('email', Thrift.Type.STRING, 2);
      output.writeString(this.email);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 3);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    if (this.ignoreDuplication !== null && this.ignoreDuplication !== undefined) {
      output.writeFieldBegin('ignoreDuplication', Thrift.Type.BOOL, 4);
      output.writeBool(this.ignoreDuplication);
      output.writeFieldEnd();
    }
    if (this.useEmailOnly !== null && this.useEmailOnly !== undefined) {
      output.writeFieldBegin('useEmailOnly', Thrift.Type.BOOL, 5);
      output.writeBool(this.useEmailOnly);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const EmailConfirmationResult = module.exports.EmailConfirmationResult = class {
  constructor(args) {
    this.certificate = null;
    if (args) {
      if (args.certificate !== undefined && args.certificate !== null) {
        this.certificate = args.certificate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.certificate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('EmailConfirmationResult');
    if (this.certificate !== null && this.certificate !== undefined) {
      output.writeFieldBegin('certificate', Thrift.Type.STRING, 1);
      output.writeString(this.certificate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const EmailConfirmationSession = module.exports.EmailConfirmationSession = class {
  constructor(args) {
    this.emailConfirmationType = null;
    this.verifier = null;
    this.targetEmail = null;
    if (args) {
      if (args.emailConfirmationType !== undefined && args.emailConfirmationType !== null) {
        this.emailConfirmationType = args.emailConfirmationType;
      }
      if (args.verifier !== undefined && args.verifier !== null) {
        this.verifier = args.verifier;
      }
      if (args.targetEmail !== undefined && args.targetEmail !== null) {
        this.targetEmail = args.targetEmail;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.emailConfirmationType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.verifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.targetEmail = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('EmailConfirmationSession');
    if (this.emailConfirmationType !== null && this.emailConfirmationType !== undefined) {
      output.writeFieldBegin('emailConfirmationType', Thrift.Type.I32, 1);
      output.writeI32(this.emailConfirmationType);
      output.writeFieldEnd();
    }
    if (this.verifier !== null && this.verifier !== undefined) {
      output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
      output.writeString(this.verifier);
      output.writeFieldEnd();
    }
    if (this.targetEmail !== null && this.targetEmail !== undefined) {
      output.writeFieldBegin('targetEmail', Thrift.Type.STRING, 3);
      output.writeString(this.targetEmail);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ExtendedProfile = module.exports.ExtendedProfile = class {
  constructor(args) {
    this.birthday = null;
    if (args) {
      if (args.birthday !== undefined && args.birthday !== null) {
        this.birthday = new ttypes.ExtendedProfileBirthday(args.birthday);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.birthday = new ttypes.ExtendedProfileBirthday();
          this.birthday.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ExtendedProfile');
    if (this.birthday !== null && this.birthday !== undefined) {
      output.writeFieldBegin('birthday', Thrift.Type.STRUCT, 1);
      this.birthday.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ExtendedProfileBirthday = module.exports.ExtendedProfileBirthday = class {
  constructor(args) {
    this.year = null;
    this.yearPrivacyLevelType = null;
    this.yearEnabled = null;
    this.day = null;
    this.dayPrivacyLevelType = null;
    this.dayEnabled = null;
    if (args) {
      if (args.year !== undefined && args.year !== null) {
        this.year = args.year;
      }
      if (args.yearPrivacyLevelType !== undefined && args.yearPrivacyLevelType !== null) {
        this.yearPrivacyLevelType = args.yearPrivacyLevelType;
      }
      if (args.yearEnabled !== undefined && args.yearEnabled !== null) {
        this.yearEnabled = args.yearEnabled;
      }
      if (args.day !== undefined && args.day !== null) {
        this.day = args.day;
      }
      if (args.dayPrivacyLevelType !== undefined && args.dayPrivacyLevelType !== null) {
        this.dayPrivacyLevelType = args.dayPrivacyLevelType;
      }
      if (args.dayEnabled !== undefined && args.dayEnabled !== null) {
        this.dayEnabled = args.dayEnabled;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.year = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.yearPrivacyLevelType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.yearEnabled = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.day = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.dayPrivacyLevelType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.dayEnabled = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ExtendedProfileBirthday');
    if (this.year !== null && this.year !== undefined) {
      output.writeFieldBegin('year', Thrift.Type.STRING, 1);
      output.writeString(this.year);
      output.writeFieldEnd();
    }
    if (this.yearPrivacyLevelType !== null && this.yearPrivacyLevelType !== undefined) {
      output.writeFieldBegin('yearPrivacyLevelType', Thrift.Type.I32, 2);
      output.writeI32(this.yearPrivacyLevelType);
      output.writeFieldEnd();
    }
    if (this.yearEnabled !== null && this.yearEnabled !== undefined) {
      output.writeFieldBegin('yearEnabled', Thrift.Type.BOOL, 3);
      output.writeBool(this.yearEnabled);
      output.writeFieldEnd();
    }
    if (this.day !== null && this.day !== undefined) {
      output.writeFieldBegin('day', Thrift.Type.STRING, 5);
      output.writeString(this.day);
      output.writeFieldEnd();
    }
    if (this.dayPrivacyLevelType !== null && this.dayPrivacyLevelType !== undefined) {
      output.writeFieldBegin('dayPrivacyLevelType', Thrift.Type.I32, 6);
      output.writeI32(this.dayPrivacyLevelType);
      output.writeFieldEnd();
    }
    if (this.dayEnabled !== null && this.dayEnabled !== undefined) {
      output.writeFieldBegin('dayEnabled', Thrift.Type.BOOL, 7);
      output.writeBool(this.dayEnabled);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FriendChannelMatricesResponse = module.exports.FriendChannelMatricesResponse = class {
  constructor(args) {
    this.expires = null;
    this.matrices = null;
    if (args) {
      if (args.expires !== undefined && args.expires !== null) {
        this.expires = args.expires;
      }
      if (args.matrices !== undefined && args.matrices !== null) {
        this.matrices = Thrift.copyList(args.matrices, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.expires = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.matrices = [];
          const _rtmp3221 = input.readListBegin();
          const _size220 = _rtmp3221.size || 0;
          for (let _i222 = 0; _i222 < _size220; ++_i222) {
            let elem223 = null;
            elem223 = new ttypes.FriendChannelMatrix();
            elem223.read(input);
            this.matrices.push(elem223);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FriendChannelMatricesResponse');
    if (this.expires !== null && this.expires !== undefined) {
      output.writeFieldBegin('expires', Thrift.Type.I64, 1);
      output.writeI64(this.expires);
      output.writeFieldEnd();
    }
    if (this.matrices !== null && this.matrices !== undefined) {
      output.writeFieldBegin('matrices', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.matrices.length);
      for (let iter224 in this.matrices) {
        if (this.matrices.hasOwnProperty(iter224)) {
          iter224 = this.matrices[iter224];
          iter224.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FriendChannelMatrix = module.exports.FriendChannelMatrix = class {
  constructor(args) {
    this.channelId = null;
    this.representMid = null;
    this.count = null;
    this.point = null;
    if (args) {
      if (args.channelId !== undefined && args.channelId !== null) {
        this.channelId = args.channelId;
      }
      if (args.representMid !== undefined && args.representMid !== null) {
        this.representMid = args.representMid;
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
      if (args.point !== undefined && args.point !== null) {
        this.point = args.point;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.channelId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.representMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.point = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FriendChannelMatrix');
    if (this.channelId !== null && this.channelId !== undefined) {
      output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
      output.writeString(this.channelId);
      output.writeFieldEnd();
    }
    if (this.representMid !== null && this.representMid !== undefined) {
      output.writeFieldBegin('representMid', Thrift.Type.STRING, 2);
      output.writeString(this.representMid);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 3);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    if (this.point !== null && this.point !== undefined) {
      output.writeFieldBegin('point', Thrift.Type.I32, 4);
      output.writeI32(this.point);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FriendRequest = module.exports.FriendRequest = class {
  constructor(args) {
    this.eMid = null;
    this.mid = null;
    this.direction = null;
    this.method = null;
    this.param = null;
    this.timestamp = null;
    this.seqId = null;
    this.displayName = null;
    this.picturePath = null;
    this.pictureStatus = null;
    if (args) {
      if (args.eMid !== undefined && args.eMid !== null) {
        this.eMid = args.eMid;
      }
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.direction !== undefined && args.direction !== null) {
        this.direction = args.direction;
      }
      if (args.method !== undefined && args.method !== null) {
        this.method = args.method;
      }
      if (args.param !== undefined && args.param !== null) {
        this.param = args.param;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.seqId !== undefined && args.seqId !== null) {
        this.seqId = args.seqId;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.picturePath !== undefined && args.picturePath !== null) {
        this.picturePath = args.picturePath;
      }
      if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
        this.pictureStatus = args.pictureStatus;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.eMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.direction = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.method = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.param = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.seqId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.picturePath = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.pictureStatus = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FriendRequest');
    if (this.eMid !== null && this.eMid !== undefined) {
      output.writeFieldBegin('eMid', Thrift.Type.STRING, 1);
      output.writeString(this.eMid);
      output.writeFieldEnd();
    }
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.direction !== null && this.direction !== undefined) {
      output.writeFieldBegin('direction', Thrift.Type.I32, 3);
      output.writeI32(this.direction);
      output.writeFieldEnd();
    }
    if (this.method !== null && this.method !== undefined) {
      output.writeFieldBegin('method', Thrift.Type.I32, 4);
      output.writeI32(this.method);
      output.writeFieldEnd();
    }
    if (this.param !== null && this.param !== undefined) {
      output.writeFieldBegin('param', Thrift.Type.STRING, 5);
      output.writeString(this.param);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 6);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.seqId !== null && this.seqId !== undefined) {
      output.writeFieldBegin('seqId', Thrift.Type.I64, 7);
      output.writeI64(this.seqId);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 10);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.picturePath !== null && this.picturePath !== undefined) {
      output.writeFieldBegin('picturePath', Thrift.Type.STRING, 11);
      output.writeString(this.picturePath);
      output.writeFieldEnd();
    }
    if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
      output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 12);
      output.writeString(this.pictureStatus);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FriendRequestsInfo = module.exports.FriendRequestsInfo = class {
  constructor(args) {
    this.totalIncomingCount = null;
    this.totalOutgoingCount = null;
    this.recentIncomings = null;
    this.recentOutgoings = null;
    this.totalIncomingLimit = null;
    this.totalOutgoingLimit = null;
    if (args) {
      if (args.totalIncomingCount !== undefined && args.totalIncomingCount !== null) {
        this.totalIncomingCount = args.totalIncomingCount;
      }
      if (args.totalOutgoingCount !== undefined && args.totalOutgoingCount !== null) {
        this.totalOutgoingCount = args.totalOutgoingCount;
      }
      if (args.recentIncomings !== undefined && args.recentIncomings !== null) {
        this.recentIncomings = Thrift.copyList(args.recentIncomings, [ttypes.FriendRequest]);
      }
      if (args.recentOutgoings !== undefined && args.recentOutgoings !== null) {
        this.recentOutgoings = Thrift.copyList(args.recentOutgoings, [ttypes.FriendRequest]);
      }
      if (args.totalIncomingLimit !== undefined && args.totalIncomingLimit !== null) {
        this.totalIncomingLimit = args.totalIncomingLimit;
      }
      if (args.totalOutgoingLimit !== undefined && args.totalOutgoingLimit !== null) {
        this.totalOutgoingLimit = args.totalOutgoingLimit;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.totalIncomingCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.totalOutgoingCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.recentIncomings = [];
          const _rtmp3226 = input.readListBegin();
          const _size225 = _rtmp3226.size || 0;
          for (let _i227 = 0; _i227 < _size225; ++_i227) {
            let elem228 = null;
            elem228 = new ttypes.FriendRequest();
            elem228.read(input);
            this.recentIncomings.push(elem228);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.recentOutgoings = [];
          const _rtmp3230 = input.readListBegin();
          const _size229 = _rtmp3230.size || 0;
          for (let _i231 = 0; _i231 < _size229; ++_i231) {
            let elem232 = null;
            elem232 = new ttypes.FriendRequest();
            elem232.read(input);
            this.recentOutgoings.push(elem232);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.totalIncomingLimit = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.totalOutgoingLimit = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FriendRequestsInfo');
    if (this.totalIncomingCount !== null && this.totalIncomingCount !== undefined) {
      output.writeFieldBegin('totalIncomingCount', Thrift.Type.I32, 1);
      output.writeI32(this.totalIncomingCount);
      output.writeFieldEnd();
    }
    if (this.totalOutgoingCount !== null && this.totalOutgoingCount !== undefined) {
      output.writeFieldBegin('totalOutgoingCount', Thrift.Type.I32, 2);
      output.writeI32(this.totalOutgoingCount);
      output.writeFieldEnd();
    }
    if (this.recentIncomings !== null && this.recentIncomings !== undefined) {
      output.writeFieldBegin('recentIncomings', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.recentIncomings.length);
      for (let iter233 in this.recentIncomings) {
        if (this.recentIncomings.hasOwnProperty(iter233)) {
          iter233 = this.recentIncomings[iter233];
          iter233.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.recentOutgoings !== null && this.recentOutgoings !== undefined) {
      output.writeFieldBegin('recentOutgoings', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.recentOutgoings.length);
      for (let iter234 in this.recentOutgoings) {
        if (this.recentOutgoings.hasOwnProperty(iter234)) {
          iter234 = this.recentOutgoings[iter234];
          iter234.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.totalIncomingLimit !== null && this.totalIncomingLimit !== undefined) {
      output.writeFieldBegin('totalIncomingLimit', Thrift.Type.I32, 5);
      output.writeI32(this.totalIncomingLimit);
      output.writeFieldEnd();
    }
    if (this.totalOutgoingLimit !== null && this.totalOutgoingLimit !== undefined) {
      output.writeFieldBegin('totalOutgoingLimit', Thrift.Type.I32, 6);
      output.writeI32(this.totalOutgoingLimit);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Geolocation = module.exports.Geolocation = class {
  constructor(args) {
    this.longitude = null;
    this.latitude = null;
    if (args) {
      if (args.longitude !== undefined && args.longitude !== null) {
        this.longitude = args.longitude;
      }
      if (args.latitude !== undefined && args.latitude !== null) {
        this.latitude = args.latitude;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.DOUBLE) {
          this.longitude = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.DOUBLE) {
          this.latitude = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Geolocation');
    if (this.longitude !== null && this.longitude !== undefined) {
      output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 1);
      output.writeDouble(this.longitude);
      output.writeFieldEnd();
    }
    if (this.latitude !== null && this.latitude !== undefined) {
      output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 2);
      output.writeDouble(this.latitude);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const GetBalanceRequest = module.exports.GetBalanceRequest = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GetBalanceRequest');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const GetBalanceResponse = module.exports.GetBalanceResponse = class {
  constructor(args) {
    this.balance = null;
    if (args) {
      if (args.balance !== undefined && args.balance !== null) {
        this.balance = new ttypes.Balance(args.balance);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.balance = new ttypes.Balance();
          this.balance.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GetBalanceResponse');
    if (this.balance !== null && this.balance !== undefined) {
      output.writeFieldBegin('balance', Thrift.Type.STRUCT, 1);
      this.balance.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const GetCoinHistoryRequest = module.exports.GetCoinHistoryRequest = class {
  constructor(args) {
    this.appStoreCode = null;
    this.country = null;
    this.language = null;
    this.searchEndDate = null;
    this.offset = null;
    this.limit = null;
    if (args) {
      if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
        this.appStoreCode = args.appStoreCode;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.searchEndDate !== undefined && args.searchEndDate !== null) {
        this.searchEndDate = args.searchEndDate;
      }
      if (args.offset !== undefined && args.offset !== null) {
        this.offset = args.offset;
      }
      if (args.limit !== undefined && args.limit !== null) {
        this.limit = args.limit;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.appStoreCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.searchEndDate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.offset = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.limit = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GetCoinHistoryRequest');
    if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
      output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 1);
      output.writeI32(this.appStoreCode);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 2);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.searchEndDate !== null && this.searchEndDate !== undefined) {
      output.writeFieldBegin('searchEndDate', Thrift.Type.STRING, 4);
      output.writeString(this.searchEndDate);
      output.writeFieldEnd();
    }
    if (this.offset !== null && this.offset !== undefined) {
      output.writeFieldBegin('offset', Thrift.Type.I32, 5);
      output.writeI32(this.offset);
      output.writeFieldEnd();
    }
    if (this.limit !== null && this.limit !== undefined) {
      output.writeFieldBegin('limit', Thrift.Type.I32, 6);
      output.writeI32(this.limit);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const GetCoinHistoryResponse = module.exports.GetCoinHistoryResponse = class {
  constructor(args) {
    this.histories = null;
    this.balance = null;
    this.offset = null;
    this.hasNext = null;
    if (args) {
      if (args.histories !== undefined && args.histories !== null) {
        this.histories = Thrift.copyList(args.histories, [ttypes.CoinHistory]);
      }
      if (args.balance !== undefined && args.balance !== null) {
        this.balance = new ttypes.Coin(args.balance);
      }
      if (args.offset !== undefined && args.offset !== null) {
        this.offset = args.offset;
      }
      if (args.hasNext !== undefined && args.hasNext !== null) {
        this.hasNext = args.hasNext;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.histories = [];
          const _rtmp3236 = input.readListBegin();
          const _size235 = _rtmp3236.size || 0;
          for (let _i237 = 0; _i237 < _size235; ++_i237) {
            let elem238 = null;
            elem238 = new ttypes.CoinHistory();
            elem238.read(input);
            this.histories.push(elem238);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.balance = new ttypes.Coin();
          this.balance.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.offset = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.hasNext = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GetCoinHistoryResponse');
    if (this.histories !== null && this.histories !== undefined) {
      output.writeFieldBegin('histories', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.histories.length);
      for (let iter239 in this.histories) {
        if (this.histories.hasOwnProperty(iter239)) {
          iter239 = this.histories[iter239];
          iter239.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.balance !== null && this.balance !== undefined) {
      output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
      this.balance.write(output);
      output.writeFieldEnd();
    }
    if (this.offset !== null && this.offset !== undefined) {
      output.writeFieldBegin('offset', Thrift.Type.I32, 3);
      output.writeI32(this.offset);
      output.writeFieldEnd();
    }
    if (this.hasNext !== null && this.hasNext !== undefined) {
      output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 4);
      output.writeBool(this.hasNext);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const GetCoinProductsRequest = module.exports.GetCoinProductsRequest = class {
  constructor(args) {
    this.appStoreCode = null;
    this.country = null;
    this.language = null;
    this.pgCode = null;
    if (args) {
      if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
        this.appStoreCode = args.appStoreCode;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.pgCode !== undefined && args.pgCode !== null) {
        this.pgCode = args.pgCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.appStoreCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.pgCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GetCoinProductsRequest');
    if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
      output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 1);
      output.writeI32(this.appStoreCode);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 2);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.pgCode !== null && this.pgCode !== undefined) {
      output.writeFieldBegin('pgCode', Thrift.Type.I32, 4);
      output.writeI32(this.pgCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const GetCoinProductsResponse = module.exports.GetCoinProductsResponse = class {
  constructor(args) {
    this.items = null;
    if (args) {
      if (args.items !== undefined && args.items !== null) {
        this.items = Thrift.copyList(args.items, [ttypes.CoinProductItem]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.items = [];
          const _rtmp3241 = input.readListBegin();
          const _size240 = _rtmp3241.size || 0;
          for (let _i242 = 0; _i242 < _size240; ++_i242) {
            let elem243 = null;
            elem243 = new ttypes.CoinProductItem();
            elem243.read(input);
            this.items.push(elem243);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GetCoinProductsResponse');
    if (this.items !== null && this.items !== undefined) {
      output.writeFieldBegin('items', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
      for (let iter244 in this.items) {
        if (this.items.hasOwnProperty(iter244)) {
          iter244 = this.items[iter244];
          iter244.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const GetTotalCoinBalanceRequest = module.exports.GetTotalCoinBalanceRequest = class {
  constructor(args) {
    this.appStoreCode = null;
    if (args) {
      if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
        this.appStoreCode = args.appStoreCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.appStoreCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GetTotalCoinBalanceRequest');
    if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
      output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 1);
      output.writeI32(this.appStoreCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const GetTotalCoinBalanceResponse = module.exports.GetTotalCoinBalanceResponse = class {
  constructor(args) {
    this.totalBalance = null;
    this.paidCoinBalance = null;
    this.freeCoinBalance = null;
    this.rewardCoinBalance = null;
    this.expectedAutoExchangedCoinBalance = null;
    if (args) {
      if (args.totalBalance !== undefined && args.totalBalance !== null) {
        this.totalBalance = args.totalBalance;
      }
      if (args.paidCoinBalance !== undefined && args.paidCoinBalance !== null) {
        this.paidCoinBalance = args.paidCoinBalance;
      }
      if (args.freeCoinBalance !== undefined && args.freeCoinBalance !== null) {
        this.freeCoinBalance = args.freeCoinBalance;
      }
      if (args.rewardCoinBalance !== undefined && args.rewardCoinBalance !== null) {
        this.rewardCoinBalance = args.rewardCoinBalance;
      }
      if (args.expectedAutoExchangedCoinBalance !== undefined && args.expectedAutoExchangedCoinBalance !== null) {
        this.expectedAutoExchangedCoinBalance = args.expectedAutoExchangedCoinBalance;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.totalBalance = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.paidCoinBalance = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.freeCoinBalance = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.rewardCoinBalance = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.expectedAutoExchangedCoinBalance = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GetTotalCoinBalanceResponse');
    if (this.totalBalance !== null && this.totalBalance !== undefined) {
      output.writeFieldBegin('totalBalance', Thrift.Type.STRING, 1);
      output.writeString(this.totalBalance);
      output.writeFieldEnd();
    }
    if (this.paidCoinBalance !== null && this.paidCoinBalance !== undefined) {
      output.writeFieldBegin('paidCoinBalance', Thrift.Type.STRING, 2);
      output.writeString(this.paidCoinBalance);
      output.writeFieldEnd();
    }
    if (this.freeCoinBalance !== null && this.freeCoinBalance !== undefined) {
      output.writeFieldBegin('freeCoinBalance', Thrift.Type.STRING, 3);
      output.writeString(this.freeCoinBalance);
      output.writeFieldEnd();
    }
    if (this.rewardCoinBalance !== null && this.rewardCoinBalance !== undefined) {
      output.writeFieldBegin('rewardCoinBalance', Thrift.Type.STRING, 4);
      output.writeString(this.rewardCoinBalance);
      output.writeFieldEnd();
    }
    if (this.expectedAutoExchangedCoinBalance !== null && this.expectedAutoExchangedCoinBalance !== undefined) {
      output.writeFieldBegin('expectedAutoExchangedCoinBalance', Thrift.Type.STRING, 5);
      output.writeString(this.expectedAutoExchangedCoinBalance);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Group = module.exports.Group = class {
  constructor(args) {
    this.id = null;
    this.createdTime = null;
    this.name = null;
    this.pictureStatus = null;
    this.preventedJoinByTicket = null;
    this.groupPreference = null;
    this.members = null;
    this.creator = null;
    this.invitee = null;
    this.notificationDisabled = null;
    this.picturePath = null;
    this.memberMids = null;
    this.inviteeMids = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createdTime !== undefined && args.createdTime !== null) {
        this.createdTime = args.createdTime;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
        this.pictureStatus = args.pictureStatus;
      }
      if (args.preventedJoinByTicket !== undefined && args.preventedJoinByTicket !== null) {
        this.preventedJoinByTicket = args.preventedJoinByTicket;
      }
      if (args.groupPreference !== undefined && args.groupPreference !== null) {
        this.groupPreference = new ttypes.GroupPreference(args.groupPreference);
      }
      if (args.members !== undefined && args.members !== null) {
        this.members = Thrift.copyList(args.members, [ttypes.Contact]);
      }
      if (args.creator !== undefined && args.creator !== null) {
        this.creator = new ttypes.Contact(args.creator);
      }
      if (args.invitee !== undefined && args.invitee !== null) {
        this.invitee = Thrift.copyList(args.invitee, [ttypes.Contact]);
      }
      if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
        this.notificationDisabled = args.notificationDisabled;
      }
      if (args.picturePath !== undefined && args.picturePath !== null) {
        this.picturePath = args.picturePath;
      }
      if (args.memberMids !== undefined && args.memberMids !== null) {
        this.memberMids = Thrift.copyList(args.memberMids, [null]);
      }
      if (args.inviteeMids !== undefined && args.inviteeMids !== null) {
        this.inviteeMids = Thrift.copyList(args.inviteeMids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createdTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.pictureStatus = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.BOOL) {
          this.preventedJoinByTicket = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRUCT) {
          this.groupPreference = new ttypes.GroupPreference();
          this.groupPreference.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.LIST) {
          this.members = [];
          const _rtmp3246 = input.readListBegin();
          const _size245 = _rtmp3246.size || 0;
          for (let _i247 = 0; _i247 < _size245; ++_i247) {
            let elem248 = null;
            elem248 = new ttypes.Contact();
            elem248.read(input);
            this.members.push(elem248);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRUCT) {
          this.creator = new ttypes.Contact();
          this.creator.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.LIST) {
          this.invitee = [];
          const _rtmp3250 = input.readListBegin();
          const _size249 = _rtmp3250.size || 0;
          for (let _i251 = 0; _i251 < _size249; ++_i251) {
            let elem252 = null;
            elem252 = new ttypes.Contact();
            elem252.read(input);
            this.invitee.push(elem252);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.BOOL) {
          this.notificationDisabled = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.STRING) {
          this.picturePath = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 40:
        if (ftype == Thrift.Type.LIST) {
          this.memberMids = [];
          const _rtmp3254 = input.readListBegin();
          const _size253 = _rtmp3254.size || 0;
          for (let _i255 = 0; _i255 < _size253; ++_i255) {
            let elem256 = null;
            elem256 = input.readString();
            this.memberMids.push(elem256);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 41:
        if (ftype == Thrift.Type.LIST) {
          this.inviteeMids = [];
          const _rtmp3258 = input.readListBegin();
          const _size257 = _rtmp3258.size || 0;
          for (let _i259 = 0; _i259 < _size257; ++_i259) {
            let elem260 = null;
            elem260 = input.readString();
            this.inviteeMids.push(elem260);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Group');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
      output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
      output.writeI64(this.createdTime);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 10);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
      output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 11);
      output.writeString(this.pictureStatus);
      output.writeFieldEnd();
    }
    if (this.preventedJoinByTicket !== null && this.preventedJoinByTicket !== undefined) {
      output.writeFieldBegin('preventedJoinByTicket', Thrift.Type.BOOL, 12);
      output.writeBool(this.preventedJoinByTicket);
      output.writeFieldEnd();
    }
    if (this.groupPreference !== null && this.groupPreference !== undefined) {
      output.writeFieldBegin('groupPreference', Thrift.Type.STRUCT, 13);
      this.groupPreference.write(output);
      output.writeFieldEnd();
    }
    if (this.members !== null && this.members !== undefined) {
      output.writeFieldBegin('members', Thrift.Type.LIST, 20);
      output.writeListBegin(Thrift.Type.STRUCT, this.members.length);
      for (let iter261 in this.members) {
        if (this.members.hasOwnProperty(iter261)) {
          iter261 = this.members[iter261];
          iter261.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creator !== null && this.creator !== undefined) {
      output.writeFieldBegin('creator', Thrift.Type.STRUCT, 21);
      this.creator.write(output);
      output.writeFieldEnd();
    }
    if (this.invitee !== null && this.invitee !== undefined) {
      output.writeFieldBegin('invitee', Thrift.Type.LIST, 22);
      output.writeListBegin(Thrift.Type.STRUCT, this.invitee.length);
      for (let iter262 in this.invitee) {
        if (this.invitee.hasOwnProperty(iter262)) {
          iter262 = this.invitee[iter262];
          iter262.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.notificationDisabled !== null && this.notificationDisabled !== undefined) {
      output.writeFieldBegin('notificationDisabled', Thrift.Type.BOOL, 31);
      output.writeBool(this.notificationDisabled);
      output.writeFieldEnd();
    }
    if (this.picturePath !== null && this.picturePath !== undefined) {
      output.writeFieldBegin('picturePath', Thrift.Type.STRING, 32);
      output.writeString(this.picturePath);
      output.writeFieldEnd();
    }
    if (this.memberMids !== null && this.memberMids !== undefined) {
      output.writeFieldBegin('memberMids', Thrift.Type.LIST, 40);
      output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
      for (let iter263 in this.memberMids) {
        if (this.memberMids.hasOwnProperty(iter263)) {
          iter263 = this.memberMids[iter263];
          output.writeString(iter263);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.inviteeMids !== null && this.inviteeMids !== undefined) {
      output.writeFieldBegin('inviteeMids', Thrift.Type.LIST, 41);
      output.writeListBegin(Thrift.Type.STRING, this.inviteeMids.length);
      for (let iter264 in this.inviteeMids) {
        if (this.inviteeMids.hasOwnProperty(iter264)) {
          iter264 = this.inviteeMids[iter264];
          output.writeString(iter264);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const GroupCall = module.exports.GroupCall = class {
  constructor(args) {
    this.online = null;
    this.chatMid = null;
    this.hostMid = null;
    this.memberMids = null;
    this.started = null;
    this.mediaType = null;
    if (args) {
      if (args.online !== undefined && args.online !== null) {
        this.online = args.online;
      }
      if (args.chatMid !== undefined && args.chatMid !== null) {
        this.chatMid = args.chatMid;
      }
      if (args.hostMid !== undefined && args.hostMid !== null) {
        this.hostMid = args.hostMid;
      }
      if (args.memberMids !== undefined && args.memberMids !== null) {
        this.memberMids = Thrift.copyList(args.memberMids, [null]);
      }
      if (args.started !== undefined && args.started !== null) {
        this.started = args.started;
      }
      if (args.mediaType !== undefined && args.mediaType !== null) {
        this.mediaType = args.mediaType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.online = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.chatMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.hostMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.memberMids = [];
          const _rtmp3266 = input.readListBegin();
          const _size265 = _rtmp3266.size || 0;
          for (let _i267 = 0; _i267 < _size265; ++_i267) {
            let elem268 = null;
            elem268 = input.readString();
            this.memberMids.push(elem268);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.started = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.mediaType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GroupCall');
    if (this.online !== null && this.online !== undefined) {
      output.writeFieldBegin('online', Thrift.Type.BOOL, 1);
      output.writeBool(this.online);
      output.writeFieldEnd();
    }
    if (this.chatMid !== null && this.chatMid !== undefined) {
      output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
      output.writeString(this.chatMid);
      output.writeFieldEnd();
    }
    if (this.hostMid !== null && this.hostMid !== undefined) {
      output.writeFieldBegin('hostMid', Thrift.Type.STRING, 3);
      output.writeString(this.hostMid);
      output.writeFieldEnd();
    }
    if (this.memberMids !== null && this.memberMids !== undefined) {
      output.writeFieldBegin('memberMids', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
      for (let iter269 in this.memberMids) {
        if (this.memberMids.hasOwnProperty(iter269)) {
          iter269 = this.memberMids[iter269];
          output.writeString(iter269);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.started !== null && this.started !== undefined) {
      output.writeFieldBegin('started', Thrift.Type.I64, 5);
      output.writeI64(this.started);
      output.writeFieldEnd();
    }
    if (this.mediaType !== null && this.mediaType !== undefined) {
      output.writeFieldBegin('mediaType', Thrift.Type.I32, 6);
      output.writeI32(this.mediaType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const GroupCallRoute = module.exports.GroupCallRoute = class {
  constructor(args) {
    this.token = null;
    this.cscf = null;
    this.mix = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.cscf !== undefined && args.cscf !== null) {
        this.cscf = new ttypes.CallHost(args.cscf);
      }
      if (args.mix !== undefined && args.mix !== null) {
        this.mix = new ttypes.CallHost(args.mix);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.cscf = new ttypes.CallHost();
          this.cscf.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.mix = new ttypes.CallHost();
          this.mix.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GroupCallRoute');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.cscf !== null && this.cscf !== undefined) {
      output.writeFieldBegin('cscf', Thrift.Type.STRUCT, 2);
      this.cscf.write(output);
      output.writeFieldEnd();
    }
    if (this.mix !== null && this.mix !== undefined) {
      output.writeFieldBegin('mix', Thrift.Type.STRUCT, 3);
      this.mix.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const GroupPreference = module.exports.GroupPreference = class {
  constructor(args) {
    this.invitationTicket = null;
    this.favoriteTimestamp = null;
    if (args) {
      if (args.invitationTicket !== undefined && args.invitationTicket !== null) {
        this.invitationTicket = args.invitationTicket;
      }
      if (args.favoriteTimestamp !== undefined && args.favoriteTimestamp !== null) {
        this.favoriteTimestamp = args.favoriteTimestamp;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.invitationTicket = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I64) {
          this.favoriteTimestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('GroupPreference');
    if (this.invitationTicket !== null && this.invitationTicket !== undefined) {
      output.writeFieldBegin('invitationTicket', Thrift.Type.STRING, 11);
      output.writeString(this.invitationTicket);
      output.writeFieldEnd();
    }
    if (this.favoriteTimestamp !== null && this.favoriteTimestamp !== undefined) {
      output.writeFieldBegin('favoriteTimestamp', Thrift.Type.I64, 12);
      output.writeI64(this.favoriteTimestamp);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const IdentityCredential = module.exports.IdentityCredential = class {
  constructor(args) {
    this.provider = null;
    this.identifier = null;
    this.password = null;
    if (args) {
      if (args.provider !== undefined && args.provider !== null) {
        this.provider = args.provider;
      }
      if (args.identifier !== undefined && args.identifier !== null) {
        this.identifier = args.identifier;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.provider = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.identifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('IdentityCredential');
    if (this.provider !== null && this.provider !== undefined) {
      output.writeFieldBegin('provider', Thrift.Type.I32, 1);
      output.writeI32(this.provider);
      output.writeFieldEnd();
    }
    if (this.identifier !== null && this.identifier !== undefined) {
      output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
      output.writeString(this.identifier);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 3);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Location = module.exports.Location = class {
  constructor(args) {
    this.title = null;
    this.address = null;
    this.latitude = null;
    this.longitude = null;
    this.phone = null;
    if (args) {
      if (args.title !== undefined && args.title !== null) {
        this.title = args.title;
      }
      if (args.address !== undefined && args.address !== null) {
        this.address = args.address;
      }
      if (args.latitude !== undefined && args.latitude !== null) {
        this.latitude = args.latitude;
      }
      if (args.longitude !== undefined && args.longitude !== null) {
        this.longitude = args.longitude;
      }
      if (args.phone !== undefined && args.phone !== null) {
        this.phone = args.phone;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.title = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.address = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.DOUBLE) {
          this.latitude = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.DOUBLE) {
          this.longitude = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.phone = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Location');
    if (this.title !== null && this.title !== undefined) {
      output.writeFieldBegin('title', Thrift.Type.STRING, 1);
      output.writeString(this.title);
      output.writeFieldEnd();
    }
    if (this.address !== null && this.address !== undefined) {
      output.writeFieldBegin('address', Thrift.Type.STRING, 2);
      output.writeString(this.address);
      output.writeFieldEnd();
    }
    if (this.latitude !== null && this.latitude !== undefined) {
      output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
      output.writeDouble(this.latitude);
      output.writeFieldEnd();
    }
    if (this.longitude !== null && this.longitude !== undefined) {
      output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
      output.writeDouble(this.longitude);
      output.writeFieldEnd();
    }
    if (this.phone !== null && this.phone !== undefined) {
      output.writeFieldBegin('phone', Thrift.Type.STRING, 5);
      output.writeString(this.phone);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginRequest = module.exports.LoginRequest = class {
  constructor(args) {
    this.type = null;
    this.identityProvider = null;
    this.identifier = null;
    this.password = null;
    this.keepLoggedIn = null;
    this.accessLocation = null;
    this.systemName = null;
    this.certificate = null;
    this.verifier = null;
    this.secret = null;
    this.e2eeVersion = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.identityProvider !== undefined && args.identityProvider !== null) {
        this.identityProvider = args.identityProvider;
      }
      if (args.identifier !== undefined && args.identifier !== null) {
        this.identifier = args.identifier;
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
      if (args.keepLoggedIn !== undefined && args.keepLoggedIn !== null) {
        this.keepLoggedIn = args.keepLoggedIn;
      }
      if (args.accessLocation !== undefined && args.accessLocation !== null) {
        this.accessLocation = args.accessLocation;
      }
      if (args.systemName !== undefined && args.systemName !== null) {
        this.systemName = args.systemName;
      }
      if (args.certificate !== undefined && args.certificate !== null) {
        this.certificate = args.certificate;
      }
      if (args.verifier !== undefined && args.verifier !== null) {
        this.verifier = args.verifier;
      }
      if (args.secret !== undefined && args.secret !== null) {
        this.secret = args.secret;
      }
      if (args.e2eeVersion !== undefined && args.e2eeVersion !== null) {
        this.e2eeVersion = args.e2eeVersion;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.identityProvider = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.identifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.keepLoggedIn = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.accessLocation = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.systemName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.certificate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.verifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.secret = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.e2eeVersion = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginRequest');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.identityProvider !== null && this.identityProvider !== undefined) {
      output.writeFieldBegin('identityProvider', Thrift.Type.I32, 2);
      output.writeI32(this.identityProvider);
      output.writeFieldEnd();
    }
    if (this.identifier !== null && this.identifier !== undefined) {
      output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
      output.writeString(this.identifier);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 4);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    if (this.keepLoggedIn !== null && this.keepLoggedIn !== undefined) {
      output.writeFieldBegin('keepLoggedIn', Thrift.Type.BOOL, 5);
      output.writeBool(this.keepLoggedIn);
      output.writeFieldEnd();
    }
    if (this.accessLocation !== null && this.accessLocation !== undefined) {
      output.writeFieldBegin('accessLocation', Thrift.Type.STRING, 6);
      output.writeString(this.accessLocation);
      output.writeFieldEnd();
    }
    if (this.systemName !== null && this.systemName !== undefined) {
      output.writeFieldBegin('systemName', Thrift.Type.STRING, 7);
      output.writeString(this.systemName);
      output.writeFieldEnd();
    }
    if (this.certificate !== null && this.certificate !== undefined) {
      output.writeFieldBegin('certificate', Thrift.Type.STRING, 8);
      output.writeString(this.certificate);
      output.writeFieldEnd();
    }
    if (this.verifier !== null && this.verifier !== undefined) {
      output.writeFieldBegin('verifier', Thrift.Type.STRING, 9);
      output.writeString(this.verifier);
      output.writeFieldEnd();
    }
    if (this.secret !== null && this.secret !== undefined) {
      output.writeFieldBegin('secret', Thrift.Type.STRING, 10);
      output.writeBinary(this.secret);
      output.writeFieldEnd();
    }
    if (this.e2eeVersion !== null && this.e2eeVersion !== undefined) {
      output.writeFieldBegin('e2eeVersion', Thrift.Type.I32, 11);
      output.writeI32(this.e2eeVersion);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginResult = module.exports.LoginResult = class {
  constructor(args) {
    this.authToken = null;
    this.certificate = null;
    this.verifier = null;
    this.pinCode = null;
    this.type = null;
    this.lastPrimaryBindTime = null;
    this.displayMessage = null;
    this.sessionForSMSConfirm = null;
    if (args) {
      if (args.authToken !== undefined && args.authToken !== null) {
        this.authToken = args.authToken;
      }
      if (args.certificate !== undefined && args.certificate !== null) {
        this.certificate = args.certificate;
      }
      if (args.verifier !== undefined && args.verifier !== null) {
        this.verifier = args.verifier;
      }
      if (args.pinCode !== undefined && args.pinCode !== null) {
        this.pinCode = args.pinCode;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.lastPrimaryBindTime !== undefined && args.lastPrimaryBindTime !== null) {
        this.lastPrimaryBindTime = args.lastPrimaryBindTime;
      }
      if (args.displayMessage !== undefined && args.displayMessage !== null) {
        this.displayMessage = args.displayMessage;
      }
      if (args.sessionForSMSConfirm !== undefined && args.sessionForSMSConfirm !== null) {
        this.sessionForSMSConfirm = new ttypes.VerificationSessionData(args.sessionForSMSConfirm);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.authToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.certificate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.verifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.pinCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.lastPrimaryBindTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.displayMessage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRUCT) {
          this.sessionForSMSConfirm = new ttypes.VerificationSessionData();
          this.sessionForSMSConfirm.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginResult');
    if (this.authToken !== null && this.authToken !== undefined) {
      output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
      output.writeString(this.authToken);
      output.writeFieldEnd();
    }
    if (this.certificate !== null && this.certificate !== undefined) {
      output.writeFieldBegin('certificate', Thrift.Type.STRING, 2);
      output.writeString(this.certificate);
      output.writeFieldEnd();
    }
    if (this.verifier !== null && this.verifier !== undefined) {
      output.writeFieldBegin('verifier', Thrift.Type.STRING, 3);
      output.writeString(this.verifier);
      output.writeFieldEnd();
    }
    if (this.pinCode !== null && this.pinCode !== undefined) {
      output.writeFieldBegin('pinCode', Thrift.Type.STRING, 4);
      output.writeString(this.pinCode);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 5);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.lastPrimaryBindTime !== null && this.lastPrimaryBindTime !== undefined) {
      output.writeFieldBegin('lastPrimaryBindTime', Thrift.Type.I64, 6);
      output.writeI64(this.lastPrimaryBindTime);
      output.writeFieldEnd();
    }
    if (this.displayMessage !== null && this.displayMessage !== undefined) {
      output.writeFieldBegin('displayMessage', Thrift.Type.STRING, 7);
      output.writeString(this.displayMessage);
      output.writeFieldEnd();
    }
    if (this.sessionForSMSConfirm !== null && this.sessionForSMSConfirm !== undefined) {
      output.writeFieldBegin('sessionForSMSConfirm', Thrift.Type.STRUCT, 8);
      this.sessionForSMSConfirm.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginSession = module.exports.LoginSession = class {
  constructor(args) {
    this.tokenKey = null;
    this.expirationTime = null;
    this.applicationType = null;
    this.systemName = null;
    this.accessLocation = null;
    if (args) {
      if (args.tokenKey !== undefined && args.tokenKey !== null) {
        this.tokenKey = args.tokenKey;
      }
      if (args.expirationTime !== undefined && args.expirationTime !== null) {
        this.expirationTime = args.expirationTime;
      }
      if (args.applicationType !== undefined && args.applicationType !== null) {
        this.applicationType = args.applicationType;
      }
      if (args.systemName !== undefined && args.systemName !== null) {
        this.systemName = args.systemName;
      }
      if (args.accessLocation !== undefined && args.accessLocation !== null) {
        this.accessLocation = args.accessLocation;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.tokenKey = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.expirationTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.applicationType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.systemName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.STRING) {
          this.accessLocation = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginSession');
    if (this.tokenKey !== null && this.tokenKey !== undefined) {
      output.writeFieldBegin('tokenKey', Thrift.Type.STRING, 1);
      output.writeString(this.tokenKey);
      output.writeFieldEnd();
    }
    if (this.expirationTime !== null && this.expirationTime !== undefined) {
      output.writeFieldBegin('expirationTime', Thrift.Type.I64, 3);
      output.writeI64(this.expirationTime);
      output.writeFieldEnd();
    }
    if (this.applicationType !== null && this.applicationType !== undefined) {
      output.writeFieldBegin('applicationType', Thrift.Type.I32, 11);
      output.writeI32(this.applicationType);
      output.writeFieldEnd();
    }
    if (this.systemName !== null && this.systemName !== undefined) {
      output.writeFieldBegin('systemName', Thrift.Type.STRING, 12);
      output.writeString(this.systemName);
      output.writeFieldEnd();
    }
    if (this.accessLocation !== null && this.accessLocation !== undefined) {
      output.writeFieldBegin('accessLocation', Thrift.Type.STRING, 22);
      output.writeString(this.accessLocation);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Message = module.exports.Message = class {
  constructor(args) {
    this.from_ = null;
    this.to = null;
    this.toType = null;
    this.id = null;
    this.createdTime = null;
    this.deliveredTime = null;
    this.text = null;
    this.location = null;
    this.hasContent = null;
    this.contentType = null;
    this.contentPreview = null;
    this.contentMetadata = null;
    this.sessionId = null;
    this.chunks = null;
    this.relatedMessageId = null;
    this.messageRelationType = null;
    this.readCount = null;
    this.relatedMessageServiceCode = null;
    if (args) {
      if (args.from_ !== undefined && args.from_ !== null) {
        this.from_ = args.from_;
      }
      if (args.to !== undefined && args.to !== null) {
        this.to = args.to;
      }
      if (args.toType !== undefined && args.toType !== null) {
        this.toType = args.toType;
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createdTime !== undefined && args.createdTime !== null) {
        this.createdTime = args.createdTime;
      }
      if (args.deliveredTime !== undefined && args.deliveredTime !== null) {
        this.deliveredTime = args.deliveredTime;
      }
      if (args.text !== undefined && args.text !== null) {
        this.text = args.text;
      }
      if (args.location !== undefined && args.location !== null) {
        this.location = new ttypes.Location(args.location);
      }
      if (args.hasContent !== undefined && args.hasContent !== null) {
        this.hasContent = args.hasContent;
      }
      if (args.contentType !== undefined && args.contentType !== null) {
        this.contentType = args.contentType;
      }
      if (args.contentPreview !== undefined && args.contentPreview !== null) {
        this.contentPreview = args.contentPreview;
      }
      if (args.contentMetadata !== undefined && args.contentMetadata !== null) {
        this.contentMetadata = Thrift.copyMap(args.contentMetadata, [null]);
      }
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
      if (args.chunks !== undefined && args.chunks !== null) {
        this.chunks = Thrift.copyList(args.chunks, [null]);
      }
      if (args.relatedMessageId !== undefined && args.relatedMessageId !== null) {
        this.relatedMessageId = args.relatedMessageId;
      }
      if (args.messageRelationType !== undefined && args.messageRelationType !== null) {
        this.messageRelationType = args.messageRelationType;
      }
      if (args.readCount !== undefined && args.readCount !== null) {
        this.readCount = args.readCount;
      }
      if (args.relatedMessageServiceCode !== undefined && args.relatedMessageServiceCode !== null) {
        this.relatedMessageServiceCode = args.relatedMessageServiceCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.from_ = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.to = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.toType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.createdTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.deliveredTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.text = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRUCT) {
          this.location = new ttypes.Location();
          this.location.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.BOOL) {
          this.hasContent = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.I32) {
          this.contentType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.STRING) {
          this.contentPreview = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.MAP) {
          this.contentMetadata = {};
          const _rtmp3271 = input.readMapBegin();
          const _size270 = _rtmp3271.size || 0;
          for (let _i272 = 0; _i272 < _size270; ++_i272) {
            let key273 = null;
            let val274 = null;
            key273 = input.readString();
            val274 = input.readString();
            this.contentMetadata[key273] = val274;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.BYTE) {
          this.sessionId = input.readByte();
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.LIST) {
          this.chunks = [];
          const _rtmp3276 = input.readListBegin();
          const _size275 = _rtmp3276.size || 0;
          for (let _i277 = 0; _i277 < _size275; ++_i277) {
            let elem278 = null;
            elem278 = input.readBinary();
            this.chunks.push(elem278);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRING) {
          this.relatedMessageId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.I32) {
          this.messageRelationType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.I32) {
          this.readCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.I32) {
          this.relatedMessageServiceCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Message');
    if (this.from_ !== null && this.from_ !== undefined) {
      output.writeFieldBegin('from_', Thrift.Type.STRING, 1);
      output.writeString(this.from_);
      output.writeFieldEnd();
    }
    if (this.to !== null && this.to !== undefined) {
      output.writeFieldBegin('to', Thrift.Type.STRING, 2);
      output.writeString(this.to);
      output.writeFieldEnd();
    }
    if (this.toType !== null && this.toType !== undefined) {
      output.writeFieldBegin('toType', Thrift.Type.I32, 3);
      output.writeI32(this.toType);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 4);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
      output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
      output.writeI64(this.createdTime);
      output.writeFieldEnd();
    }
    if (this.deliveredTime !== null && this.deliveredTime !== undefined) {
      output.writeFieldBegin('deliveredTime', Thrift.Type.I64, 6);
      output.writeI64(this.deliveredTime);
      output.writeFieldEnd();
    }
    if (this.text !== null && this.text !== undefined) {
      output.writeFieldBegin('text', Thrift.Type.STRING, 10);
      output.writeString(this.text);
      output.writeFieldEnd();
    }
    if (this.location !== null && this.location !== undefined) {
      output.writeFieldBegin('location', Thrift.Type.STRUCT, 11);
      this.location.write(output);
      output.writeFieldEnd();
    }
    if (this.hasContent !== null && this.hasContent !== undefined) {
      output.writeFieldBegin('hasContent', Thrift.Type.BOOL, 14);
      output.writeBool(this.hasContent);
      output.writeFieldEnd();
    }
    if (this.contentType !== null && this.contentType !== undefined) {
      output.writeFieldBegin('contentType', Thrift.Type.I32, 15);
      output.writeI32(this.contentType);
      output.writeFieldEnd();
    }
    if (this.contentPreview !== null && this.contentPreview !== undefined) {
      output.writeFieldBegin('contentPreview', Thrift.Type.STRING, 17);
      output.writeBinary(this.contentPreview);
      output.writeFieldEnd();
    }
    if (this.contentMetadata !== null && this.contentMetadata !== undefined) {
      output.writeFieldBegin('contentMetadata', Thrift.Type.MAP, 18);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.contentMetadata));
      for (let kiter279 in this.contentMetadata) {
        if (this.contentMetadata.hasOwnProperty(kiter279)) {
          let viter280 = this.contentMetadata[kiter279];
          output.writeString(kiter279);
          output.writeString(viter280);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.BYTE, 19);
      output.writeByte(this.sessionId);
      output.writeFieldEnd();
    }
    if (this.chunks !== null && this.chunks !== undefined) {
      output.writeFieldBegin('chunks', Thrift.Type.LIST, 20);
      output.writeListBegin(Thrift.Type.STRING, this.chunks.length);
      for (let iter281 in this.chunks) {
        if (this.chunks.hasOwnProperty(iter281)) {
          iter281 = this.chunks[iter281];
          output.writeBinary(iter281);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.relatedMessageId !== null && this.relatedMessageId !== undefined) {
      output.writeFieldBegin('relatedMessageId', Thrift.Type.STRING, 21);
      output.writeString(this.relatedMessageId);
      output.writeFieldEnd();
    }
    if (this.messageRelationType !== null && this.messageRelationType !== undefined) {
      output.writeFieldBegin('messageRelationType', Thrift.Type.I32, 22);
      output.writeI32(this.messageRelationType);
      output.writeFieldEnd();
    }
    if (this.readCount !== null && this.readCount !== undefined) {
      output.writeFieldBegin('readCount', Thrift.Type.I32, 23);
      output.writeI32(this.readCount);
      output.writeFieldEnd();
    }
    if (this.relatedMessageServiceCode !== null && this.relatedMessageServiceCode !== undefined) {
      output.writeFieldBegin('relatedMessageServiceCode', Thrift.Type.I32, 24);
      output.writeI32(this.relatedMessageServiceCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const MessageBoxV2MessageId = module.exports.MessageBoxV2MessageId = class {
  constructor(args) {
    this.deliveredTime = null;
    this.messageId = null;
    if (args) {
      if (args.deliveredTime !== undefined && args.deliveredTime !== null) {
        this.deliveredTime = args.deliveredTime;
      }
      if (args.messageId !== undefined && args.messageId !== null) {
        this.messageId = args.messageId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.deliveredTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.messageId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MessageBoxV2MessageId');
    if (this.deliveredTime !== null && this.deliveredTime !== undefined) {
      output.writeFieldBegin('deliveredTime', Thrift.Type.I64, 1);
      output.writeI64(this.deliveredTime);
      output.writeFieldEnd();
    }
    if (this.messageId !== null && this.messageId !== undefined) {
      output.writeFieldBegin('messageId', Thrift.Type.I64, 2);
      output.writeI64(this.messageId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const MessageCommitResult = module.exports.MessageCommitResult = class {
  constructor(args) {
    this.requestId = null;
    this.state = null;
    this.messageStoreRequestId = null;
    this.messageIds = null;
    this.receiverCount = null;
    this.successCount = null;
    this.failCount = null;
    this.blockCount = null;
    this.unregisteredCount = null;
    this.unrelatedCount = null;
    this.errorDescription = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.state !== undefined && args.state !== null) {
        this.state = args.state;
      }
      if (args.messageStoreRequestId !== undefined && args.messageStoreRequestId !== null) {
        this.messageStoreRequestId = args.messageStoreRequestId;
      }
      if (args.messageIds !== undefined && args.messageIds !== null) {
        this.messageIds = Thrift.copyList(args.messageIds, [null]);
      }
      if (args.receiverCount !== undefined && args.receiverCount !== null) {
        this.receiverCount = args.receiverCount;
      }
      if (args.successCount !== undefined && args.successCount !== null) {
        this.successCount = args.successCount;
      }
      if (args.failCount !== undefined && args.failCount !== null) {
        this.failCount = args.failCount;
      }
      if (args.blockCount !== undefined && args.blockCount !== null) {
        this.blockCount = args.blockCount;
      }
      if (args.unregisteredCount !== undefined && args.unregisteredCount !== null) {
        this.unregisteredCount = args.unregisteredCount;
      }
      if (args.unrelatedCount !== undefined && args.unrelatedCount !== null) {
        this.unrelatedCount = args.unrelatedCount;
      }
      if (args.errorDescription !== undefined && args.errorDescription !== null) {
        this.errorDescription = args.errorDescription;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.state = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.messageStoreRequestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.messageIds = [];
          const _rtmp3283 = input.readListBegin();
          const _size282 = _rtmp3283.size || 0;
          for (let _i284 = 0; _i284 < _size282; ++_i284) {
            let elem285 = null;
            elem285 = input.readString();
            this.messageIds.push(elem285);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.receiverCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I64) {
          this.successCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I64) {
          this.failCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I64) {
          this.blockCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.I64) {
          this.unregisteredCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.I64) {
          this.unrelatedCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRING) {
          this.errorDescription = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MessageCommitResult');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.state !== null && this.state !== undefined) {
      output.writeFieldBegin('state', Thrift.Type.I32, 2);
      output.writeI32(this.state);
      output.writeFieldEnd();
    }
    if (this.messageStoreRequestId !== null && this.messageStoreRequestId !== undefined) {
      output.writeFieldBegin('messageStoreRequestId', Thrift.Type.STRING, 3);
      output.writeString(this.messageStoreRequestId);
      output.writeFieldEnd();
    }
    if (this.messageIds !== null && this.messageIds !== undefined) {
      output.writeFieldBegin('messageIds', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
      for (let iter286 in this.messageIds) {
        if (this.messageIds.hasOwnProperty(iter286)) {
          iter286 = this.messageIds[iter286];
          output.writeString(iter286);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.receiverCount !== null && this.receiverCount !== undefined) {
      output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
      output.writeI64(this.receiverCount);
      output.writeFieldEnd();
    }
    if (this.successCount !== null && this.successCount !== undefined) {
      output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
      output.writeI64(this.successCount);
      output.writeFieldEnd();
    }
    if (this.failCount !== null && this.failCount !== undefined) {
      output.writeFieldBegin('failCount', Thrift.Type.I64, 13);
      output.writeI64(this.failCount);
      output.writeFieldEnd();
    }
    if (this.blockCount !== null && this.blockCount !== undefined) {
      output.writeFieldBegin('blockCount', Thrift.Type.I64, 14);
      output.writeI64(this.blockCount);
      output.writeFieldEnd();
    }
    if (this.unregisteredCount !== null && this.unregisteredCount !== undefined) {
      output.writeFieldBegin('unregisteredCount', Thrift.Type.I64, 15);
      output.writeI64(this.unregisteredCount);
      output.writeFieldEnd();
    }
    if (this.unrelatedCount !== null && this.unrelatedCount !== undefined) {
      output.writeFieldBegin('unrelatedCount', Thrift.Type.I64, 16);
      output.writeI64(this.unrelatedCount);
      output.writeFieldEnd();
    }
    if (this.errorDescription !== null && this.errorDescription !== undefined) {
      output.writeFieldBegin('errorDescription', Thrift.Type.STRING, 21);
      output.writeString(this.errorDescription);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const MessageStoreResult = module.exports.MessageStoreResult = class {
  constructor(args) {
    this.requestId = null;
    this.messageIds = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.messageIds !== undefined && args.messageIds !== null) {
        this.messageIds = Thrift.copyList(args.messageIds, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.messageIds = [];
          const _rtmp3288 = input.readListBegin();
          const _size287 = _rtmp3288.size || 0;
          for (let _i289 = 0; _i289 < _size287; ++_i289) {
            let elem290 = null;
            elem290 = input.readString();
            this.messageIds.push(elem290);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MessageStoreResult');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.messageIds !== null && this.messageIds !== undefined) {
      output.writeFieldBegin('messageIds', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
      for (let iter291 in this.messageIds) {
        if (this.messageIds.hasOwnProperty(iter291)) {
          iter291 = this.messageIds[iter291];
          output.writeString(iter291);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const MetaProfile = module.exports.MetaProfile = class {
  constructor(args) {
    this.createTime = null;
    this.regionCode = null;
    this.identities = null;
    this.udid = null;
    if (args) {
      if (args.createTime !== undefined && args.createTime !== null) {
        this.createTime = args.createTime;
      }
      if (args.regionCode !== undefined && args.regionCode !== null) {
        this.regionCode = args.regionCode;
      }
      if (args.identities !== undefined && args.identities !== null) {
        this.identities = Thrift.copyMap(args.identities, [null]);
      }
      if (args.udid !== undefined && args.udid !== null) {
        this.udid = args.udid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.createTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.regionCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.MAP) {
          this.identities = {};
          const _rtmp3293 = input.readMapBegin();
          const _size292 = _rtmp3293.size || 0;
          for (let _i294 = 0; _i294 < _size292; ++_i294) {
            let key295 = null;
            let val296 = null;
            key295 = input.readI32();
            val296 = input.readString();
            this.identities[key295] = val296;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.udid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MetaProfile');
    if (this.createTime !== null && this.createTime !== undefined) {
      output.writeFieldBegin('createTime', Thrift.Type.I64, 1);
      output.writeI64(this.createTime);
      output.writeFieldEnd();
    }
    if (this.regionCode !== null && this.regionCode !== undefined) {
      output.writeFieldBegin('regionCode', Thrift.Type.STRING, 2);
      output.writeString(this.regionCode);
      output.writeFieldEnd();
    }
    if (this.identities !== null && this.identities !== undefined) {
      output.writeFieldBegin('identities', Thrift.Type.MAP, 3);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.identities));
      for (let kiter297 in this.identities) {
        if (this.identities.hasOwnProperty(kiter297)) {
          let viter298 = this.identities[kiter297];
          output.writeI32(kiter297);
          output.writeString(viter298);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.udid !== null && this.udid !== undefined) {
      output.writeFieldBegin('udid', Thrift.Type.STRING, 4);
      output.writeString(this.udid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const MoretabRecommend = module.exports.MoretabRecommend = class {
  constructor(args) {
    this.accounts = null;
    this.nextUpdateTime = null;
    this.cacheTtlMillis = null;
    if (args) {
      if (args.accounts !== undefined && args.accounts !== null) {
        this.accounts = Thrift.copyList(args.accounts, [null]);
      }
      if (args.nextUpdateTime !== undefined && args.nextUpdateTime !== null) {
        this.nextUpdateTime = args.nextUpdateTime;
      }
      if (args.cacheTtlMillis !== undefined && args.cacheTtlMillis !== null) {
        this.cacheTtlMillis = args.cacheTtlMillis;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.accounts = [];
          const _rtmp3300 = input.readListBegin();
          const _size299 = _rtmp3300.size || 0;
          for (let _i301 = 0; _i301 < _size299; ++_i301) {
            let elem302 = null;
            elem302 = new ttypes.MoretabRecommendAccount();
            elem302.read(input);
            this.accounts.push(elem302);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.nextUpdateTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.cacheTtlMillis = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MoretabRecommend');
    if (this.accounts !== null && this.accounts !== undefined) {
      output.writeFieldBegin('accounts', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.accounts.length);
      for (let iter303 in this.accounts) {
        if (this.accounts.hasOwnProperty(iter303)) {
          iter303 = this.accounts[iter303];
          iter303.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.nextUpdateTime !== null && this.nextUpdateTime !== undefined) {
      output.writeFieldBegin('nextUpdateTime', Thrift.Type.I64, 2);
      output.writeI64(this.nextUpdateTime);
      output.writeFieldEnd();
    }
    if (this.cacheTtlMillis !== null && this.cacheTtlMillis !== undefined) {
      output.writeFieldBegin('cacheTtlMillis', Thrift.Type.I64, 3);
      output.writeI64(this.cacheTtlMillis);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const MoretabRecommendAccount = module.exports.MoretabRecommendAccount = class {
  constructor(args) {
    this.mid = null;
    this.displayName = null;
    this.statusMessage = null;
    this.pictureStatus = null;
    this.picturePath = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.statusMessage !== undefined && args.statusMessage !== null) {
        this.statusMessage = args.statusMessage;
      }
      if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
        this.pictureStatus = args.pictureStatus;
      }
      if (args.picturePath !== undefined && args.picturePath !== null) {
        this.picturePath = args.picturePath;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.statusMessage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.pictureStatus = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.picturePath = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MoretabRecommendAccount');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.statusMessage !== null && this.statusMessage !== undefined) {
      output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 3);
      output.writeString(this.statusMessage);
      output.writeFieldEnd();
    }
    if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
      output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 4);
      output.writeString(this.pictureStatus);
      output.writeFieldEnd();
    }
    if (this.picturePath !== null && this.picturePath !== undefined) {
      output.writeFieldBegin('picturePath', Thrift.Type.STRING, 5);
      output.writeString(this.picturePath);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const NearbyEntry = module.exports.NearbyEntry = class {
  constructor(args) {
    this.emid = null;
    this.distance = null;
    this.lastUpdatedInSec = null;
    this.property = null;
    this.profile = null;
    if (args) {
      if (args.emid !== undefined && args.emid !== null) {
        this.emid = args.emid;
      }
      if (args.distance !== undefined && args.distance !== null) {
        this.distance = args.distance;
      }
      if (args.lastUpdatedInSec !== undefined && args.lastUpdatedInSec !== null) {
        this.lastUpdatedInSec = args.lastUpdatedInSec;
      }
      if (args.property !== undefined && args.property !== null) {
        this.property = Thrift.copyMap(args.property, [null]);
      }
      if (args.profile !== undefined && args.profile !== null) {
        this.profile = new ttypes.Profile(args.profile);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.emid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.DOUBLE) {
          this.distance = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.lastUpdatedInSec = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.MAP) {
          this.property = {};
          const _rtmp3305 = input.readMapBegin();
          const _size304 = _rtmp3305.size || 0;
          for (let _i306 = 0; _i306 < _size304; ++_i306) {
            let key307 = null;
            let val308 = null;
            key307 = input.readString();
            val308 = input.readString();
            this.property[key307] = val308;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.profile = new ttypes.Profile();
          this.profile.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('NearbyEntry');
    if (this.emid !== null && this.emid !== undefined) {
      output.writeFieldBegin('emid', Thrift.Type.STRING, 1);
      output.writeString(this.emid);
      output.writeFieldEnd();
    }
    if (this.distance !== null && this.distance !== undefined) {
      output.writeFieldBegin('distance', Thrift.Type.DOUBLE, 2);
      output.writeDouble(this.distance);
      output.writeFieldEnd();
    }
    if (this.lastUpdatedInSec !== null && this.lastUpdatedInSec !== undefined) {
      output.writeFieldBegin('lastUpdatedInSec', Thrift.Type.I32, 3);
      output.writeI32(this.lastUpdatedInSec);
      output.writeFieldEnd();
    }
    if (this.property !== null && this.property !== undefined) {
      output.writeFieldBegin('property', Thrift.Type.MAP, 4);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.property));
      for (let kiter309 in this.property) {
        if (this.property.hasOwnProperty(kiter309)) {
          let viter310 = this.property[kiter309];
          output.writeString(kiter309);
          output.writeString(viter310);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.profile !== null && this.profile !== undefined) {
      output.writeFieldBegin('profile', Thrift.Type.STRUCT, 5);
      this.profile.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const NotiCenterEventData = module.exports.NotiCenterEventData = class {
  constructor(args) {
    this.id = null;
    this.to = null;
    this.from_ = null;
    this.toChannel = null;
    this.fromChannel = null;
    this.eventType = null;
    this.createdTime = null;
    this.operationRevision = null;
    this.content = null;
    this.push = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.to !== undefined && args.to !== null) {
        this.to = args.to;
      }
      if (args.from_ !== undefined && args.from_ !== null) {
        this.from_ = args.from_;
      }
      if (args.toChannel !== undefined && args.toChannel !== null) {
        this.toChannel = args.toChannel;
      }
      if (args.fromChannel !== undefined && args.fromChannel !== null) {
        this.fromChannel = args.fromChannel;
      }
      if (args.eventType !== undefined && args.eventType !== null) {
        this.eventType = args.eventType;
      }
      if (args.createdTime !== undefined && args.createdTime !== null) {
        this.createdTime = args.createdTime;
      }
      if (args.operationRevision !== undefined && args.operationRevision !== null) {
        this.operationRevision = args.operationRevision;
      }
      if (args.content !== undefined && args.content !== null) {
        this.content = Thrift.copyMap(args.content, [null]);
      }
      if (args.push !== undefined && args.push !== null) {
        this.push = Thrift.copyMap(args.push, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.to = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.from_ = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.toChannel = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.fromChannel = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.eventType = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.createdTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I64) {
          this.operationRevision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.MAP) {
          this.content = {};
          const _rtmp3312 = input.readMapBegin();
          const _size311 = _rtmp3312.size || 0;
          for (let _i313 = 0; _i313 < _size311; ++_i313) {
            let key314 = null;
            let val315 = null;
            key314 = input.readString();
            val315 = input.readString();
            this.content[key314] = val315;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.MAP) {
          this.push = {};
          const _rtmp3317 = input.readMapBegin();
          const _size316 = _rtmp3317.size || 0;
          for (let _i318 = 0; _i318 < _size316; ++_i318) {
            let key319 = null;
            let val320 = null;
            key319 = input.readString();
            val320 = input.readString();
            this.push[key319] = val320;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('NotiCenterEventData');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.to !== null && this.to !== undefined) {
      output.writeFieldBegin('to', Thrift.Type.STRING, 2);
      output.writeString(this.to);
      output.writeFieldEnd();
    }
    if (this.from_ !== null && this.from_ !== undefined) {
      output.writeFieldBegin('from_', Thrift.Type.STRING, 3);
      output.writeString(this.from_);
      output.writeFieldEnd();
    }
    if (this.toChannel !== null && this.toChannel !== undefined) {
      output.writeFieldBegin('toChannel', Thrift.Type.STRING, 4);
      output.writeString(this.toChannel);
      output.writeFieldEnd();
    }
    if (this.fromChannel !== null && this.fromChannel !== undefined) {
      output.writeFieldBegin('fromChannel', Thrift.Type.STRING, 5);
      output.writeString(this.fromChannel);
      output.writeFieldEnd();
    }
    if (this.eventType !== null && this.eventType !== undefined) {
      output.writeFieldBegin('eventType', Thrift.Type.STRING, 6);
      output.writeString(this.eventType);
      output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
      output.writeFieldBegin('createdTime', Thrift.Type.I64, 7);
      output.writeI64(this.createdTime);
      output.writeFieldEnd();
    }
    if (this.operationRevision !== null && this.operationRevision !== undefined) {
      output.writeFieldBegin('operationRevision', Thrift.Type.I64, 8);
      output.writeI64(this.operationRevision);
      output.writeFieldEnd();
    }
    if (this.content !== null && this.content !== undefined) {
      output.writeFieldBegin('content', Thrift.Type.MAP, 9);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.content));
      for (let kiter321 in this.content) {
        if (this.content.hasOwnProperty(kiter321)) {
          let viter322 = this.content[kiter321];
          output.writeString(kiter321);
          output.writeString(viter322);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.push !== null && this.push !== undefined) {
      output.writeFieldBegin('push', Thrift.Type.MAP, 10);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.push));
      for (let kiter323 in this.push) {
        if (this.push.hasOwnProperty(kiter323)) {
          let viter324 = this.push[kiter323];
          output.writeString(kiter323);
          output.writeString(viter324);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const NotificationFetchResult = module.exports.NotificationFetchResult = class {
  constructor(args) {
    this.fetchMode = null;
    this.itemList = null;
    if (args) {
      if (args.fetchMode !== undefined && args.fetchMode !== null) {
        this.fetchMode = args.fetchMode;
      }
      if (args.itemList !== undefined && args.itemList !== null) {
        this.itemList = Thrift.copyList(args.itemList, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.fetchMode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.itemList = [];
          const _rtmp3326 = input.readListBegin();
          const _size325 = _rtmp3326.size || 0;
          for (let _i327 = 0; _i327 < _size325; ++_i327) {
            let elem328 = null;
            elem328 = new ttypes.NotificationItem();
            elem328.read(input);
            this.itemList.push(elem328);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('NotificationFetchResult');
    if (this.fetchMode !== null && this.fetchMode !== undefined) {
      output.writeFieldBegin('fetchMode', Thrift.Type.I32, 1);
      output.writeI32(this.fetchMode);
      output.writeFieldEnd();
    }
    if (this.itemList !== null && this.itemList !== undefined) {
      output.writeFieldBegin('itemList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.itemList.length);
      for (let iter329 in this.itemList) {
        if (this.itemList.hasOwnProperty(iter329)) {
          iter329 = this.itemList[iter329];
          iter329.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const NotificationItem = module.exports.NotificationItem = class {
  constructor(args) {
    this.id = null;
    this.from_ = null;
    this.to = null;
    this.fromChannel = null;
    this.toChannel = null;
    this.revision = null;
    this.createdTime = null;
    this.content = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.from_ !== undefined && args.from_ !== null) {
        this.from_ = args.from_;
      }
      if (args.to !== undefined && args.to !== null) {
        this.to = args.to;
      }
      if (args.fromChannel !== undefined && args.fromChannel !== null) {
        this.fromChannel = args.fromChannel;
      }
      if (args.toChannel !== undefined && args.toChannel !== null) {
        this.toChannel = args.toChannel;
      }
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
      if (args.createdTime !== undefined && args.createdTime !== null) {
        this.createdTime = args.createdTime;
      }
      if (args.content !== undefined && args.content !== null) {
        this.content = Thrift.copyMap(args.content, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.from_ = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.to = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.fromChannel = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.toChannel = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I64) {
          this.createdTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.MAP) {
          this.content = {};
          const _rtmp3331 = input.readMapBegin();
          const _size330 = _rtmp3331.size || 0;
          for (let _i332 = 0; _i332 < _size330; ++_i332) {
            let key333 = null;
            let val334 = null;
            key333 = input.readString();
            val334 = input.readString();
            this.content[key333] = val334;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('NotificationItem');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.from_ !== null && this.from_ !== undefined) {
      output.writeFieldBegin('from_', Thrift.Type.STRING, 2);
      output.writeString(this.from_);
      output.writeFieldEnd();
    }
    if (this.to !== null && this.to !== undefined) {
      output.writeFieldBegin('to', Thrift.Type.STRING, 3);
      output.writeString(this.to);
      output.writeFieldEnd();
    }
    if (this.fromChannel !== null && this.fromChannel !== undefined) {
      output.writeFieldBegin('fromChannel', Thrift.Type.STRING, 4);
      output.writeString(this.fromChannel);
      output.writeFieldEnd();
    }
    if (this.toChannel !== null && this.toChannel !== undefined) {
      output.writeFieldBegin('toChannel', Thrift.Type.STRING, 5);
      output.writeString(this.toChannel);
      output.writeFieldEnd();
    }
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 7);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
      output.writeFieldBegin('createdTime', Thrift.Type.I64, 8);
      output.writeI64(this.createdTime);
      output.writeFieldEnd();
    }
    if (this.content !== null && this.content !== undefined) {
      output.writeFieldBegin('content', Thrift.Type.MAP, 9);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.content));
      for (let kiter335 in this.content) {
        if (this.content.hasOwnProperty(kiter335)) {
          let viter336 = this.content[kiter335];
          output.writeString(kiter335);
          output.writeString(viter336);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Operation = module.exports.Operation = class {
  constructor(args) {
    this.revision = null;
    this.createdTime = null;
    this.type = null;
    this.reqSeq = null;
    this.checksum = null;
    this.status = null;
    this.param1 = null;
    this.param2 = null;
    this.param3 = null;
    this.message = null;
    if (args) {
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
      if (args.createdTime !== undefined && args.createdTime !== null) {
        this.createdTime = args.createdTime;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.reqSeq !== undefined && args.reqSeq !== null) {
        this.reqSeq = args.reqSeq;
      }
      if (args.checksum !== undefined && args.checksum !== null) {
        this.checksum = args.checksum;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.param1 !== undefined && args.param1 !== null) {
        this.param1 = args.param1;
      }
      if (args.param2 !== undefined && args.param2 !== null) {
        this.param2 = args.param2;
      }
      if (args.param3 !== undefined && args.param3 !== null) {
        this.param3 = args.param3;
      }
      if (args.message !== undefined && args.message !== null) {
        this.message = new ttypes.Message(args.message);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createdTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.reqSeq = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.checksum = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.param1 = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.param2 = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.param3 = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.STRUCT) {
          this.message = new ttypes.Message();
          this.message.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Operation');
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 1);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
      output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
      output.writeI64(this.createdTime);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 3);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.reqSeq !== null && this.reqSeq !== undefined) {
      output.writeFieldBegin('reqSeq', Thrift.Type.I32, 4);
      output.writeI32(this.reqSeq);
      output.writeFieldEnd();
    }
    if (this.checksum !== null && this.checksum !== undefined) {
      output.writeFieldBegin('checksum', Thrift.Type.STRING, 5);
      output.writeString(this.checksum);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 7);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.param1 !== null && this.param1 !== undefined) {
      output.writeFieldBegin('param1', Thrift.Type.STRING, 10);
      output.writeString(this.param1);
      output.writeFieldEnd();
    }
    if (this.param2 !== null && this.param2 !== undefined) {
      output.writeFieldBegin('param2', Thrift.Type.STRING, 11);
      output.writeString(this.param2);
      output.writeFieldEnd();
    }
    if (this.param3 !== null && this.param3 !== undefined) {
      output.writeFieldBegin('param3', Thrift.Type.STRING, 12);
      output.writeString(this.param3);
      output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRUCT, 20);
      this.message.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const OTPResult = module.exports.OTPResult = class {
  constructor(args) {
    this.otpId = null;
    this.otp = null;
    if (args) {
      if (args.otpId !== undefined && args.otpId !== null) {
        this.otpId = args.otpId;
      }
      if (args.otp !== undefined && args.otp !== null) {
        this.otp = args.otp;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.otpId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.otp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('OTPResult');
    if (this.otpId !== null && this.otpId !== undefined) {
      output.writeFieldBegin('otpId', Thrift.Type.STRING, 1);
      output.writeString(this.otpId);
      output.writeFieldEnd();
    }
    if (this.otp !== null && this.otp !== undefined) {
      output.writeFieldBegin('otp', Thrift.Type.STRING, 2);
      output.writeString(this.otp);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaidCallAdCountry = module.exports.PaidCallAdCountry = class {
  constructor(args) {
    this.countryCode = null;
    this.rateDivision = null;
    if (args) {
      if (args.countryCode !== undefined && args.countryCode !== null) {
        this.countryCode = args.countryCode;
      }
      if (args.rateDivision !== undefined && args.rateDivision !== null) {
        this.rateDivision = args.rateDivision;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.countryCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.rateDivision = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaidCallAdCountry');
    if (this.countryCode !== null && this.countryCode !== undefined) {
      output.writeFieldBegin('countryCode', Thrift.Type.STRING, 1);
      output.writeString(this.countryCode);
      output.writeFieldEnd();
    }
    if (this.rateDivision !== null && this.rateDivision !== undefined) {
      output.writeFieldBegin('rateDivision', Thrift.Type.STRING, 2);
      output.writeString(this.rateDivision);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaidCallAdResult = module.exports.PaidCallAdResult = class {
  constructor(args) {
    this.adRemains = null;
    if (args) {
      if (args.adRemains !== undefined && args.adRemains !== null) {
        this.adRemains = args.adRemains;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.adRemains = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaidCallAdResult');
    if (this.adRemains !== null && this.adRemains !== undefined) {
      output.writeFieldBegin('adRemains', Thrift.Type.I32, 1);
      output.writeI32(this.adRemains);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaidCallBalance = module.exports.PaidCallBalance = class {
  constructor(args) {
    this.productType = null;
    this.productName = null;
    this.unit = null;
    this.limitedPaidBalance = null;
    this.limitedFreeBalance = null;
    this.unlimitedPaidBalance = null;
    this.unlimitedFreeBalance = null;
    this.startTime = null;
    this.endTime = null;
    this.autopayEnabled = null;
    if (args) {
      if (args.productType !== undefined && args.productType !== null) {
        this.productType = args.productType;
      }
      if (args.productName !== undefined && args.productName !== null) {
        this.productName = args.productName;
      }
      if (args.unit !== undefined && args.unit !== null) {
        this.unit = args.unit;
      }
      if (args.limitedPaidBalance !== undefined && args.limitedPaidBalance !== null) {
        this.limitedPaidBalance = args.limitedPaidBalance;
      }
      if (args.limitedFreeBalance !== undefined && args.limitedFreeBalance !== null) {
        this.limitedFreeBalance = args.limitedFreeBalance;
      }
      if (args.unlimitedPaidBalance !== undefined && args.unlimitedPaidBalance !== null) {
        this.unlimitedPaidBalance = args.unlimitedPaidBalance;
      }
      if (args.unlimitedFreeBalance !== undefined && args.unlimitedFreeBalance !== null) {
        this.unlimitedFreeBalance = args.unlimitedFreeBalance;
      }
      if (args.startTime !== undefined && args.startTime !== null) {
        this.startTime = args.startTime;
      }
      if (args.endTime !== undefined && args.endTime !== null) {
        this.endTime = args.endTime;
      }
      if (args.autopayEnabled !== undefined && args.autopayEnabled !== null) {
        this.autopayEnabled = args.autopayEnabled;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.productType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.productName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.unit = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.limitedPaidBalance = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.limitedFreeBalance = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.unlimitedPaidBalance = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.unlimitedFreeBalance = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I64) {
          this.startTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I64) {
          this.endTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.BOOL) {
          this.autopayEnabled = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaidCallBalance');
    if (this.productType !== null && this.productType !== undefined) {
      output.writeFieldBegin('productType', Thrift.Type.I32, 1);
      output.writeI32(this.productType);
      output.writeFieldEnd();
    }
    if (this.productName !== null && this.productName !== undefined) {
      output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
      output.writeString(this.productName);
      output.writeFieldEnd();
    }
    if (this.unit !== null && this.unit !== undefined) {
      output.writeFieldBegin('unit', Thrift.Type.STRING, 3);
      output.writeString(this.unit);
      output.writeFieldEnd();
    }
    if (this.limitedPaidBalance !== null && this.limitedPaidBalance !== undefined) {
      output.writeFieldBegin('limitedPaidBalance', Thrift.Type.I32, 4);
      output.writeI32(this.limitedPaidBalance);
      output.writeFieldEnd();
    }
    if (this.limitedFreeBalance !== null && this.limitedFreeBalance !== undefined) {
      output.writeFieldBegin('limitedFreeBalance', Thrift.Type.I32, 5);
      output.writeI32(this.limitedFreeBalance);
      output.writeFieldEnd();
    }
    if (this.unlimitedPaidBalance !== null && this.unlimitedPaidBalance !== undefined) {
      output.writeFieldBegin('unlimitedPaidBalance', Thrift.Type.I32, 6);
      output.writeI32(this.unlimitedPaidBalance);
      output.writeFieldEnd();
    }
    if (this.unlimitedFreeBalance !== null && this.unlimitedFreeBalance !== undefined) {
      output.writeFieldBegin('unlimitedFreeBalance', Thrift.Type.I32, 7);
      output.writeI32(this.unlimitedFreeBalance);
      output.writeFieldEnd();
    }
    if (this.startTime !== null && this.startTime !== undefined) {
      output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
      output.writeI64(this.startTime);
      output.writeFieldEnd();
    }
    if (this.endTime !== null && this.endTime !== undefined) {
      output.writeFieldBegin('endTime', Thrift.Type.I64, 9);
      output.writeI64(this.endTime);
      output.writeFieldEnd();
    }
    if (this.autopayEnabled !== null && this.autopayEnabled !== undefined) {
      output.writeFieldBegin('autopayEnabled', Thrift.Type.BOOL, 10);
      output.writeBool(this.autopayEnabled);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaidCallCurrencyExchangeRate = module.exports.PaidCallCurrencyExchangeRate = class {
  constructor(args) {
    this.currencyCode = null;
    this.currencyName = null;
    this.currencySign = null;
    this.preferred = null;
    this.coinRate = null;
    this.creditRate = null;
    if (args) {
      if (args.currencyCode !== undefined && args.currencyCode !== null) {
        this.currencyCode = args.currencyCode;
      }
      if (args.currencyName !== undefined && args.currencyName !== null) {
        this.currencyName = args.currencyName;
      }
      if (args.currencySign !== undefined && args.currencySign !== null) {
        this.currencySign = args.currencySign;
      }
      if (args.preferred !== undefined && args.preferred !== null) {
        this.preferred = args.preferred;
      }
      if (args.coinRate !== undefined && args.coinRate !== null) {
        this.coinRate = args.coinRate;
      }
      if (args.creditRate !== undefined && args.creditRate !== null) {
        this.creditRate = args.creditRate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.currencyCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.currencyName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.currencySign = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.preferred = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.coinRate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.creditRate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaidCallCurrencyExchangeRate');
    if (this.currencyCode !== null && this.currencyCode !== undefined) {
      output.writeFieldBegin('currencyCode', Thrift.Type.STRING, 1);
      output.writeString(this.currencyCode);
      output.writeFieldEnd();
    }
    if (this.currencyName !== null && this.currencyName !== undefined) {
      output.writeFieldBegin('currencyName', Thrift.Type.STRING, 2);
      output.writeString(this.currencyName);
      output.writeFieldEnd();
    }
    if (this.currencySign !== null && this.currencySign !== undefined) {
      output.writeFieldBegin('currencySign', Thrift.Type.STRING, 3);
      output.writeString(this.currencySign);
      output.writeFieldEnd();
    }
    if (this.preferred !== null && this.preferred !== undefined) {
      output.writeFieldBegin('preferred', Thrift.Type.BOOL, 4);
      output.writeBool(this.preferred);
      output.writeFieldEnd();
    }
    if (this.coinRate !== null && this.coinRate !== undefined) {
      output.writeFieldBegin('coinRate', Thrift.Type.STRING, 5);
      output.writeString(this.coinRate);
      output.writeFieldEnd();
    }
    if (this.creditRate !== null && this.creditRate !== undefined) {
      output.writeFieldBegin('creditRate', Thrift.Type.STRING, 6);
      output.writeString(this.creditRate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaidCallDialing = module.exports.PaidCallDialing = class {
  constructor(args) {
    this.type = null;
    this.dialedNumber = null;
    this.serviceDomain = null;
    this.productType = null;
    this.productName = null;
    this.multipleProduct = null;
    this.callerIdStatus = null;
    this.balance = null;
    this.unit = null;
    this.rate = null;
    this.displayCode = null;
    this.calledNumber = null;
    this.calleeNationalNumber = null;
    this.calleeCallingCode = null;
    this.rateDivision = null;
    this.adMaxMin = null;
    this.adRemains = null;
    this.adSessionId = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
        this.dialedNumber = args.dialedNumber;
      }
      if (args.serviceDomain !== undefined && args.serviceDomain !== null) {
        this.serviceDomain = args.serviceDomain;
      }
      if (args.productType !== undefined && args.productType !== null) {
        this.productType = args.productType;
      }
      if (args.productName !== undefined && args.productName !== null) {
        this.productName = args.productName;
      }
      if (args.multipleProduct !== undefined && args.multipleProduct !== null) {
        this.multipleProduct = args.multipleProduct;
      }
      if (args.callerIdStatus !== undefined && args.callerIdStatus !== null) {
        this.callerIdStatus = args.callerIdStatus;
      }
      if (args.balance !== undefined && args.balance !== null) {
        this.balance = args.balance;
      }
      if (args.unit !== undefined && args.unit !== null) {
        this.unit = args.unit;
      }
      if (args.rate !== undefined && args.rate !== null) {
        this.rate = args.rate;
      }
      if (args.displayCode !== undefined && args.displayCode !== null) {
        this.displayCode = args.displayCode;
      }
      if (args.calledNumber !== undefined && args.calledNumber !== null) {
        this.calledNumber = args.calledNumber;
      }
      if (args.calleeNationalNumber !== undefined && args.calleeNationalNumber !== null) {
        this.calleeNationalNumber = args.calleeNationalNumber;
      }
      if (args.calleeCallingCode !== undefined && args.calleeCallingCode !== null) {
        this.calleeCallingCode = args.calleeCallingCode;
      }
      if (args.rateDivision !== undefined && args.rateDivision !== null) {
        this.rateDivision = args.rateDivision;
      }
      if (args.adMaxMin !== undefined && args.adMaxMin !== null) {
        this.adMaxMin = args.adMaxMin;
      }
      if (args.adRemains !== undefined && args.adRemains !== null) {
        this.adRemains = args.adRemains;
      }
      if (args.adSessionId !== undefined && args.adSessionId !== null) {
        this.adSessionId = args.adSessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.dialedNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.serviceDomain = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.productType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.productName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.multipleProduct = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.callerIdStatus = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.balance = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.unit = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I32) {
          this.rate = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRING) {
          this.displayCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.STRING) {
          this.calledNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRING) {
          this.calleeNationalNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.STRING) {
          this.calleeCallingCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.STRING) {
          this.rateDivision = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.I32) {
          this.adMaxMin = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.I32) {
          this.adRemains = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.STRING) {
          this.adSessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaidCallDialing');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
      output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 2);
      output.writeString(this.dialedNumber);
      output.writeFieldEnd();
    }
    if (this.serviceDomain !== null && this.serviceDomain !== undefined) {
      output.writeFieldBegin('serviceDomain', Thrift.Type.STRING, 3);
      output.writeString(this.serviceDomain);
      output.writeFieldEnd();
    }
    if (this.productType !== null && this.productType !== undefined) {
      output.writeFieldBegin('productType', Thrift.Type.I32, 4);
      output.writeI32(this.productType);
      output.writeFieldEnd();
    }
    if (this.productName !== null && this.productName !== undefined) {
      output.writeFieldBegin('productName', Thrift.Type.STRING, 5);
      output.writeString(this.productName);
      output.writeFieldEnd();
    }
    if (this.multipleProduct !== null && this.multipleProduct !== undefined) {
      output.writeFieldBegin('multipleProduct', Thrift.Type.BOOL, 6);
      output.writeBool(this.multipleProduct);
      output.writeFieldEnd();
    }
    if (this.callerIdStatus !== null && this.callerIdStatus !== undefined) {
      output.writeFieldBegin('callerIdStatus', Thrift.Type.I32, 7);
      output.writeI32(this.callerIdStatus);
      output.writeFieldEnd();
    }
    if (this.balance !== null && this.balance !== undefined) {
      output.writeFieldBegin('balance', Thrift.Type.I32, 10);
      output.writeI32(this.balance);
      output.writeFieldEnd();
    }
    if (this.unit !== null && this.unit !== undefined) {
      output.writeFieldBegin('unit', Thrift.Type.STRING, 11);
      output.writeString(this.unit);
      output.writeFieldEnd();
    }
    if (this.rate !== null && this.rate !== undefined) {
      output.writeFieldBegin('rate', Thrift.Type.I32, 12);
      output.writeI32(this.rate);
      output.writeFieldEnd();
    }
    if (this.displayCode !== null && this.displayCode !== undefined) {
      output.writeFieldBegin('displayCode', Thrift.Type.STRING, 13);
      output.writeString(this.displayCode);
      output.writeFieldEnd();
    }
    if (this.calledNumber !== null && this.calledNumber !== undefined) {
      output.writeFieldBegin('calledNumber', Thrift.Type.STRING, 14);
      output.writeString(this.calledNumber);
      output.writeFieldEnd();
    }
    if (this.calleeNationalNumber !== null && this.calleeNationalNumber !== undefined) {
      output.writeFieldBegin('calleeNationalNumber', Thrift.Type.STRING, 15);
      output.writeString(this.calleeNationalNumber);
      output.writeFieldEnd();
    }
    if (this.calleeCallingCode !== null && this.calleeCallingCode !== undefined) {
      output.writeFieldBegin('calleeCallingCode', Thrift.Type.STRING, 16);
      output.writeString(this.calleeCallingCode);
      output.writeFieldEnd();
    }
    if (this.rateDivision !== null && this.rateDivision !== undefined) {
      output.writeFieldBegin('rateDivision', Thrift.Type.STRING, 17);
      output.writeString(this.rateDivision);
      output.writeFieldEnd();
    }
    if (this.adMaxMin !== null && this.adMaxMin !== undefined) {
      output.writeFieldBegin('adMaxMin', Thrift.Type.I32, 20);
      output.writeI32(this.adMaxMin);
      output.writeFieldEnd();
    }
    if (this.adRemains !== null && this.adRemains !== undefined) {
      output.writeFieldBegin('adRemains', Thrift.Type.I32, 21);
      output.writeI32(this.adRemains);
      output.writeFieldEnd();
    }
    if (this.adSessionId !== null && this.adSessionId !== undefined) {
      output.writeFieldBegin('adSessionId', Thrift.Type.STRING, 22);
      output.writeString(this.adSessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaidCallHistory = module.exports.PaidCallHistory = class {
  constructor(args) {
    this.seq = null;
    this.type = null;
    this.dialedNumber = null;
    this.calledNumber = null;
    this.toMid = null;
    this.toName = null;
    this.setupTime = null;
    this.startTime = null;
    this.endTime = null;
    this.duration = null;
    this.terminate = null;
    this.productType = null;
    this.charge = null;
    this.unit = null;
    this.result = null;
    if (args) {
      if (args.seq !== undefined && args.seq !== null) {
        this.seq = args.seq;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
        this.dialedNumber = args.dialedNumber;
      }
      if (args.calledNumber !== undefined && args.calledNumber !== null) {
        this.calledNumber = args.calledNumber;
      }
      if (args.toMid !== undefined && args.toMid !== null) {
        this.toMid = args.toMid;
      }
      if (args.toName !== undefined && args.toName !== null) {
        this.toName = args.toName;
      }
      if (args.setupTime !== undefined && args.setupTime !== null) {
        this.setupTime = args.setupTime;
      }
      if (args.startTime !== undefined && args.startTime !== null) {
        this.startTime = args.startTime;
      }
      if (args.endTime !== undefined && args.endTime !== null) {
        this.endTime = args.endTime;
      }
      if (args.duration !== undefined && args.duration !== null) {
        this.duration = args.duration;
      }
      if (args.terminate !== undefined && args.terminate !== null) {
        this.terminate = args.terminate;
      }
      if (args.productType !== undefined && args.productType !== null) {
        this.productType = args.productType;
      }
      if (args.charge !== undefined && args.charge !== null) {
        this.charge = args.charge;
      }
      if (args.unit !== undefined && args.unit !== null) {
        this.unit = args.unit;
      }
      if (args.result !== undefined && args.result !== null) {
        this.result = args.result;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.seq = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.dialedNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.calledNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.toMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.toName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.setupTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I64) {
          this.startTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I64) {
          this.endTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I64) {
          this.duration = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.terminate = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I32) {
          this.productType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I32) {
          this.charge = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.STRING) {
          this.unit = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRING) {
          this.result = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaidCallHistory');
    if (this.seq !== null && this.seq !== undefined) {
      output.writeFieldBegin('seq', Thrift.Type.I64, 1);
      output.writeI64(this.seq);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 2);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
      output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 3);
      output.writeString(this.dialedNumber);
      output.writeFieldEnd();
    }
    if (this.calledNumber !== null && this.calledNumber !== undefined) {
      output.writeFieldBegin('calledNumber', Thrift.Type.STRING, 4);
      output.writeString(this.calledNumber);
      output.writeFieldEnd();
    }
    if (this.toMid !== null && this.toMid !== undefined) {
      output.writeFieldBegin('toMid', Thrift.Type.STRING, 5);
      output.writeString(this.toMid);
      output.writeFieldEnd();
    }
    if (this.toName !== null && this.toName !== undefined) {
      output.writeFieldBegin('toName', Thrift.Type.STRING, 6);
      output.writeString(this.toName);
      output.writeFieldEnd();
    }
    if (this.setupTime !== null && this.setupTime !== undefined) {
      output.writeFieldBegin('setupTime', Thrift.Type.I64, 7);
      output.writeI64(this.setupTime);
      output.writeFieldEnd();
    }
    if (this.startTime !== null && this.startTime !== undefined) {
      output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
      output.writeI64(this.startTime);
      output.writeFieldEnd();
    }
    if (this.endTime !== null && this.endTime !== undefined) {
      output.writeFieldBegin('endTime', Thrift.Type.I64, 9);
      output.writeI64(this.endTime);
      output.writeFieldEnd();
    }
    if (this.duration !== null && this.duration !== undefined) {
      output.writeFieldBegin('duration', Thrift.Type.I64, 10);
      output.writeI64(this.duration);
      output.writeFieldEnd();
    }
    if (this.terminate !== null && this.terminate !== undefined) {
      output.writeFieldBegin('terminate', Thrift.Type.I32, 11);
      output.writeI32(this.terminate);
      output.writeFieldEnd();
    }
    if (this.productType !== null && this.productType !== undefined) {
      output.writeFieldBegin('productType', Thrift.Type.I32, 12);
      output.writeI32(this.productType);
      output.writeFieldEnd();
    }
    if (this.charge !== null && this.charge !== undefined) {
      output.writeFieldBegin('charge', Thrift.Type.I32, 13);
      output.writeI32(this.charge);
      output.writeFieldEnd();
    }
    if (this.unit !== null && this.unit !== undefined) {
      output.writeFieldBegin('unit', Thrift.Type.STRING, 14);
      output.writeString(this.unit);
      output.writeFieldEnd();
    }
    if (this.result !== null && this.result !== undefined) {
      output.writeFieldBegin('result', Thrift.Type.STRING, 15);
      output.writeString(this.result);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaidCallHistoryResult = module.exports.PaidCallHistoryResult = class {
  constructor(args) {
    this.historys = null;
    this.hasNext = null;
    if (args) {
      if (args.historys !== undefined && args.historys !== null) {
        this.historys = Thrift.copyList(args.historys, [ttypes.PaidCallHistory]);
      }
      if (args.hasNext !== undefined && args.hasNext !== null) {
        this.hasNext = args.hasNext;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.historys = [];
          const _rtmp3338 = input.readListBegin();
          const _size337 = _rtmp3338.size || 0;
          for (let _i339 = 0; _i339 < _size337; ++_i339) {
            let elem340 = null;
            elem340 = new ttypes.PaidCallHistory();
            elem340.read(input);
            this.historys.push(elem340);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.hasNext = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaidCallHistoryResult');
    if (this.historys !== null && this.historys !== undefined) {
      output.writeFieldBegin('historys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.historys.length);
      for (let iter341 in this.historys) {
        if (this.historys.hasOwnProperty(iter341)) {
          iter341 = this.historys[iter341];
          iter341.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.hasNext !== null && this.hasNext !== undefined) {
      output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 2);
      output.writeBool(this.hasNext);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaidCallMetadataResult = module.exports.PaidCallMetadataResult = class {
  constructor(args) {
    this.currencyExchangeRates = null;
    this.recommendedCountryCodes = null;
    this.adCountries = null;
    if (args) {
      if (args.currencyExchangeRates !== undefined && args.currencyExchangeRates !== null) {
        this.currencyExchangeRates = Thrift.copyList(args.currencyExchangeRates, [ttypes.PaidCallCurrencyExchangeRate]);
      }
      if (args.recommendedCountryCodes !== undefined && args.recommendedCountryCodes !== null) {
        this.recommendedCountryCodes = Thrift.copyList(args.recommendedCountryCodes, [null]);
      }
      if (args.adCountries !== undefined && args.adCountries !== null) {
        this.adCountries = Thrift.copyList(args.adCountries, [ttypes.PaidCallAdCountry]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.currencyExchangeRates = [];
          const _rtmp3343 = input.readListBegin();
          const _size342 = _rtmp3343.size || 0;
          for (let _i344 = 0; _i344 < _size342; ++_i344) {
            let elem345 = null;
            elem345 = new ttypes.PaidCallCurrencyExchangeRate();
            elem345.read(input);
            this.currencyExchangeRates.push(elem345);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.recommendedCountryCodes = [];
          const _rtmp3347 = input.readListBegin();
          const _size346 = _rtmp3347.size || 0;
          for (let _i348 = 0; _i348 < _size346; ++_i348) {
            let elem349 = null;
            elem349 = input.readString();
            this.recommendedCountryCodes.push(elem349);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.adCountries = [];
          const _rtmp3351 = input.readListBegin();
          const _size350 = _rtmp3351.size || 0;
          for (let _i352 = 0; _i352 < _size350; ++_i352) {
            let elem353 = null;
            elem353 = new ttypes.PaidCallAdCountry();
            elem353.read(input);
            this.adCountries.push(elem353);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaidCallMetadataResult');
    if (this.currencyExchangeRates !== null && this.currencyExchangeRates !== undefined) {
      output.writeFieldBegin('currencyExchangeRates', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.currencyExchangeRates.length);
      for (let iter354 in this.currencyExchangeRates) {
        if (this.currencyExchangeRates.hasOwnProperty(iter354)) {
          iter354 = this.currencyExchangeRates[iter354];
          iter354.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.recommendedCountryCodes !== null && this.recommendedCountryCodes !== undefined) {
      output.writeFieldBegin('recommendedCountryCodes', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.recommendedCountryCodes.length);
      for (let iter355 in this.recommendedCountryCodes) {
        if (this.recommendedCountryCodes.hasOwnProperty(iter355)) {
          iter355 = this.recommendedCountryCodes[iter355];
          output.writeString(iter355);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.adCountries !== null && this.adCountries !== undefined) {
      output.writeFieldBegin('adCountries', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.adCountries.length);
      for (let iter356 in this.adCountries) {
        if (this.adCountries.hasOwnProperty(iter356)) {
          iter356 = this.adCountries[iter356];
          iter356.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaidCallRedeemResult = module.exports.PaidCallRedeemResult = class {
  constructor(args) {
    this.eventName = null;
    this.eventAmount = null;
    if (args) {
      if (args.eventName !== undefined && args.eventName !== null) {
        this.eventName = args.eventName;
      }
      if (args.eventAmount !== undefined && args.eventAmount !== null) {
        this.eventAmount = args.eventAmount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.eventName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.eventAmount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaidCallRedeemResult');
    if (this.eventName !== null && this.eventName !== undefined) {
      output.writeFieldBegin('eventName', Thrift.Type.STRING, 1);
      output.writeString(this.eventName);
      output.writeFieldEnd();
    }
    if (this.eventAmount !== null && this.eventAmount !== undefined) {
      output.writeFieldBegin('eventAmount', Thrift.Type.I32, 2);
      output.writeI32(this.eventAmount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaidCallResponse = module.exports.PaidCallResponse = class {
  constructor(args) {
    this.host = null;
    this.dialing = null;
    this.token = null;
    this.spotItems = null;
    if (args) {
      if (args.host !== undefined && args.host !== null) {
        this.host = new ttypes.CallHost(args.host);
      }
      if (args.dialing !== undefined && args.dialing !== null) {
        this.dialing = new ttypes.PaidCallDialing(args.dialing);
      }
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.spotItems !== undefined && args.spotItems !== null) {
        this.spotItems = Thrift.copyList(args.spotItems, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.host = new ttypes.CallHost();
          this.host.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.dialing = new ttypes.PaidCallDialing();
          this.dialing.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.spotItems = [];
          const _rtmp3358 = input.readListBegin();
          const _size357 = _rtmp3358.size || 0;
          for (let _i359 = 0; _i359 < _size357; ++_i359) {
            let elem360 = null;
            elem360 = new ttypes.SpotItem();
            elem360.read(input);
            this.spotItems.push(elem360);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaidCallResponse');
    if (this.host !== null && this.host !== undefined) {
      output.writeFieldBegin('host', Thrift.Type.STRUCT, 1);
      this.host.write(output);
      output.writeFieldEnd();
    }
    if (this.dialing !== null && this.dialing !== undefined) {
      output.writeFieldBegin('dialing', Thrift.Type.STRUCT, 2);
      this.dialing.write(output);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 3);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.spotItems !== null && this.spotItems !== undefined) {
      output.writeFieldBegin('spotItems', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.spotItems.length);
      for (let iter361 in this.spotItems) {
        if (this.spotItems.hasOwnProperty(iter361)) {
          iter361 = this.spotItems[iter361];
          iter361.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaidCallUserRate = module.exports.PaidCallUserRate = class {
  constructor(args) {
    this.countryCode = null;
    this.rate = null;
    this.rateDivision = null;
    this.rateName = null;
    if (args) {
      if (args.countryCode !== undefined && args.countryCode !== null) {
        this.countryCode = args.countryCode;
      }
      if (args.rate !== undefined && args.rate !== null) {
        this.rate = args.rate;
      }
      if (args.rateDivision !== undefined && args.rateDivision !== null) {
        this.rateDivision = args.rateDivision;
      }
      if (args.rateName !== undefined && args.rateName !== null) {
        this.rateName = args.rateName;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.countryCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.rate = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.rateDivision = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.rateName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaidCallUserRate');
    if (this.countryCode !== null && this.countryCode !== undefined) {
      output.writeFieldBegin('countryCode', Thrift.Type.STRING, 1);
      output.writeString(this.countryCode);
      output.writeFieldEnd();
    }
    if (this.rate !== null && this.rate !== undefined) {
      output.writeFieldBegin('rate', Thrift.Type.I32, 2);
      output.writeI32(this.rate);
      output.writeFieldEnd();
    }
    if (this.rateDivision !== null && this.rateDivision !== undefined) {
      output.writeFieldBegin('rateDivision', Thrift.Type.STRING, 3);
      output.writeString(this.rateDivision);
      output.writeFieldEnd();
    }
    if (this.rateName !== null && this.rateName !== undefined) {
      output.writeFieldBegin('rateName', Thrift.Type.STRING, 4);
      output.writeString(this.rateName);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaymentReservation = module.exports.PaymentReservation = class {
  constructor(args) {
    this.receiverMid = null;
    this.productId = null;
    this.language = null;
    this.location = null;
    this.currency = null;
    this.price = null;
    this.appStoreCode = null;
    this.messageText = null;
    this.messageTemplate = null;
    this.packageId = null;
    if (args) {
      if (args.receiverMid !== undefined && args.receiverMid !== null) {
        this.receiverMid = args.receiverMid;
      }
      if (args.productId !== undefined && args.productId !== null) {
        this.productId = args.productId;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.location !== undefined && args.location !== null) {
        this.location = args.location;
      }
      if (args.currency !== undefined && args.currency !== null) {
        this.currency = args.currency;
      }
      if (args.price !== undefined && args.price !== null) {
        this.price = args.price;
      }
      if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
        this.appStoreCode = args.appStoreCode;
      }
      if (args.messageText !== undefined && args.messageText !== null) {
        this.messageText = args.messageText;
      }
      if (args.messageTemplate !== undefined && args.messageTemplate !== null) {
        this.messageTemplate = args.messageTemplate;
      }
      if (args.packageId !== undefined && args.packageId !== null) {
        this.packageId = args.packageId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.receiverMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.productId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.location = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.currency = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.price = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.appStoreCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.messageText = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I32) {
          this.messageTemplate = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I64) {
          this.packageId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaymentReservation');
    if (this.receiverMid !== null && this.receiverMid !== undefined) {
      output.writeFieldBegin('receiverMid', Thrift.Type.STRING, 1);
      output.writeString(this.receiverMid);
      output.writeFieldEnd();
    }
    if (this.productId !== null && this.productId !== undefined) {
      output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
      output.writeString(this.productId);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.location !== null && this.location !== undefined) {
      output.writeFieldBegin('location', Thrift.Type.STRING, 4);
      output.writeString(this.location);
      output.writeFieldEnd();
    }
    if (this.currency !== null && this.currency !== undefined) {
      output.writeFieldBegin('currency', Thrift.Type.STRING, 5);
      output.writeString(this.currency);
      output.writeFieldEnd();
    }
    if (this.price !== null && this.price !== undefined) {
      output.writeFieldBegin('price', Thrift.Type.STRING, 6);
      output.writeString(this.price);
      output.writeFieldEnd();
    }
    if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
      output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 7);
      output.writeI32(this.appStoreCode);
      output.writeFieldEnd();
    }
    if (this.messageText !== null && this.messageText !== undefined) {
      output.writeFieldBegin('messageText', Thrift.Type.STRING, 8);
      output.writeString(this.messageText);
      output.writeFieldEnd();
    }
    if (this.messageTemplate !== null && this.messageTemplate !== undefined) {
      output.writeFieldBegin('messageTemplate', Thrift.Type.I32, 9);
      output.writeI32(this.messageTemplate);
      output.writeFieldEnd();
    }
    if (this.packageId !== null && this.packageId !== undefined) {
      output.writeFieldBegin('packageId', Thrift.Type.I64, 10);
      output.writeI64(this.packageId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PaymentReservationResult = module.exports.PaymentReservationResult = class {
  constructor(args) {
    this.orderId = null;
    this.confirmUrl = null;
    this.extras = null;
    if (args) {
      if (args.orderId !== undefined && args.orderId !== null) {
        this.orderId = args.orderId;
      }
      if (args.confirmUrl !== undefined && args.confirmUrl !== null) {
        this.confirmUrl = args.confirmUrl;
      }
      if (args.extras !== undefined && args.extras !== null) {
        this.extras = Thrift.copyMap(args.extras, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.orderId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.confirmUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.MAP) {
          this.extras = {};
          const _rtmp3363 = input.readMapBegin();
          const _size362 = _rtmp3363.size || 0;
          for (let _i364 = 0; _i364 < _size362; ++_i364) {
            let key365 = null;
            let val366 = null;
            key365 = input.readString();
            val366 = input.readString();
            this.extras[key365] = val366;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PaymentReservationResult');
    if (this.orderId !== null && this.orderId !== undefined) {
      output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
      output.writeString(this.orderId);
      output.writeFieldEnd();
    }
    if (this.confirmUrl !== null && this.confirmUrl !== undefined) {
      output.writeFieldBegin('confirmUrl', Thrift.Type.STRING, 2);
      output.writeString(this.confirmUrl);
      output.writeFieldEnd();
    }
    if (this.extras !== null && this.extras !== undefined) {
      output.writeFieldBegin('extras', Thrift.Type.MAP, 3);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extras));
      for (let kiter367 in this.extras) {
        if (this.extras.hasOwnProperty(kiter367)) {
          let viter368 = this.extras[kiter367];
          output.writeString(kiter367);
          output.writeString(viter368);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PhoneInfoForChannel = module.exports.PhoneInfoForChannel = class {
  constructor(args) {
    this.mid = null;
    this.normalizedPhoneNumber = null;
    this.allowedToSearchByPhoneNumber = null;
    this.allowedToReceiveMessageFromNonFriend = null;
    this.region = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.normalizedPhoneNumber !== undefined && args.normalizedPhoneNumber !== null) {
        this.normalizedPhoneNumber = args.normalizedPhoneNumber;
      }
      if (args.allowedToSearchByPhoneNumber !== undefined && args.allowedToSearchByPhoneNumber !== null) {
        this.allowedToSearchByPhoneNumber = args.allowedToSearchByPhoneNumber;
      }
      if (args.allowedToReceiveMessageFromNonFriend !== undefined && args.allowedToReceiveMessageFromNonFriend !== null) {
        this.allowedToReceiveMessageFromNonFriend = args.allowedToReceiveMessageFromNonFriend;
      }
      if (args.region !== undefined && args.region !== null) {
        this.region = args.region;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.normalizedPhoneNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.allowedToSearchByPhoneNumber = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.allowedToReceiveMessageFromNonFriend = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.region = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PhoneInfoForChannel');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.normalizedPhoneNumber !== null && this.normalizedPhoneNumber !== undefined) {
      output.writeFieldBegin('normalizedPhoneNumber', Thrift.Type.STRING, 2);
      output.writeString(this.normalizedPhoneNumber);
      output.writeFieldEnd();
    }
    if (this.allowedToSearchByPhoneNumber !== null && this.allowedToSearchByPhoneNumber !== undefined) {
      output.writeFieldBegin('allowedToSearchByPhoneNumber', Thrift.Type.BOOL, 3);
      output.writeBool(this.allowedToSearchByPhoneNumber);
      output.writeFieldEnd();
    }
    if (this.allowedToReceiveMessageFromNonFriend !== null && this.allowedToReceiveMessageFromNonFriend !== undefined) {
      output.writeFieldBegin('allowedToReceiveMessageFromNonFriend', Thrift.Type.BOOL, 4);
      output.writeBool(this.allowedToReceiveMessageFromNonFriend);
      output.writeFieldEnd();
    }
    if (this.region !== null && this.region !== undefined) {
      output.writeFieldBegin('region', Thrift.Type.STRING, 5);
      output.writeString(this.region);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PhoneVerificationResult = module.exports.PhoneVerificationResult = class {
  constructor(args) {
    this.verificationResult = null;
    this.accountMigrationCheckType = null;
    this.recommendAddFriends = null;
    if (args) {
      if (args.verificationResult !== undefined && args.verificationResult !== null) {
        this.verificationResult = args.verificationResult;
      }
      if (args.accountMigrationCheckType !== undefined && args.accountMigrationCheckType !== null) {
        this.accountMigrationCheckType = args.accountMigrationCheckType;
      }
      if (args.recommendAddFriends !== undefined && args.recommendAddFriends !== null) {
        this.recommendAddFriends = args.recommendAddFriends;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.verificationResult = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.accountMigrationCheckType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.recommendAddFriends = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PhoneVerificationResult');
    if (this.verificationResult !== null && this.verificationResult !== undefined) {
      output.writeFieldBegin('verificationResult', Thrift.Type.I32, 1);
      output.writeI32(this.verificationResult);
      output.writeFieldEnd();
    }
    if (this.accountMigrationCheckType !== null && this.accountMigrationCheckType !== undefined) {
      output.writeFieldBegin('accountMigrationCheckType', Thrift.Type.I32, 2);
      output.writeI32(this.accountMigrationCheckType);
      output.writeFieldEnd();
    }
    if (this.recommendAddFriends !== null && this.recommendAddFriends !== undefined) {
      output.writeFieldBegin('recommendAddFriends', Thrift.Type.BOOL, 3);
      output.writeBool(this.recommendAddFriends);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PlaceSearchInfo = module.exports.PlaceSearchInfo = class {
  constructor(args) {
    this.name = null;
    this.address = null;
    this.latitude = null;
    this.longitude = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.address !== undefined && args.address !== null) {
        this.address = args.address;
      }
      if (args.latitude !== undefined && args.latitude !== null) {
        this.latitude = args.latitude;
      }
      if (args.longitude !== undefined && args.longitude !== null) {
        this.longitude = args.longitude;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.address = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.DOUBLE) {
          this.latitude = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.DOUBLE) {
          this.longitude = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PlaceSearchInfo');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.address !== null && this.address !== undefined) {
      output.writeFieldBegin('address', Thrift.Type.STRING, 2);
      output.writeString(this.address);
      output.writeFieldEnd();
    }
    if (this.latitude !== null && this.latitude !== undefined) {
      output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
      output.writeDouble(this.latitude);
      output.writeFieldEnd();
    }
    if (this.longitude !== null && this.longitude !== undefined) {
      output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
      output.writeDouble(this.longitude);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PointException = module.exports.PointException = class extends Thrift.TException {
  constructor(args) {
    super(args);
    this.name = "PointException";
    this.code = null;
    this.reason = null;
    this.extra = null;
    if (args) {
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.reason !== undefined && args.reason !== null) {
        this.reason = args.reason;
      }
      if (args.extra !== undefined && args.extra !== null) {
        this.extra = Thrift.copyMap(args.extra, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.code = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.reason = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.MAP) {
          this.extra = {};
          const _rtmp3370 = input.readMapBegin();
          const _size369 = _rtmp3370.size || 0;
          for (let _i371 = 0; _i371 < _size369; ++_i371) {
            let key372 = null;
            let val373 = null;
            key372 = input.readString();
            val373 = input.readString();
            this.extra[key372] = val373;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PointException');
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.I32, 1);
      output.writeI32(this.code);
      output.writeFieldEnd();
    }
    if (this.reason !== null && this.reason !== undefined) {
      output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
      output.writeString(this.reason);
      output.writeFieldEnd();
    }
    if (this.extra !== null && this.extra !== undefined) {
      output.writeFieldBegin('extra', Thrift.Type.MAP, 3);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extra));
      for (let kiter374 in this.extra) {
        if (this.extra.hasOwnProperty(kiter374)) {
          let viter375 = this.extra[kiter374];
          output.writeString(kiter374);
          output.writeString(viter375);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PrivateBotMessage = module.exports.PrivateBotMessage = class {
  constructor(args) {
    this.message = null;
    this.linkFrom = null;
    if (args) {
      if (args.message !== undefined && args.message !== null) {
        this.message = new ttypes.Message(args.message);
      }
      if (args.linkFrom !== undefined && args.linkFrom !== null) {
        this.linkFrom = args.linkFrom;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.message = new ttypes.Message();
          this.message.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.linkFrom = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PrivateBotMessage');
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
      this.message.write(output);
      output.writeFieldEnd();
    }
    if (this.linkFrom !== null && this.linkFrom !== undefined) {
      output.writeFieldBegin('linkFrom', Thrift.Type.STRING, 2);
      output.writeString(this.linkFrom);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Product = module.exports.Product = class {
  constructor(args) {
    this.productId = null;
    this.packageId = null;
    this.version = null;
    this.authorName = null;
    this.onSale = null;
    this.validDays = null;
    this.saleType = null;
    this.copyright = null;
    this.title = null;
    this.descriptionText = null;
    this.shopOrderId = null;
    this.fromMid = null;
    this.toMid = null;
    this.validUntil = null;
    this.priceTier = null;
    this.price = null;
    this.currency = null;
    this.currencySymbol = null;
    this.paymentType = null;
    this.createDate = null;
    this.ownFlag = null;
    this.eventType = null;
    this.urlSchema = null;
    this.downloadUrl = null;
    this.buddyMid = null;
    this.publishSince = null;
    this.newFlag = null;
    this.missionFlag = null;
    this.categories = null;
    this.missionButtonText = null;
    this.missionShortDescription = null;
    this.authorId = null;
    this.grantedByDefault = null;
    this.displayOrder = null;
    this.availableForPresent = null;
    this.availableForMyself = null;
    this.hasAnimation = null;
    this.hasSound = null;
    this.recommendationsEnabled = null;
    this.stickerResourceType = null;
    if (args) {
      if (args.productId !== undefined && args.productId !== null) {
        this.productId = args.productId;
      }
      if (args.packageId !== undefined && args.packageId !== null) {
        this.packageId = args.packageId;
      }
      if (args.version !== undefined && args.version !== null) {
        this.version = args.version;
      }
      if (args.authorName !== undefined && args.authorName !== null) {
        this.authorName = args.authorName;
      }
      if (args.onSale !== undefined && args.onSale !== null) {
        this.onSale = args.onSale;
      }
      if (args.validDays !== undefined && args.validDays !== null) {
        this.validDays = args.validDays;
      }
      if (args.saleType !== undefined && args.saleType !== null) {
        this.saleType = args.saleType;
      }
      if (args.copyright !== undefined && args.copyright !== null) {
        this.copyright = args.copyright;
      }
      if (args.title !== undefined && args.title !== null) {
        this.title = args.title;
      }
      if (args.descriptionText !== undefined && args.descriptionText !== null) {
        this.descriptionText = args.descriptionText;
      }
      if (args.shopOrderId !== undefined && args.shopOrderId !== null) {
        this.shopOrderId = args.shopOrderId;
      }
      if (args.fromMid !== undefined && args.fromMid !== null) {
        this.fromMid = args.fromMid;
      }
      if (args.toMid !== undefined && args.toMid !== null) {
        this.toMid = args.toMid;
      }
      if (args.validUntil !== undefined && args.validUntil !== null) {
        this.validUntil = args.validUntil;
      }
      if (args.priceTier !== undefined && args.priceTier !== null) {
        this.priceTier = args.priceTier;
      }
      if (args.price !== undefined && args.price !== null) {
        this.price = args.price;
      }
      if (args.currency !== undefined && args.currency !== null) {
        this.currency = args.currency;
      }
      if (args.currencySymbol !== undefined && args.currencySymbol !== null) {
        this.currencySymbol = args.currencySymbol;
      }
      if (args.paymentType !== undefined && args.paymentType !== null) {
        this.paymentType = args.paymentType;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.ownFlag !== undefined && args.ownFlag !== null) {
        this.ownFlag = args.ownFlag;
      }
      if (args.eventType !== undefined && args.eventType !== null) {
        this.eventType = args.eventType;
      }
      if (args.urlSchema !== undefined && args.urlSchema !== null) {
        this.urlSchema = args.urlSchema;
      }
      if (args.downloadUrl !== undefined && args.downloadUrl !== null) {
        this.downloadUrl = args.downloadUrl;
      }
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.publishSince !== undefined && args.publishSince !== null) {
        this.publishSince = args.publishSince;
      }
      if (args.newFlag !== undefined && args.newFlag !== null) {
        this.newFlag = args.newFlag;
      }
      if (args.missionFlag !== undefined && args.missionFlag !== null) {
        this.missionFlag = args.missionFlag;
      }
      if (args.categories !== undefined && args.categories !== null) {
        this.categories = Thrift.copyList(args.categories, [null]);
      }
      if (args.missionButtonText !== undefined && args.missionButtonText !== null) {
        this.missionButtonText = args.missionButtonText;
      }
      if (args.missionShortDescription !== undefined && args.missionShortDescription !== null) {
        this.missionShortDescription = args.missionShortDescription;
      }
      if (args.authorId !== undefined && args.authorId !== null) {
        this.authorId = args.authorId;
      }
      if (args.grantedByDefault !== undefined && args.grantedByDefault !== null) {
        this.grantedByDefault = args.grantedByDefault;
      }
      if (args.displayOrder !== undefined && args.displayOrder !== null) {
        this.displayOrder = args.displayOrder;
      }
      if (args.availableForPresent !== undefined && args.availableForPresent !== null) {
        this.availableForPresent = args.availableForPresent;
      }
      if (args.availableForMyself !== undefined && args.availableForMyself !== null) {
        this.availableForMyself = args.availableForMyself;
      }
      if (args.hasAnimation !== undefined && args.hasAnimation !== null) {
        this.hasAnimation = args.hasAnimation;
      }
      if (args.hasSound !== undefined && args.hasSound !== null) {
        this.hasSound = args.hasSound;
      }
      if (args.recommendationsEnabled !== undefined && args.recommendationsEnabled !== null) {
        this.recommendationsEnabled = args.recommendationsEnabled;
      }
      if (args.stickerResourceType !== undefined && args.stickerResourceType !== null) {
        this.stickerResourceType = args.stickerResourceType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.productId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.packageId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.version = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.authorName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.onSale = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.validDays = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.saleType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.copyright = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.title = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.descriptionText = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.shopOrderId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.fromMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRING) {
          this.toMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I64) {
          this.validUntil = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.I32) {
          this.priceTier = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.STRING) {
          this.price = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.STRING) {
          this.currency = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.STRING) {
          this.currencySymbol = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.I32) {
          this.paymentType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.BOOL) {
          this.ownFlag = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.I32) {
          this.eventType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.STRING) {
          this.urlSchema = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.STRING) {
          this.downloadUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.I64) {
          this.publishSince = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.BOOL) {
          this.newFlag = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 28:
        if (ftype == Thrift.Type.BOOL) {
          this.missionFlag = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 29:
        if (ftype == Thrift.Type.LIST) {
          this.categories = [];
          const _rtmp3377 = input.readListBegin();
          const _size376 = _rtmp3377.size || 0;
          for (let _i378 = 0; _i378 < _size376; ++_i378) {
            let elem379 = null;
            elem379 = new ttypes.ProductCategory();
            elem379.read(input);
            this.categories.push(elem379);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 30:
        if (ftype == Thrift.Type.STRING) {
          this.missionButtonText = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.STRING) {
          this.missionShortDescription = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.STRING) {
          this.authorId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 41:
        if (ftype == Thrift.Type.BOOL) {
          this.grantedByDefault = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 42:
        if (ftype == Thrift.Type.I32) {
          this.displayOrder = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 43:
        if (ftype == Thrift.Type.BOOL) {
          this.availableForPresent = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 44:
        if (ftype == Thrift.Type.BOOL) {
          this.availableForMyself = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 51:
        if (ftype == Thrift.Type.BOOL) {
          this.hasAnimation = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 52:
        if (ftype == Thrift.Type.BOOL) {
          this.hasSound = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 53:
        if (ftype == Thrift.Type.BOOL) {
          this.recommendationsEnabled = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 54:
        if (ftype == Thrift.Type.I32) {
          this.stickerResourceType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Product');
    if (this.productId !== null && this.productId !== undefined) {
      output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
      output.writeString(this.productId);
      output.writeFieldEnd();
    }
    if (this.packageId !== null && this.packageId !== undefined) {
      output.writeFieldBegin('packageId', Thrift.Type.I64, 2);
      output.writeI64(this.packageId);
      output.writeFieldEnd();
    }
    if (this.version !== null && this.version !== undefined) {
      output.writeFieldBegin('version', Thrift.Type.I32, 3);
      output.writeI32(this.version);
      output.writeFieldEnd();
    }
    if (this.authorName !== null && this.authorName !== undefined) {
      output.writeFieldBegin('authorName', Thrift.Type.STRING, 4);
      output.writeString(this.authorName);
      output.writeFieldEnd();
    }
    if (this.onSale !== null && this.onSale !== undefined) {
      output.writeFieldBegin('onSale', Thrift.Type.BOOL, 5);
      output.writeBool(this.onSale);
      output.writeFieldEnd();
    }
    if (this.validDays !== null && this.validDays !== undefined) {
      output.writeFieldBegin('validDays', Thrift.Type.I32, 6);
      output.writeI32(this.validDays);
      output.writeFieldEnd();
    }
    if (this.saleType !== null && this.saleType !== undefined) {
      output.writeFieldBegin('saleType', Thrift.Type.I32, 7);
      output.writeI32(this.saleType);
      output.writeFieldEnd();
    }
    if (this.copyright !== null && this.copyright !== undefined) {
      output.writeFieldBegin('copyright', Thrift.Type.STRING, 8);
      output.writeString(this.copyright);
      output.writeFieldEnd();
    }
    if (this.title !== null && this.title !== undefined) {
      output.writeFieldBegin('title', Thrift.Type.STRING, 9);
      output.writeString(this.title);
      output.writeFieldEnd();
    }
    if (this.descriptionText !== null && this.descriptionText !== undefined) {
      output.writeFieldBegin('descriptionText', Thrift.Type.STRING, 10);
      output.writeString(this.descriptionText);
      output.writeFieldEnd();
    }
    if (this.shopOrderId !== null && this.shopOrderId !== undefined) {
      output.writeFieldBegin('shopOrderId', Thrift.Type.I64, 11);
      output.writeI64(this.shopOrderId);
      output.writeFieldEnd();
    }
    if (this.fromMid !== null && this.fromMid !== undefined) {
      output.writeFieldBegin('fromMid', Thrift.Type.STRING, 12);
      output.writeString(this.fromMid);
      output.writeFieldEnd();
    }
    if (this.toMid !== null && this.toMid !== undefined) {
      output.writeFieldBegin('toMid', Thrift.Type.STRING, 13);
      output.writeString(this.toMid);
      output.writeFieldEnd();
    }
    if (this.validUntil !== null && this.validUntil !== undefined) {
      output.writeFieldBegin('validUntil', Thrift.Type.I64, 14);
      output.writeI64(this.validUntil);
      output.writeFieldEnd();
    }
    if (this.priceTier !== null && this.priceTier !== undefined) {
      output.writeFieldBegin('priceTier', Thrift.Type.I32, 15);
      output.writeI32(this.priceTier);
      output.writeFieldEnd();
    }
    if (this.price !== null && this.price !== undefined) {
      output.writeFieldBegin('price', Thrift.Type.STRING, 16);
      output.writeString(this.price);
      output.writeFieldEnd();
    }
    if (this.currency !== null && this.currency !== undefined) {
      output.writeFieldBegin('currency', Thrift.Type.STRING, 17);
      output.writeString(this.currency);
      output.writeFieldEnd();
    }
    if (this.currencySymbol !== null && this.currencySymbol !== undefined) {
      output.writeFieldBegin('currencySymbol', Thrift.Type.STRING, 18);
      output.writeString(this.currencySymbol);
      output.writeFieldEnd();
    }
    if (this.paymentType !== null && this.paymentType !== undefined) {
      output.writeFieldBegin('paymentType', Thrift.Type.I32, 19);
      output.writeI32(this.paymentType);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 20);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.ownFlag !== null && this.ownFlag !== undefined) {
      output.writeFieldBegin('ownFlag', Thrift.Type.BOOL, 21);
      output.writeBool(this.ownFlag);
      output.writeFieldEnd();
    }
    if (this.eventType !== null && this.eventType !== undefined) {
      output.writeFieldBegin('eventType', Thrift.Type.I32, 22);
      output.writeI32(this.eventType);
      output.writeFieldEnd();
    }
    if (this.urlSchema !== null && this.urlSchema !== undefined) {
      output.writeFieldBegin('urlSchema', Thrift.Type.STRING, 23);
      output.writeString(this.urlSchema);
      output.writeFieldEnd();
    }
    if (this.downloadUrl !== null && this.downloadUrl !== undefined) {
      output.writeFieldBegin('downloadUrl', Thrift.Type.STRING, 24);
      output.writeString(this.downloadUrl);
      output.writeFieldEnd();
    }
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 25);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.publishSince !== null && this.publishSince !== undefined) {
      output.writeFieldBegin('publishSince', Thrift.Type.I64, 26);
      output.writeI64(this.publishSince);
      output.writeFieldEnd();
    }
    if (this.newFlag !== null && this.newFlag !== undefined) {
      output.writeFieldBegin('newFlag', Thrift.Type.BOOL, 27);
      output.writeBool(this.newFlag);
      output.writeFieldEnd();
    }
    if (this.missionFlag !== null && this.missionFlag !== undefined) {
      output.writeFieldBegin('missionFlag', Thrift.Type.BOOL, 28);
      output.writeBool(this.missionFlag);
      output.writeFieldEnd();
    }
    if (this.categories !== null && this.categories !== undefined) {
      output.writeFieldBegin('categories', Thrift.Type.LIST, 29);
      output.writeListBegin(Thrift.Type.STRUCT, this.categories.length);
      for (let iter380 in this.categories) {
        if (this.categories.hasOwnProperty(iter380)) {
          iter380 = this.categories[iter380];
          iter380.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.missionButtonText !== null && this.missionButtonText !== undefined) {
      output.writeFieldBegin('missionButtonText', Thrift.Type.STRING, 30);
      output.writeString(this.missionButtonText);
      output.writeFieldEnd();
    }
    if (this.missionShortDescription !== null && this.missionShortDescription !== undefined) {
      output.writeFieldBegin('missionShortDescription', Thrift.Type.STRING, 31);
      output.writeString(this.missionShortDescription);
      output.writeFieldEnd();
    }
    if (this.authorId !== null && this.authorId !== undefined) {
      output.writeFieldBegin('authorId', Thrift.Type.STRING, 32);
      output.writeString(this.authorId);
      output.writeFieldEnd();
    }
    if (this.grantedByDefault !== null && this.grantedByDefault !== undefined) {
      output.writeFieldBegin('grantedByDefault', Thrift.Type.BOOL, 41);
      output.writeBool(this.grantedByDefault);
      output.writeFieldEnd();
    }
    if (this.displayOrder !== null && this.displayOrder !== undefined) {
      output.writeFieldBegin('displayOrder', Thrift.Type.I32, 42);
      output.writeI32(this.displayOrder);
      output.writeFieldEnd();
    }
    if (this.availableForPresent !== null && this.availableForPresent !== undefined) {
      output.writeFieldBegin('availableForPresent', Thrift.Type.BOOL, 43);
      output.writeBool(this.availableForPresent);
      output.writeFieldEnd();
    }
    if (this.availableForMyself !== null && this.availableForMyself !== undefined) {
      output.writeFieldBegin('availableForMyself', Thrift.Type.BOOL, 44);
      output.writeBool(this.availableForMyself);
      output.writeFieldEnd();
    }
    if (this.hasAnimation !== null && this.hasAnimation !== undefined) {
      output.writeFieldBegin('hasAnimation', Thrift.Type.BOOL, 51);
      output.writeBool(this.hasAnimation);
      output.writeFieldEnd();
    }
    if (this.hasSound !== null && this.hasSound !== undefined) {
      output.writeFieldBegin('hasSound', Thrift.Type.BOOL, 52);
      output.writeBool(this.hasSound);
      output.writeFieldEnd();
    }
    if (this.recommendationsEnabled !== null && this.recommendationsEnabled !== undefined) {
      output.writeFieldBegin('recommendationsEnabled', Thrift.Type.BOOL, 53);
      output.writeBool(this.recommendationsEnabled);
      output.writeFieldEnd();
    }
    if (this.stickerResourceType !== null && this.stickerResourceType !== undefined) {
      output.writeFieldBegin('stickerResourceType', Thrift.Type.I32, 54);
      output.writeI32(this.stickerResourceType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ProductCategory = module.exports.ProductCategory = class {
  constructor(args) {
    this.productCategoryId = null;
    this.title = null;
    this.productCount = null;
    this.newFlag = null;
    if (args) {
      if (args.productCategoryId !== undefined && args.productCategoryId !== null) {
        this.productCategoryId = args.productCategoryId;
      }
      if (args.title !== undefined && args.title !== null) {
        this.title = args.title;
      }
      if (args.productCount !== undefined && args.productCount !== null) {
        this.productCount = args.productCount;
      }
      if (args.newFlag !== undefined && args.newFlag !== null) {
        this.newFlag = args.newFlag;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.productCategoryId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.title = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.productCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.newFlag = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ProductCategory');
    if (this.productCategoryId !== null && this.productCategoryId !== undefined) {
      output.writeFieldBegin('productCategoryId', Thrift.Type.I64, 1);
      output.writeI64(this.productCategoryId);
      output.writeFieldEnd();
    }
    if (this.title !== null && this.title !== undefined) {
      output.writeFieldBegin('title', Thrift.Type.STRING, 2);
      output.writeString(this.title);
      output.writeFieldEnd();
    }
    if (this.productCount !== null && this.productCount !== undefined) {
      output.writeFieldBegin('productCount', Thrift.Type.I32, 3);
      output.writeI32(this.productCount);
      output.writeFieldEnd();
    }
    if (this.newFlag !== null && this.newFlag !== undefined) {
      output.writeFieldBegin('newFlag', Thrift.Type.BOOL, 4);
      output.writeBool(this.newFlag);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ProductList = module.exports.ProductList = class {
  constructor(args) {
    this.hasNext = null;
    this.bannerSequence = null;
    this.bannerTargetType = null;
    this.bannerTargetPath = null;
    this.productList = null;
    this.bannerLang = null;
    if (args) {
      if (args.hasNext !== undefined && args.hasNext !== null) {
        this.hasNext = args.hasNext;
      }
      if (args.bannerSequence !== undefined && args.bannerSequence !== null) {
        this.bannerSequence = args.bannerSequence;
      }
      if (args.bannerTargetType !== undefined && args.bannerTargetType !== null) {
        this.bannerTargetType = args.bannerTargetType;
      }
      if (args.bannerTargetPath !== undefined && args.bannerTargetPath !== null) {
        this.bannerTargetPath = args.bannerTargetPath;
      }
      if (args.productList !== undefined && args.productList !== null) {
        this.productList = Thrift.copyList(args.productList, [ttypes.Product]);
      }
      if (args.bannerLang !== undefined && args.bannerLang !== null) {
        this.bannerLang = args.bannerLang;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.hasNext = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.bannerSequence = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.bannerTargetType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.bannerTargetPath = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.LIST) {
          this.productList = [];
          const _rtmp3382 = input.readListBegin();
          const _size381 = _rtmp3382.size || 0;
          for (let _i383 = 0; _i383 < _size381; ++_i383) {
            let elem384 = null;
            elem384 = new ttypes.Product();
            elem384.read(input);
            this.productList.push(elem384);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.bannerLang = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ProductList');
    if (this.hasNext !== null && this.hasNext !== undefined) {
      output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 1);
      output.writeBool(this.hasNext);
      output.writeFieldEnd();
    }
    if (this.bannerSequence !== null && this.bannerSequence !== undefined) {
      output.writeFieldBegin('bannerSequence', Thrift.Type.I64, 4);
      output.writeI64(this.bannerSequence);
      output.writeFieldEnd();
    }
    if (this.bannerTargetType !== null && this.bannerTargetType !== undefined) {
      output.writeFieldBegin('bannerTargetType', Thrift.Type.I32, 5);
      output.writeI32(this.bannerTargetType);
      output.writeFieldEnd();
    }
    if (this.bannerTargetPath !== null && this.bannerTargetPath !== undefined) {
      output.writeFieldBegin('bannerTargetPath', Thrift.Type.STRING, 6);
      output.writeString(this.bannerTargetPath);
      output.writeFieldEnd();
    }
    if (this.productList !== null && this.productList !== undefined) {
      output.writeFieldBegin('productList', Thrift.Type.LIST, 7);
      output.writeListBegin(Thrift.Type.STRUCT, this.productList.length);
      for (let iter385 in this.productList) {
        if (this.productList.hasOwnProperty(iter385)) {
          iter385 = this.productList[iter385];
          iter385.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.bannerLang !== null && this.bannerLang !== undefined) {
      output.writeFieldBegin('bannerLang', Thrift.Type.STRING, 8);
      output.writeString(this.bannerLang);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ProductSimple = module.exports.ProductSimple = class {
  constructor(args) {
    this.productId = null;
    this.packageId = null;
    this.version = null;
    this.onSale = null;
    this.validUntil = null;
    this.stickerIdRanges = null;
    this.grantedByDefault = null;
    this.displayOrder = null;
    if (args) {
      if (args.productId !== undefined && args.productId !== null) {
        this.productId = args.productId;
      }
      if (args.packageId !== undefined && args.packageId !== null) {
        this.packageId = args.packageId;
      }
      if (args.version !== undefined && args.version !== null) {
        this.version = args.version;
      }
      if (args.onSale !== undefined && args.onSale !== null) {
        this.onSale = args.onSale;
      }
      if (args.validUntil !== undefined && args.validUntil !== null) {
        this.validUntil = args.validUntil;
      }
      if (args.stickerIdRanges !== undefined && args.stickerIdRanges !== null) {
        this.stickerIdRanges = Thrift.copyList(args.stickerIdRanges, [null]);
      }
      if (args.grantedByDefault !== undefined && args.grantedByDefault !== null) {
        this.grantedByDefault = args.grantedByDefault;
      }
      if (args.displayOrder !== undefined && args.displayOrder !== null) {
        this.displayOrder = args.displayOrder;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.productId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.packageId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.version = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.onSale = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.validUntil = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.LIST) {
          this.stickerIdRanges = [];
          const _rtmp3387 = input.readListBegin();
          const _size386 = _rtmp3387.size || 0;
          for (let _i388 = 0; _i388 < _size386; ++_i388) {
            let elem389 = null;
            elem389 = new ttypes.StickerIdRange();
            elem389.read(input);
            this.stickerIdRanges.push(elem389);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 41:
        if (ftype == Thrift.Type.BOOL) {
          this.grantedByDefault = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 42:
        if (ftype == Thrift.Type.I32) {
          this.displayOrder = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ProductSimple');
    if (this.productId !== null && this.productId !== undefined) {
      output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
      output.writeString(this.productId);
      output.writeFieldEnd();
    }
    if (this.packageId !== null && this.packageId !== undefined) {
      output.writeFieldBegin('packageId', Thrift.Type.I64, 2);
      output.writeI64(this.packageId);
      output.writeFieldEnd();
    }
    if (this.version !== null && this.version !== undefined) {
      output.writeFieldBegin('version', Thrift.Type.I32, 3);
      output.writeI32(this.version);
      output.writeFieldEnd();
    }
    if (this.onSale !== null && this.onSale !== undefined) {
      output.writeFieldBegin('onSale', Thrift.Type.BOOL, 4);
      output.writeBool(this.onSale);
      output.writeFieldEnd();
    }
    if (this.validUntil !== null && this.validUntil !== undefined) {
      output.writeFieldBegin('validUntil', Thrift.Type.I64, 5);
      output.writeI64(this.validUntil);
      output.writeFieldEnd();
    }
    if (this.stickerIdRanges !== null && this.stickerIdRanges !== undefined) {
      output.writeFieldBegin('stickerIdRanges', Thrift.Type.LIST, 10);
      output.writeListBegin(Thrift.Type.STRUCT, this.stickerIdRanges.length);
      for (let iter390 in this.stickerIdRanges) {
        if (this.stickerIdRanges.hasOwnProperty(iter390)) {
          iter390 = this.stickerIdRanges[iter390];
          iter390.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.grantedByDefault !== null && this.grantedByDefault !== undefined) {
      output.writeFieldBegin('grantedByDefault', Thrift.Type.BOOL, 41);
      output.writeBool(this.grantedByDefault);
      output.writeFieldEnd();
    }
    if (this.displayOrder !== null && this.displayOrder !== undefined) {
      output.writeFieldBegin('displayOrder', Thrift.Type.I32, 42);
      output.writeI32(this.displayOrder);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ProductSimpleList = module.exports.ProductSimpleList = class {
  constructor(args) {
    this.hasNext = null;
    this.reinvokeHour = null;
    this.lastVersionSeq = null;
    this.productList = null;
    this.recentNewReleaseDate = null;
    this.recentEventReleaseDate = null;
    if (args) {
      if (args.hasNext !== undefined && args.hasNext !== null) {
        this.hasNext = args.hasNext;
      }
      if (args.reinvokeHour !== undefined && args.reinvokeHour !== null) {
        this.reinvokeHour = args.reinvokeHour;
      }
      if (args.lastVersionSeq !== undefined && args.lastVersionSeq !== null) {
        this.lastVersionSeq = args.lastVersionSeq;
      }
      if (args.productList !== undefined && args.productList !== null) {
        this.productList = Thrift.copyList(args.productList, [ttypes.ProductSimple]);
      }
      if (args.recentNewReleaseDate !== undefined && args.recentNewReleaseDate !== null) {
        this.recentNewReleaseDate = args.recentNewReleaseDate;
      }
      if (args.recentEventReleaseDate !== undefined && args.recentEventReleaseDate !== null) {
        this.recentEventReleaseDate = args.recentEventReleaseDate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.hasNext = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.reinvokeHour = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.lastVersionSeq = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.productList = [];
          const _rtmp3392 = input.readListBegin();
          const _size391 = _rtmp3392.size || 0;
          for (let _i393 = 0; _i393 < _size391; ++_i393) {
            let elem394 = null;
            elem394 = new ttypes.ProductSimple();
            elem394.read(input);
            this.productList.push(elem394);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.recentNewReleaseDate = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.recentEventReleaseDate = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ProductSimpleList');
    if (this.hasNext !== null && this.hasNext !== undefined) {
      output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 1);
      output.writeBool(this.hasNext);
      output.writeFieldEnd();
    }
    if (this.reinvokeHour !== null && this.reinvokeHour !== undefined) {
      output.writeFieldBegin('reinvokeHour', Thrift.Type.I32, 2);
      output.writeI32(this.reinvokeHour);
      output.writeFieldEnd();
    }
    if (this.lastVersionSeq !== null && this.lastVersionSeq !== undefined) {
      output.writeFieldBegin('lastVersionSeq', Thrift.Type.I64, 3);
      output.writeI64(this.lastVersionSeq);
      output.writeFieldEnd();
    }
    if (this.productList !== null && this.productList !== undefined) {
      output.writeFieldBegin('productList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.productList.length);
      for (let iter395 in this.productList) {
        if (this.productList.hasOwnProperty(iter395)) {
          iter395 = this.productList[iter395];
          iter395.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.recentNewReleaseDate !== null && this.recentNewReleaseDate !== undefined) {
      output.writeFieldBegin('recentNewReleaseDate', Thrift.Type.I64, 5);
      output.writeI64(this.recentNewReleaseDate);
      output.writeFieldEnd();
    }
    if (this.recentEventReleaseDate !== null && this.recentEventReleaseDate !== undefined) {
      output.writeFieldBegin('recentEventReleaseDate', Thrift.Type.I64, 6);
      output.writeI64(this.recentEventReleaseDate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Profile = module.exports.Profile = class {
  constructor(args) {
    this.mid = null;
    this.userid = null;
    this.phone = null;
    this.email = null;
    this.regionCode = null;
    this.displayName = null;
    this.phoneticName = null;
    this.pictureStatus = null;
    this.thumbnailUrl = null;
    this.statusMessage = null;
    this.allowSearchByUserid = null;
    this.allowSearchByEmail = null;
    this.picturePath = null;
    this.musicProfile = null;
    this.videoProfile = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.userid !== undefined && args.userid !== null) {
        this.userid = args.userid;
      }
      if (args.phone !== undefined && args.phone !== null) {
        this.phone = args.phone;
      }
      if (args.email !== undefined && args.email !== null) {
        this.email = args.email;
      }
      if (args.regionCode !== undefined && args.regionCode !== null) {
        this.regionCode = args.regionCode;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.phoneticName !== undefined && args.phoneticName !== null) {
        this.phoneticName = args.phoneticName;
      }
      if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
        this.pictureStatus = args.pictureStatus;
      }
      if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
        this.thumbnailUrl = args.thumbnailUrl;
      }
      if (args.statusMessage !== undefined && args.statusMessage !== null) {
        this.statusMessage = args.statusMessage;
      }
      if (args.allowSearchByUserid !== undefined && args.allowSearchByUserid !== null) {
        this.allowSearchByUserid = args.allowSearchByUserid;
      }
      if (args.allowSearchByEmail !== undefined && args.allowSearchByEmail !== null) {
        this.allowSearchByEmail = args.allowSearchByEmail;
      }
      if (args.picturePath !== undefined && args.picturePath !== null) {
        this.picturePath = args.picturePath;
      }
      if (args.musicProfile !== undefined && args.musicProfile !== null) {
        this.musicProfile = args.musicProfile;
      }
      if (args.videoProfile !== undefined && args.videoProfile !== null) {
        this.videoProfile = args.videoProfile;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.userid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.phone = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.email = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.regionCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRING) {
          this.phoneticName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.STRING) {
          this.pictureStatus = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.STRING) {
          this.thumbnailUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.STRING) {
          this.statusMessage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.BOOL) {
          this.allowSearchByUserid = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.BOOL) {
          this.allowSearchByEmail = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 33:
        if (ftype == Thrift.Type.STRING) {
          this.picturePath = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 34:
        if (ftype == Thrift.Type.STRING) {
          this.musicProfile = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 35:
        if (ftype == Thrift.Type.STRING) {
          this.videoProfile = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Profile');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.userid !== null && this.userid !== undefined) {
      output.writeFieldBegin('userid', Thrift.Type.STRING, 3);
      output.writeString(this.userid);
      output.writeFieldEnd();
    }
    if (this.phone !== null && this.phone !== undefined) {
      output.writeFieldBegin('phone', Thrift.Type.STRING, 10);
      output.writeString(this.phone);
      output.writeFieldEnd();
    }
    if (this.email !== null && this.email !== undefined) {
      output.writeFieldBegin('email', Thrift.Type.STRING, 11);
      output.writeString(this.email);
      output.writeFieldEnd();
    }
    if (this.regionCode !== null && this.regionCode !== undefined) {
      output.writeFieldBegin('regionCode', Thrift.Type.STRING, 12);
      output.writeString(this.regionCode);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 20);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.phoneticName !== null && this.phoneticName !== undefined) {
      output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 21);
      output.writeString(this.phoneticName);
      output.writeFieldEnd();
    }
    if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
      output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 22);
      output.writeString(this.pictureStatus);
      output.writeFieldEnd();
    }
    if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
      output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 23);
      output.writeString(this.thumbnailUrl);
      output.writeFieldEnd();
    }
    if (this.statusMessage !== null && this.statusMessage !== undefined) {
      output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 24);
      output.writeString(this.statusMessage);
      output.writeFieldEnd();
    }
    if (this.allowSearchByUserid !== null && this.allowSearchByUserid !== undefined) {
      output.writeFieldBegin('allowSearchByUserid', Thrift.Type.BOOL, 31);
      output.writeBool(this.allowSearchByUserid);
      output.writeFieldEnd();
    }
    if (this.allowSearchByEmail !== null && this.allowSearchByEmail !== undefined) {
      output.writeFieldBegin('allowSearchByEmail', Thrift.Type.BOOL, 32);
      output.writeBool(this.allowSearchByEmail);
      output.writeFieldEnd();
    }
    if (this.picturePath !== null && this.picturePath !== undefined) {
      output.writeFieldBegin('picturePath', Thrift.Type.STRING, 33);
      output.writeString(this.picturePath);
      output.writeFieldEnd();
    }
    if (this.musicProfile !== null && this.musicProfile !== undefined) {
      output.writeFieldBegin('musicProfile', Thrift.Type.STRING, 34);
      output.writeString(this.musicProfile);
      output.writeFieldEnd();
    }
    if (this.videoProfile !== null && this.videoProfile !== undefined) {
      output.writeFieldBegin('videoProfile', Thrift.Type.STRING, 35);
      output.writeString(this.videoProfile);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ProximityMatchCandidateEntry = module.exports.ProximityMatchCandidateEntry = class {
  constructor(args) {
    this.contact = null;
    this.buddyDetail = null;
    if (args) {
      if (args.contact !== undefined && args.contact !== null) {
        this.contact = new ttypes.Contact(args.contact);
      }
      if (args.buddyDetail !== undefined && args.buddyDetail !== null) {
        this.buddyDetail = new ttypes.BuddyDetail(args.buddyDetail);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.contact = new ttypes.Contact();
          this.contact.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRUCT) {
          this.buddyDetail = new ttypes.BuddyDetail();
          this.buddyDetail.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ProximityMatchCandidateEntry');
    if (this.contact !== null && this.contact !== undefined) {
      output.writeFieldBegin('contact', Thrift.Type.STRUCT, 1);
      this.contact.write(output);
      output.writeFieldEnd();
    }
    if (this.buddyDetail !== null && this.buddyDetail !== undefined) {
      output.writeFieldBegin('buddyDetail', Thrift.Type.STRUCT, 11);
      this.buddyDetail.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ProximityMatchCandidateResult = module.exports.ProximityMatchCandidateResult = class {
  constructor(args) {
    this.users = null;
    this.buddies = null;
    this.endOfResult = null;
    if (args) {
      if (args.users !== undefined && args.users !== null) {
        this.users = Thrift.copyList(args.users, [ttypes.ProximityMatchCandidateEntry]);
      }
      if (args.buddies !== undefined && args.buddies !== null) {
        this.buddies = Thrift.copyList(args.buddies, [ttypes.ProximityMatchCandidateEntry]);
      }
      if (args.endOfResult !== undefined && args.endOfResult !== null) {
        this.endOfResult = args.endOfResult;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.users = [];
          const _rtmp3397 = input.readListBegin();
          const _size396 = _rtmp3397.size || 0;
          for (let _i398 = 0; _i398 < _size396; ++_i398) {
            let elem399 = null;
            elem399 = new ttypes.ProximityMatchCandidateEntry();
            elem399.read(input);
            this.users.push(elem399);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.buddies = [];
          const _rtmp3401 = input.readListBegin();
          const _size400 = _rtmp3401.size || 0;
          for (let _i402 = 0; _i402 < _size400; ++_i402) {
            let elem403 = null;
            elem403 = new ttypes.ProximityMatchCandidateEntry();
            elem403.read(input);
            this.buddies.push(elem403);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 91:
        if (ftype == Thrift.Type.BOOL) {
          this.endOfResult = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ProximityMatchCandidateResult');
    if (this.users !== null && this.users !== undefined) {
      output.writeFieldBegin('users', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
      for (let iter404 in this.users) {
        if (this.users.hasOwnProperty(iter404)) {
          iter404 = this.users[iter404];
          iter404.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.buddies !== null && this.buddies !== undefined) {
      output.writeFieldBegin('buddies', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.buddies.length);
      for (let iter405 in this.buddies) {
        if (this.buddies.hasOwnProperty(iter405)) {
          iter405 = this.buddies[iter405];
          iter405.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.endOfResult !== null && this.endOfResult !== undefined) {
      output.writeFieldBegin('endOfResult', Thrift.Type.BOOL, 91);
      output.writeBool(this.endOfResult);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PublicKey = module.exports.PublicKey = class {
  constructor(args) {
    this.keyAlgorithm = null;
    this.keySize = null;
    this.keyData = null;
    this.createdTime = null;
    if (args) {
      if (args.keyAlgorithm !== undefined && args.keyAlgorithm !== null) {
        this.keyAlgorithm = args.keyAlgorithm;
      }
      if (args.keySize !== undefined && args.keySize !== null) {
        this.keySize = args.keySize;
      }
      if (args.keyData !== undefined && args.keyData !== null) {
        this.keyData = args.keyData;
      }
      if (args.createdTime !== undefined && args.createdTime !== null) {
        this.createdTime = args.createdTime;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.keyAlgorithm = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.keySize = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.keyData = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.createdTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PublicKey');
    if (this.keyAlgorithm !== null && this.keyAlgorithm !== undefined) {
      output.writeFieldBegin('keyAlgorithm', Thrift.Type.I32, 1);
      output.writeI32(this.keyAlgorithm);
      output.writeFieldEnd();
    }
    if (this.keySize !== null && this.keySize !== undefined) {
      output.writeFieldBegin('keySize', Thrift.Type.I32, 2);
      output.writeI32(this.keySize);
      output.writeFieldEnd();
    }
    if (this.keyData !== null && this.keyData !== undefined) {
      output.writeFieldBegin('keyData', Thrift.Type.STRING, 3);
      output.writeBinary(this.keyData);
      output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
      output.writeFieldBegin('createdTime', Thrift.Type.I64, 4);
      output.writeI64(this.createdTime);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PublicKeychain = module.exports.PublicKeychain = class {
  constructor(args) {
    this.publicKeys = null;
    if (args) {
      if (args.publicKeys !== undefined && args.publicKeys !== null) {
        this.publicKeys = Thrift.copyList(args.publicKeys, [ttypes.PublicKey]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.SET) {
          this.publicKeys = [];
          const _rtmp3407 = input.readSetBegin();
          const _size406 = _rtmp3407.size || 0;
          for (let _i408 = 0; _i408 < _size406; ++_i408) {
            let elem409 = null;
            elem409 = new ttypes.PublicKey();
            elem409.read(input);
            this.publicKeys.push(elem409);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PublicKeychain');
    if (this.publicKeys !== null && this.publicKeys !== undefined) {
      output.writeFieldBegin('publicKeys', Thrift.Type.SET, 1);
      output.writeSetBegin(Thrift.Type.STRUCT, this.publicKeys.length);
      for (let iter410 in this.publicKeys) {
        if (this.publicKeys.hasOwnProperty(iter410)) {
          iter410 = this.publicKeys[iter410];
          iter410.write(output);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const QueueingPolicy = module.exports.QueueingPolicy = class {
  constructor(args) {
    this.priority = null;
    this.policy = null;
    if (args) {
      if (args.priority !== undefined && args.priority !== null) {
        this.priority = args.priority;
      }
      if (args.policy !== undefined && args.policy !== null) {
        this.policy = args.policy;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.priority = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.policy = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('QueueingPolicy');
    if (this.priority !== null && this.priority !== undefined) {
      output.writeFieldBegin('priority', Thrift.Type.I32, 1);
      output.writeI32(this.priority);
      output.writeFieldEnd();
    }
    if (this.policy !== null && this.policy !== undefined) {
      output.writeFieldBegin('policy', Thrift.Type.STRING, 2);
      output.writeString(this.policy);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const RegisterWithPhoneNumberResult = module.exports.RegisterWithPhoneNumberResult = class {
  constructor(args) {
    this.authToken = null;
    this.recommendEmailRegistration = null;
    this.certificate = null;
    if (args) {
      if (args.authToken !== undefined && args.authToken !== null) {
        this.authToken = args.authToken;
      }
      if (args.recommendEmailRegistration !== undefined && args.recommendEmailRegistration !== null) {
        this.recommendEmailRegistration = args.recommendEmailRegistration;
      }
      if (args.certificate !== undefined && args.certificate !== null) {
        this.certificate = args.certificate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.authToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.recommendEmailRegistration = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.certificate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('RegisterWithPhoneNumberResult');
    if (this.authToken !== null && this.authToken !== undefined) {
      output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
      output.writeString(this.authToken);
      output.writeFieldEnd();
    }
    if (this.recommendEmailRegistration !== null && this.recommendEmailRegistration !== undefined) {
      output.writeFieldBegin('recommendEmailRegistration', Thrift.Type.BOOL, 2);
      output.writeBool(this.recommendEmailRegistration);
      output.writeFieldEnd();
    }
    if (this.certificate !== null && this.certificate !== undefined) {
      output.writeFieldBegin('certificate', Thrift.Type.STRING, 3);
      output.writeString(this.certificate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const RegisterWithSnsIdResult = module.exports.RegisterWithSnsIdResult = class {
  constructor(args) {
    this.authToken = null;
    this.userCreated = null;
    this.recommendEmailRegistration = null;
    if (args) {
      if (args.authToken !== undefined && args.authToken !== null) {
        this.authToken = args.authToken;
      }
      if (args.userCreated !== undefined && args.userCreated !== null) {
        this.userCreated = args.userCreated;
      }
      if (args.recommendEmailRegistration !== undefined && args.recommendEmailRegistration !== null) {
        this.recommendEmailRegistration = args.recommendEmailRegistration;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.authToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.userCreated = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.recommendEmailRegistration = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('RegisterWithSnsIdResult');
    if (this.authToken !== null && this.authToken !== undefined) {
      output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
      output.writeString(this.authToken);
      output.writeFieldEnd();
    }
    if (this.userCreated !== null && this.userCreated !== undefined) {
      output.writeFieldBegin('userCreated', Thrift.Type.BOOL, 2);
      output.writeBool(this.userCreated);
      output.writeFieldEnd();
    }
    if (this.recommendEmailRegistration !== null && this.recommendEmailRegistration !== undefined) {
      output.writeFieldBegin('recommendEmailRegistration', Thrift.Type.BOOL, 3);
      output.writeBool(this.recommendEmailRegistration);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const RequestTokenResponse = module.exports.RequestTokenResponse = class {
  constructor(args) {
    this.requestToken = null;
    this.returnUrl = null;
    if (args) {
      if (args.requestToken !== undefined && args.requestToken !== null) {
        this.requestToken = args.requestToken;
      }
      if (args.returnUrl !== undefined && args.returnUrl !== null) {
        this.returnUrl = args.returnUrl;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.returnUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('RequestTokenResponse');
    if (this.requestToken !== null && this.requestToken !== undefined) {
      output.writeFieldBegin('requestToken', Thrift.Type.STRING, 1);
      output.writeString(this.requestToken);
      output.writeFieldEnd();
    }
    if (this.returnUrl !== null && this.returnUrl !== undefined) {
      output.writeFieldBegin('returnUrl', Thrift.Type.STRING, 2);
      output.writeString(this.returnUrl);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const RingbackTone = module.exports.RingbackTone = class {
  constructor(args) {
    this.uuid = null;
    this.trackId = null;
    this.title = null;
    this.oid = null;
    this.tids = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = args.uuid;
      }
      if (args.trackId !== undefined && args.trackId !== null) {
        this.trackId = args.trackId;
      }
      if (args.title !== undefined && args.title !== null) {
        this.title = args.title;
      }
      if (args.oid !== undefined && args.oid !== null) {
        this.oid = args.oid;
      }
      if (args.tids !== undefined && args.tids !== null) {
        this.tids = Thrift.copyMap(args.tids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.uuid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.trackId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.title = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.oid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.MAP) {
          this.tids = {};
          const _rtmp3412 = input.readMapBegin();
          const _size411 = _rtmp3412.size || 0;
          for (let _i413 = 0; _i413 < _size411; ++_i413) {
            let key414 = null;
            let val415 = null;
            key414 = input.readString();
            val415 = input.readString();
            this.tids[key414] = val415;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('RingbackTone');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
      output.writeString(this.uuid);
      output.writeFieldEnd();
    }
    if (this.trackId !== null && this.trackId !== undefined) {
      output.writeFieldBegin('trackId', Thrift.Type.STRING, 2);
      output.writeString(this.trackId);
      output.writeFieldEnd();
    }
    if (this.title !== null && this.title !== undefined) {
      output.writeFieldBegin('title', Thrift.Type.STRING, 3);
      output.writeString(this.title);
      output.writeFieldEnd();
    }
    if (this.oid !== null && this.oid !== undefined) {
      output.writeFieldBegin('oid', Thrift.Type.STRING, 4);
      output.writeString(this.oid);
      output.writeFieldEnd();
    }
    if (this.tids !== null && this.tids !== undefined) {
      output.writeFieldBegin('tids', Thrift.Type.MAP, 5);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.tids));
      for (let kiter416 in this.tids) {
        if (this.tids.hasOwnProperty(kiter416)) {
          let viter417 = this.tids[kiter416];
          output.writeString(kiter416);
          output.writeString(viter417);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Room = module.exports.Room = class {
  constructor(args) {
    this.mid = null;
    this.createdTime = null;
    this.contacts = null;
    this.notificationDisabled = null;
    this.memberMids = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.createdTime !== undefined && args.createdTime !== null) {
        this.createdTime = args.createdTime;
      }
      if (args.contacts !== undefined && args.contacts !== null) {
        this.contacts = Thrift.copyList(args.contacts, [ttypes.Contact]);
      }
      if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
        this.notificationDisabled = args.notificationDisabled;
      }
      if (args.memberMids !== undefined && args.memberMids !== null) {
        this.memberMids = Thrift.copyList(args.memberMids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createdTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.LIST) {
          this.contacts = [];
          const _rtmp3419 = input.readListBegin();
          const _size418 = _rtmp3419.size || 0;
          for (let _i420 = 0; _i420 < _size418; ++_i420) {
            let elem421 = null;
            elem421 = new ttypes.Contact();
            elem421.read(input);
            this.contacts.push(elem421);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.BOOL) {
          this.notificationDisabled = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 40:
        if (ftype == Thrift.Type.LIST) {
          this.memberMids = [];
          const _rtmp3423 = input.readListBegin();
          const _size422 = _rtmp3423.size || 0;
          for (let _i424 = 0; _i424 < _size422; ++_i424) {
            let elem425 = null;
            elem425 = input.readString();
            this.memberMids.push(elem425);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Room');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
      output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
      output.writeI64(this.createdTime);
      output.writeFieldEnd();
    }
    if (this.contacts !== null && this.contacts !== undefined) {
      output.writeFieldBegin('contacts', Thrift.Type.LIST, 10);
      output.writeListBegin(Thrift.Type.STRUCT, this.contacts.length);
      for (let iter426 in this.contacts) {
        if (this.contacts.hasOwnProperty(iter426)) {
          iter426 = this.contacts[iter426];
          iter426.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.notificationDisabled !== null && this.notificationDisabled !== undefined) {
      output.writeFieldBegin('notificationDisabled', Thrift.Type.BOOL, 31);
      output.writeBool(this.notificationDisabled);
      output.writeFieldEnd();
    }
    if (this.memberMids !== null && this.memberMids !== undefined) {
      output.writeFieldBegin('memberMids', Thrift.Type.LIST, 40);
      output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
      for (let iter427 in this.memberMids) {
        if (this.memberMids.hasOwnProperty(iter427)) {
          iter427 = this.memberMids[iter427];
          output.writeString(iter427);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const RSAKey = module.exports.RSAKey = class {
  constructor(args) {
    this.keynm = null;
    this.nvalue = null;
    this.evalue = null;
    this.sessionKey = null;
    if (args) {
      if (args.keynm !== undefined && args.keynm !== null) {
        this.keynm = args.keynm;
      }
      if (args.nvalue !== undefined && args.nvalue !== null) {
        this.nvalue = args.nvalue;
      }
      if (args.evalue !== undefined && args.evalue !== null) {
        this.evalue = args.evalue;
      }
      if (args.sessionKey !== undefined && args.sessionKey !== null) {
        this.sessionKey = args.sessionKey;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.keynm = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.nvalue = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.evalue = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.sessionKey = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('RSAKey');
    if (this.keynm !== null && this.keynm !== undefined) {
      output.writeFieldBegin('keynm', Thrift.Type.STRING, 1);
      output.writeString(this.keynm);
      output.writeFieldEnd();
    }
    if (this.nvalue !== null && this.nvalue !== undefined) {
      output.writeFieldBegin('nvalue', Thrift.Type.STRING, 2);
      output.writeString(this.nvalue);
      output.writeFieldEnd();
    }
    if (this.evalue !== null && this.evalue !== undefined) {
      output.writeFieldBegin('evalue', Thrift.Type.STRING, 3);
      output.writeString(this.evalue);
      output.writeFieldEnd();
    }
    if (this.sessionKey !== null && this.sessionKey !== undefined) {
      output.writeFieldBegin('sessionKey', Thrift.Type.STRING, 4);
      output.writeString(this.sessionKey);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SecurityCenterResult = module.exports.SecurityCenterResult = class {
  constructor(args) {
    this.uri = null;
    this.token = null;
    this.cookiePath = null;
    this.skip = null;
    if (args) {
      if (args.uri !== undefined && args.uri !== null) {
        this.uri = args.uri;
      }
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.cookiePath !== undefined && args.cookiePath !== null) {
        this.cookiePath = args.cookiePath;
      }
      if (args.skip !== undefined && args.skip !== null) {
        this.skip = args.skip;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.uri = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.cookiePath = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.skip = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SecurityCenterResult');
    if (this.uri !== null && this.uri !== undefined) {
      output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
      output.writeString(this.uri);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 2);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.cookiePath !== null && this.cookiePath !== undefined) {
      output.writeFieldBegin('cookiePath', Thrift.Type.STRING, 3);
      output.writeString(this.cookiePath);
      output.writeFieldEnd();
    }
    if (this.skip !== null && this.skip !== undefined) {
      output.writeFieldBegin('skip', Thrift.Type.BOOL, 4);
      output.writeBool(this.skip);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SendBuddyMessageResult = module.exports.SendBuddyMessageResult = class {
  constructor(args) {
    this.requestId = null;
    this.state = null;
    this.messageId = null;
    this.eventNo = null;
    this.receiverCount = null;
    this.successCount = null;
    this.failCount = null;
    this.cancelCount = null;
    this.blockCount = null;
    this.unregisterCount = null;
    this.unrelatedCount = null;
    this.timestamp = null;
    this.message = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.state !== undefined && args.state !== null) {
        this.state = args.state;
      }
      if (args.messageId !== undefined && args.messageId !== null) {
        this.messageId = args.messageId;
      }
      if (args.eventNo !== undefined && args.eventNo !== null) {
        this.eventNo = args.eventNo;
      }
      if (args.receiverCount !== undefined && args.receiverCount !== null) {
        this.receiverCount = args.receiverCount;
      }
      if (args.successCount !== undefined && args.successCount !== null) {
        this.successCount = args.successCount;
      }
      if (args.failCount !== undefined && args.failCount !== null) {
        this.failCount = args.failCount;
      }
      if (args.cancelCount !== undefined && args.cancelCount !== null) {
        this.cancelCount = args.cancelCount;
      }
      if (args.blockCount !== undefined && args.blockCount !== null) {
        this.blockCount = args.blockCount;
      }
      if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
        this.unregisterCount = args.unregisterCount;
      }
      if (args.unrelatedCount !== undefined && args.unrelatedCount !== null) {
        this.unrelatedCount = args.unrelatedCount;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.state = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.messageId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.eventNo = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.receiverCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I64) {
          this.successCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I64) {
          this.failCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I64) {
          this.cancelCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.I64) {
          this.blockCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.I64) {
          this.unregisterCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.I64) {
          this.unrelatedCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SendBuddyMessageResult');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.state !== null && this.state !== undefined) {
      output.writeFieldBegin('state', Thrift.Type.I32, 2);
      output.writeI32(this.state);
      output.writeFieldEnd();
    }
    if (this.messageId !== null && this.messageId !== undefined) {
      output.writeFieldBegin('messageId', Thrift.Type.STRING, 3);
      output.writeString(this.messageId);
      output.writeFieldEnd();
    }
    if (this.eventNo !== null && this.eventNo !== undefined) {
      output.writeFieldBegin('eventNo', Thrift.Type.I32, 4);
      output.writeI32(this.eventNo);
      output.writeFieldEnd();
    }
    if (this.receiverCount !== null && this.receiverCount !== undefined) {
      output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
      output.writeI64(this.receiverCount);
      output.writeFieldEnd();
    }
    if (this.successCount !== null && this.successCount !== undefined) {
      output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
      output.writeI64(this.successCount);
      output.writeFieldEnd();
    }
    if (this.failCount !== null && this.failCount !== undefined) {
      output.writeFieldBegin('failCount', Thrift.Type.I64, 13);
      output.writeI64(this.failCount);
      output.writeFieldEnd();
    }
    if (this.cancelCount !== null && this.cancelCount !== undefined) {
      output.writeFieldBegin('cancelCount', Thrift.Type.I64, 14);
      output.writeI64(this.cancelCount);
      output.writeFieldEnd();
    }
    if (this.blockCount !== null && this.blockCount !== undefined) {
      output.writeFieldBegin('blockCount', Thrift.Type.I64, 15);
      output.writeI64(this.blockCount);
      output.writeFieldEnd();
    }
    if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
      output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 16);
      output.writeI64(this.unregisterCount);
      output.writeFieldEnd();
    }
    if (this.unrelatedCount !== null && this.unrelatedCount !== undefined) {
      output.writeFieldBegin('unrelatedCount', Thrift.Type.I64, 17);
      output.writeI64(this.unrelatedCount);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 21);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 22);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SendPostbackRequest = module.exports.SendPostbackRequest = class {
  constructor(args) {
    this.messageId = null;
    this.url = null;
    this.chatMID = null;
    this.originMID = null;
    if (args) {
      if (args.messageId !== undefined && args.messageId !== null) {
        this.messageId = args.messageId;
      }
      if (args.url !== undefined && args.url !== null) {
        this.url = args.url;
      }
      if (args.chatMID !== undefined && args.chatMID !== null) {
        this.chatMID = args.chatMID;
      }
      if (args.originMID !== undefined && args.originMID !== null) {
        this.originMID = args.originMID;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.messageId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.url = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.chatMID = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.originMID = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SendPostbackRequest');
    if (this.messageId !== null && this.messageId !== undefined) {
      output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
      output.writeString(this.messageId);
      output.writeFieldEnd();
    }
    if (this.url !== null && this.url !== undefined) {
      output.writeFieldBegin('url', Thrift.Type.STRING, 2);
      output.writeString(this.url);
      output.writeFieldEnd();
    }
    if (this.chatMID !== null && this.chatMID !== undefined) {
      output.writeFieldBegin('chatMID', Thrift.Type.STRING, 3);
      output.writeString(this.chatMID);
      output.writeFieldEnd();
    }
    if (this.originMID !== null && this.originMID !== undefined) {
      output.writeFieldBegin('originMID', Thrift.Type.STRING, 4);
      output.writeString(this.originMID);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SetBuddyOnAirResult = module.exports.SetBuddyOnAirResult = class {
  constructor(args) {
    this.requestId = null;
    this.state = null;
    this.eventNo = null;
    this.receiverCount = null;
    this.successCount = null;
    this.failCount = null;
    this.cancelCount = null;
    this.unregisterCount = null;
    this.timestamp = null;
    this.message = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.state !== undefined && args.state !== null) {
        this.state = args.state;
      }
      if (args.eventNo !== undefined && args.eventNo !== null) {
        this.eventNo = args.eventNo;
      }
      if (args.receiverCount !== undefined && args.receiverCount !== null) {
        this.receiverCount = args.receiverCount;
      }
      if (args.successCount !== undefined && args.successCount !== null) {
        this.successCount = args.successCount;
      }
      if (args.failCount !== undefined && args.failCount !== null) {
        this.failCount = args.failCount;
      }
      if (args.cancelCount !== undefined && args.cancelCount !== null) {
        this.cancelCount = args.cancelCount;
      }
      if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
        this.unregisterCount = args.unregisterCount;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.state = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.eventNo = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.receiverCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I64) {
          this.successCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I64) {
          this.failCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I64) {
          this.cancelCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.I64) {
          this.unregisterCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SetBuddyOnAirResult');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.state !== null && this.state !== undefined) {
      output.writeFieldBegin('state', Thrift.Type.I32, 2);
      output.writeI32(this.state);
      output.writeFieldEnd();
    }
    if (this.eventNo !== null && this.eventNo !== undefined) {
      output.writeFieldBegin('eventNo', Thrift.Type.I32, 3);
      output.writeI32(this.eventNo);
      output.writeFieldEnd();
    }
    if (this.receiverCount !== null && this.receiverCount !== undefined) {
      output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
      output.writeI64(this.receiverCount);
      output.writeFieldEnd();
    }
    if (this.successCount !== null && this.successCount !== undefined) {
      output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
      output.writeI64(this.successCount);
      output.writeFieldEnd();
    }
    if (this.failCount !== null && this.failCount !== undefined) {
      output.writeFieldBegin('failCount', Thrift.Type.I64, 13);
      output.writeI64(this.failCount);
      output.writeFieldEnd();
    }
    if (this.cancelCount !== null && this.cancelCount !== undefined) {
      output.writeFieldBegin('cancelCount', Thrift.Type.I64, 14);
      output.writeI64(this.cancelCount);
      output.writeFieldEnd();
    }
    if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
      output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 15);
      output.writeI64(this.unregisterCount);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 21);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 22);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Settings = module.exports.Settings = class {
  constructor(args) {
    this.notificationEnable = null;
    this.notificationMuteExpiration = null;
    this.notificationNewMessage = null;
    this.notificationGroupInvitation = null;
    this.notificationShowMessage = null;
    this.notificationIncomingCall = null;
    this.notificationSoundMessage = null;
    this.notificationSoundGroup = null;
    this.notificationDisabledWithSub = null;
    this.notificationPayment = null;
    this.privacySyncContacts = null;
    this.privacySearchByPhoneNumber = null;
    this.privacySearchByUserid = null;
    this.privacySearchByEmail = null;
    this.privacyAllowSecondaryDeviceLogin = null;
    this.privacyProfileImagePostToMyhome = null;
    this.privacyReceiveMessagesFromNotFriend = null;
    this.privacyAgreeUseLineCoinToPaidCall = null;
    this.privacyAgreeUsePaidCall = null;
    this.privacyAllowFriendRequest = null;
    this.contactMyTicket = null;
    this.identityProvider = null;
    this.identityIdentifier = null;
    this.snsAccounts = null;
    this.phoneRegistration = null;
    this.emailConfirmationStatus = null;
    this.accountMigrationPincodeType = null;
    this.enforcedInputAccountMigrationPincode = null;
    this.securityCenterSettingsType = null;
    this.allowUnregistrationSecondaryDevice = null;
    this.preferenceLocale = null;
    this.customModes = null;
    this.e2eeEnable = null;
    this.hitokotoBackupRequested = null;
    this.privacyProfileMusicPostToMyhome = null;
    this.privacyAllowNearby = null;
    this.agreementNearbyTime = null;
    this.agreementSquareTime = null;
    this.notificationMention = null;
    this.botUseAgreementAcceptedAt = null;
    if (args) {
      if (args.notificationEnable !== undefined && args.notificationEnable !== null) {
        this.notificationEnable = args.notificationEnable;
      }
      if (args.notificationMuteExpiration !== undefined && args.notificationMuteExpiration !== null) {
        this.notificationMuteExpiration = args.notificationMuteExpiration;
      }
      if (args.notificationNewMessage !== undefined && args.notificationNewMessage !== null) {
        this.notificationNewMessage = args.notificationNewMessage;
      }
      if (args.notificationGroupInvitation !== undefined && args.notificationGroupInvitation !== null) {
        this.notificationGroupInvitation = args.notificationGroupInvitation;
      }
      if (args.notificationShowMessage !== undefined && args.notificationShowMessage !== null) {
        this.notificationShowMessage = args.notificationShowMessage;
      }
      if (args.notificationIncomingCall !== undefined && args.notificationIncomingCall !== null) {
        this.notificationIncomingCall = args.notificationIncomingCall;
      }
      if (args.notificationSoundMessage !== undefined && args.notificationSoundMessage !== null) {
        this.notificationSoundMessage = args.notificationSoundMessage;
      }
      if (args.notificationSoundGroup !== undefined && args.notificationSoundGroup !== null) {
        this.notificationSoundGroup = args.notificationSoundGroup;
      }
      if (args.notificationDisabledWithSub !== undefined && args.notificationDisabledWithSub !== null) {
        this.notificationDisabledWithSub = args.notificationDisabledWithSub;
      }
      if (args.notificationPayment !== undefined && args.notificationPayment !== null) {
        this.notificationPayment = args.notificationPayment;
      }
      if (args.privacySyncContacts !== undefined && args.privacySyncContacts !== null) {
        this.privacySyncContacts = args.privacySyncContacts;
      }
      if (args.privacySearchByPhoneNumber !== undefined && args.privacySearchByPhoneNumber !== null) {
        this.privacySearchByPhoneNumber = args.privacySearchByPhoneNumber;
      }
      if (args.privacySearchByUserid !== undefined && args.privacySearchByUserid !== null) {
        this.privacySearchByUserid = args.privacySearchByUserid;
      }
      if (args.privacySearchByEmail !== undefined && args.privacySearchByEmail !== null) {
        this.privacySearchByEmail = args.privacySearchByEmail;
      }
      if (args.privacyAllowSecondaryDeviceLogin !== undefined && args.privacyAllowSecondaryDeviceLogin !== null) {
        this.privacyAllowSecondaryDeviceLogin = args.privacyAllowSecondaryDeviceLogin;
      }
      if (args.privacyProfileImagePostToMyhome !== undefined && args.privacyProfileImagePostToMyhome !== null) {
        this.privacyProfileImagePostToMyhome = args.privacyProfileImagePostToMyhome;
      }
      if (args.privacyReceiveMessagesFromNotFriend !== undefined && args.privacyReceiveMessagesFromNotFriend !== null) {
        this.privacyReceiveMessagesFromNotFriend = args.privacyReceiveMessagesFromNotFriend;
      }
      if (args.privacyAgreeUseLineCoinToPaidCall !== undefined && args.privacyAgreeUseLineCoinToPaidCall !== null) {
        this.privacyAgreeUseLineCoinToPaidCall = args.privacyAgreeUseLineCoinToPaidCall;
      }
      if (args.privacyAgreeUsePaidCall !== undefined && args.privacyAgreeUsePaidCall !== null) {
        this.privacyAgreeUsePaidCall = args.privacyAgreeUsePaidCall;
      }
      if (args.privacyAllowFriendRequest !== undefined && args.privacyAllowFriendRequest !== null) {
        this.privacyAllowFriendRequest = args.privacyAllowFriendRequest;
      }
      if (args.contactMyTicket !== undefined && args.contactMyTicket !== null) {
        this.contactMyTicket = args.contactMyTicket;
      }
      if (args.identityProvider !== undefined && args.identityProvider !== null) {
        this.identityProvider = args.identityProvider;
      }
      if (args.identityIdentifier !== undefined && args.identityIdentifier !== null) {
        this.identityIdentifier = args.identityIdentifier;
      }
      if (args.snsAccounts !== undefined && args.snsAccounts !== null) {
        this.snsAccounts = Thrift.copyMap(args.snsAccounts, [null]);
      }
      if (args.phoneRegistration !== undefined && args.phoneRegistration !== null) {
        this.phoneRegistration = args.phoneRegistration;
      }
      if (args.emailConfirmationStatus !== undefined && args.emailConfirmationStatus !== null) {
        this.emailConfirmationStatus = args.emailConfirmationStatus;
      }
      if (args.accountMigrationPincodeType !== undefined && args.accountMigrationPincodeType !== null) {
        this.accountMigrationPincodeType = args.accountMigrationPincodeType;
      }
      if (args.enforcedInputAccountMigrationPincode !== undefined && args.enforcedInputAccountMigrationPincode !== null) {
        this.enforcedInputAccountMigrationPincode = args.enforcedInputAccountMigrationPincode;
      }
      if (args.securityCenterSettingsType !== undefined && args.securityCenterSettingsType !== null) {
        this.securityCenterSettingsType = args.securityCenterSettingsType;
      }
      if (args.allowUnregistrationSecondaryDevice !== undefined && args.allowUnregistrationSecondaryDevice !== null) {
        this.allowUnregistrationSecondaryDevice = args.allowUnregistrationSecondaryDevice;
      }
      if (args.preferenceLocale !== undefined && args.preferenceLocale !== null) {
        this.preferenceLocale = args.preferenceLocale;
      }
      if (args.customModes !== undefined && args.customModes !== null) {
        this.customModes = Thrift.copyMap(args.customModes, [null]);
      }
      if (args.e2eeEnable !== undefined && args.e2eeEnable !== null) {
        this.e2eeEnable = args.e2eeEnable;
      }
      if (args.hitokotoBackupRequested !== undefined && args.hitokotoBackupRequested !== null) {
        this.hitokotoBackupRequested = args.hitokotoBackupRequested;
      }
      if (args.privacyProfileMusicPostToMyhome !== undefined && args.privacyProfileMusicPostToMyhome !== null) {
        this.privacyProfileMusicPostToMyhome = args.privacyProfileMusicPostToMyhome;
      }
      if (args.privacyAllowNearby !== undefined && args.privacyAllowNearby !== null) {
        this.privacyAllowNearby = args.privacyAllowNearby;
      }
      if (args.agreementNearbyTime !== undefined && args.agreementNearbyTime !== null) {
        this.agreementNearbyTime = args.agreementNearbyTime;
      }
      if (args.agreementSquareTime !== undefined && args.agreementSquareTime !== null) {
        this.agreementSquareTime = args.agreementSquareTime;
      }
      if (args.notificationMention !== undefined && args.notificationMention !== null) {
        this.notificationMention = args.notificationMention;
      }
      if (args.botUseAgreementAcceptedAt !== undefined && args.botUseAgreementAcceptedAt !== null) {
        this.botUseAgreementAcceptedAt = args.botUseAgreementAcceptedAt;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 10:
        if (ftype == Thrift.Type.BOOL) {
          this.notificationEnable = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.notificationMuteExpiration = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.BOOL) {
          this.notificationNewMessage = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.BOOL) {
          this.notificationGroupInvitation = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.BOOL) {
          this.notificationShowMessage = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.BOOL) {
          this.notificationIncomingCall = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.STRING) {
          this.notificationSoundMessage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.STRING) {
          this.notificationSoundGroup = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.BOOL) {
          this.notificationDisabledWithSub = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.BOOL) {
          this.notificationPayment = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.BOOL) {
          this.privacySyncContacts = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.BOOL) {
          this.privacySearchByPhoneNumber = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.BOOL) {
          this.privacySearchByUserid = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.BOOL) {
          this.privacySearchByEmail = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.BOOL) {
          this.privacyAllowSecondaryDeviceLogin = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.BOOL) {
          this.privacyProfileImagePostToMyhome = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.BOOL) {
          this.privacyReceiveMessagesFromNotFriend = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.BOOL) {
          this.privacyAgreeUseLineCoinToPaidCall = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 28:
        if (ftype == Thrift.Type.BOOL) {
          this.privacyAgreeUsePaidCall = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 29:
        if (ftype == Thrift.Type.BOOL) {
          this.privacyAllowFriendRequest = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 30:
        if (ftype == Thrift.Type.STRING) {
          this.contactMyTicket = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 40:
        if (ftype == Thrift.Type.I32) {
          this.identityProvider = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 41:
        if (ftype == Thrift.Type.STRING) {
          this.identityIdentifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 42:
        if (ftype == Thrift.Type.MAP) {
          this.snsAccounts = {};
          const _rtmp3429 = input.readMapBegin();
          const _size428 = _rtmp3429.size || 0;
          for (let _i430 = 0; _i430 < _size428; ++_i430) {
            let key431 = null;
            let val432 = null;
            key431 = input.readI32();
            val432 = input.readString();
            this.snsAccounts[key431] = val432;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 43:
        if (ftype == Thrift.Type.BOOL) {
          this.phoneRegistration = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 44:
        if (ftype == Thrift.Type.I32) {
          this.emailConfirmationStatus = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 45:
        if (ftype == Thrift.Type.I32) {
          this.accountMigrationPincodeType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 46:
        if (ftype == Thrift.Type.BOOL) {
          this.enforcedInputAccountMigrationPincode = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 47:
        if (ftype == Thrift.Type.I32) {
          this.securityCenterSettingsType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 48:
        if (ftype == Thrift.Type.BOOL) {
          this.allowUnregistrationSecondaryDevice = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 50:
        if (ftype == Thrift.Type.STRING) {
          this.preferenceLocale = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 60:
        if (ftype == Thrift.Type.MAP) {
          this.customModes = {};
          const _rtmp3434 = input.readMapBegin();
          const _size433 = _rtmp3434.size || 0;
          for (let _i435 = 0; _i435 < _size433; ++_i435) {
            let key436 = null;
            let val437 = null;
            key436 = input.readI32();
            val437 = input.readString();
            this.customModes[key436] = val437;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 61:
        if (ftype == Thrift.Type.BOOL) {
          this.e2eeEnable = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 62:
        if (ftype == Thrift.Type.BOOL) {
          this.hitokotoBackupRequested = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 63:
        if (ftype == Thrift.Type.BOOL) {
          this.privacyProfileMusicPostToMyhome = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 65:
        if (ftype == Thrift.Type.BOOL) {
          this.privacyAllowNearby = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 66:
        if (ftype == Thrift.Type.I64) {
          this.agreementNearbyTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 67:
        if (ftype == Thrift.Type.I64) {
          this.agreementSquareTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 68:
        if (ftype == Thrift.Type.BOOL) {
          this.notificationMention = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 69:
        if (ftype == Thrift.Type.I64) {
          this.botUseAgreementAcceptedAt = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Settings');
    if (this.notificationEnable !== null && this.notificationEnable !== undefined) {
      output.writeFieldBegin('notificationEnable', Thrift.Type.BOOL, 10);
      output.writeBool(this.notificationEnable);
      output.writeFieldEnd();
    }
    if (this.notificationMuteExpiration !== null && this.notificationMuteExpiration !== undefined) {
      output.writeFieldBegin('notificationMuteExpiration', Thrift.Type.I64, 11);
      output.writeI64(this.notificationMuteExpiration);
      output.writeFieldEnd();
    }
    if (this.notificationNewMessage !== null && this.notificationNewMessage !== undefined) {
      output.writeFieldBegin('notificationNewMessage', Thrift.Type.BOOL, 12);
      output.writeBool(this.notificationNewMessage);
      output.writeFieldEnd();
    }
    if (this.notificationGroupInvitation !== null && this.notificationGroupInvitation !== undefined) {
      output.writeFieldBegin('notificationGroupInvitation', Thrift.Type.BOOL, 13);
      output.writeBool(this.notificationGroupInvitation);
      output.writeFieldEnd();
    }
    if (this.notificationShowMessage !== null && this.notificationShowMessage !== undefined) {
      output.writeFieldBegin('notificationShowMessage', Thrift.Type.BOOL, 14);
      output.writeBool(this.notificationShowMessage);
      output.writeFieldEnd();
    }
    if (this.notificationIncomingCall !== null && this.notificationIncomingCall !== undefined) {
      output.writeFieldBegin('notificationIncomingCall', Thrift.Type.BOOL, 15);
      output.writeBool(this.notificationIncomingCall);
      output.writeFieldEnd();
    }
    if (this.notificationSoundMessage !== null && this.notificationSoundMessage !== undefined) {
      output.writeFieldBegin('notificationSoundMessage', Thrift.Type.STRING, 16);
      output.writeString(this.notificationSoundMessage);
      output.writeFieldEnd();
    }
    if (this.notificationSoundGroup !== null && this.notificationSoundGroup !== undefined) {
      output.writeFieldBegin('notificationSoundGroup', Thrift.Type.STRING, 17);
      output.writeString(this.notificationSoundGroup);
      output.writeFieldEnd();
    }
    if (this.notificationDisabledWithSub !== null && this.notificationDisabledWithSub !== undefined) {
      output.writeFieldBegin('notificationDisabledWithSub', Thrift.Type.BOOL, 18);
      output.writeBool(this.notificationDisabledWithSub);
      output.writeFieldEnd();
    }
    if (this.notificationPayment !== null && this.notificationPayment !== undefined) {
      output.writeFieldBegin('notificationPayment', Thrift.Type.BOOL, 19);
      output.writeBool(this.notificationPayment);
      output.writeFieldEnd();
    }
    if (this.privacySyncContacts !== null && this.privacySyncContacts !== undefined) {
      output.writeFieldBegin('privacySyncContacts', Thrift.Type.BOOL, 20);
      output.writeBool(this.privacySyncContacts);
      output.writeFieldEnd();
    }
    if (this.privacySearchByPhoneNumber !== null && this.privacySearchByPhoneNumber !== undefined) {
      output.writeFieldBegin('privacySearchByPhoneNumber', Thrift.Type.BOOL, 21);
      output.writeBool(this.privacySearchByPhoneNumber);
      output.writeFieldEnd();
    }
    if (this.privacySearchByUserid !== null && this.privacySearchByUserid !== undefined) {
      output.writeFieldBegin('privacySearchByUserid', Thrift.Type.BOOL, 22);
      output.writeBool(this.privacySearchByUserid);
      output.writeFieldEnd();
    }
    if (this.privacySearchByEmail !== null && this.privacySearchByEmail !== undefined) {
      output.writeFieldBegin('privacySearchByEmail', Thrift.Type.BOOL, 23);
      output.writeBool(this.privacySearchByEmail);
      output.writeFieldEnd();
    }
    if (this.privacyAllowSecondaryDeviceLogin !== null && this.privacyAllowSecondaryDeviceLogin !== undefined) {
      output.writeFieldBegin('privacyAllowSecondaryDeviceLogin', Thrift.Type.BOOL, 24);
      output.writeBool(this.privacyAllowSecondaryDeviceLogin);
      output.writeFieldEnd();
    }
    if (this.privacyProfileImagePostToMyhome !== null && this.privacyProfileImagePostToMyhome !== undefined) {
      output.writeFieldBegin('privacyProfileImagePostToMyhome', Thrift.Type.BOOL, 25);
      output.writeBool(this.privacyProfileImagePostToMyhome);
      output.writeFieldEnd();
    }
    if (this.privacyReceiveMessagesFromNotFriend !== null && this.privacyReceiveMessagesFromNotFriend !== undefined) {
      output.writeFieldBegin('privacyReceiveMessagesFromNotFriend', Thrift.Type.BOOL, 26);
      output.writeBool(this.privacyReceiveMessagesFromNotFriend);
      output.writeFieldEnd();
    }
    if (this.privacyAgreeUseLineCoinToPaidCall !== null && this.privacyAgreeUseLineCoinToPaidCall !== undefined) {
      output.writeFieldBegin('privacyAgreeUseLineCoinToPaidCall', Thrift.Type.BOOL, 27);
      output.writeBool(this.privacyAgreeUseLineCoinToPaidCall);
      output.writeFieldEnd();
    }
    if (this.privacyAgreeUsePaidCall !== null && this.privacyAgreeUsePaidCall !== undefined) {
      output.writeFieldBegin('privacyAgreeUsePaidCall', Thrift.Type.BOOL, 28);
      output.writeBool(this.privacyAgreeUsePaidCall);
      output.writeFieldEnd();
    }
    if (this.privacyAllowFriendRequest !== null && this.privacyAllowFriendRequest !== undefined) {
      output.writeFieldBegin('privacyAllowFriendRequest', Thrift.Type.BOOL, 29);
      output.writeBool(this.privacyAllowFriendRequest);
      output.writeFieldEnd();
    }
    if (this.contactMyTicket !== null && this.contactMyTicket !== undefined) {
      output.writeFieldBegin('contactMyTicket', Thrift.Type.STRING, 30);
      output.writeString(this.contactMyTicket);
      output.writeFieldEnd();
    }
    if (this.identityProvider !== null && this.identityProvider !== undefined) {
      output.writeFieldBegin('identityProvider', Thrift.Type.I32, 40);
      output.writeI32(this.identityProvider);
      output.writeFieldEnd();
    }
    if (this.identityIdentifier !== null && this.identityIdentifier !== undefined) {
      output.writeFieldBegin('identityIdentifier', Thrift.Type.STRING, 41);
      output.writeString(this.identityIdentifier);
      output.writeFieldEnd();
    }
    if (this.snsAccounts !== null && this.snsAccounts !== undefined) {
      output.writeFieldBegin('snsAccounts', Thrift.Type.MAP, 42);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.snsAccounts));
      for (let kiter438 in this.snsAccounts) {
        if (this.snsAccounts.hasOwnProperty(kiter438)) {
          let viter439 = this.snsAccounts[kiter438];
          output.writeI32(kiter438);
          output.writeString(viter439);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.phoneRegistration !== null && this.phoneRegistration !== undefined) {
      output.writeFieldBegin('phoneRegistration', Thrift.Type.BOOL, 43);
      output.writeBool(this.phoneRegistration);
      output.writeFieldEnd();
    }
    if (this.emailConfirmationStatus !== null && this.emailConfirmationStatus !== undefined) {
      output.writeFieldBegin('emailConfirmationStatus', Thrift.Type.I32, 44);
      output.writeI32(this.emailConfirmationStatus);
      output.writeFieldEnd();
    }
    if (this.accountMigrationPincodeType !== null && this.accountMigrationPincodeType !== undefined) {
      output.writeFieldBegin('accountMigrationPincodeType', Thrift.Type.I32, 45);
      output.writeI32(this.accountMigrationPincodeType);
      output.writeFieldEnd();
    }
    if (this.enforcedInputAccountMigrationPincode !== null && this.enforcedInputAccountMigrationPincode !== undefined) {
      output.writeFieldBegin('enforcedInputAccountMigrationPincode', Thrift.Type.BOOL, 46);
      output.writeBool(this.enforcedInputAccountMigrationPincode);
      output.writeFieldEnd();
    }
    if (this.securityCenterSettingsType !== null && this.securityCenterSettingsType !== undefined) {
      output.writeFieldBegin('securityCenterSettingsType', Thrift.Type.I32, 47);
      output.writeI32(this.securityCenterSettingsType);
      output.writeFieldEnd();
    }
    if (this.allowUnregistrationSecondaryDevice !== null && this.allowUnregistrationSecondaryDevice !== undefined) {
      output.writeFieldBegin('allowUnregistrationSecondaryDevice', Thrift.Type.BOOL, 48);
      output.writeBool(this.allowUnregistrationSecondaryDevice);
      output.writeFieldEnd();
    }
    if (this.preferenceLocale !== null && this.preferenceLocale !== undefined) {
      output.writeFieldBegin('preferenceLocale', Thrift.Type.STRING, 50);
      output.writeString(this.preferenceLocale);
      output.writeFieldEnd();
    }
    if (this.customModes !== null && this.customModes !== undefined) {
      output.writeFieldBegin('customModes', Thrift.Type.MAP, 60);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.customModes));
      for (let kiter440 in this.customModes) {
        if (this.customModes.hasOwnProperty(kiter440)) {
          let viter441 = this.customModes[kiter440];
          output.writeI32(kiter440);
          output.writeString(viter441);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.e2eeEnable !== null && this.e2eeEnable !== undefined) {
      output.writeFieldBegin('e2eeEnable', Thrift.Type.BOOL, 61);
      output.writeBool(this.e2eeEnable);
      output.writeFieldEnd();
    }
    if (this.hitokotoBackupRequested !== null && this.hitokotoBackupRequested !== undefined) {
      output.writeFieldBegin('hitokotoBackupRequested', Thrift.Type.BOOL, 62);
      output.writeBool(this.hitokotoBackupRequested);
      output.writeFieldEnd();
    }
    if (this.privacyProfileMusicPostToMyhome !== null && this.privacyProfileMusicPostToMyhome !== undefined) {
      output.writeFieldBegin('privacyProfileMusicPostToMyhome', Thrift.Type.BOOL, 63);
      output.writeBool(this.privacyProfileMusicPostToMyhome);
      output.writeFieldEnd();
    }
    if (this.privacyAllowNearby !== null && this.privacyAllowNearby !== undefined) {
      output.writeFieldBegin('privacyAllowNearby', Thrift.Type.BOOL, 65);
      output.writeBool(this.privacyAllowNearby);
      output.writeFieldEnd();
    }
    if (this.agreementNearbyTime !== null && this.agreementNearbyTime !== undefined) {
      output.writeFieldBegin('agreementNearbyTime', Thrift.Type.I64, 66);
      output.writeI64(this.agreementNearbyTime);
      output.writeFieldEnd();
    }
    if (this.agreementSquareTime !== null && this.agreementSquareTime !== undefined) {
      output.writeFieldBegin('agreementSquareTime', Thrift.Type.I64, 67);
      output.writeI64(this.agreementSquareTime);
      output.writeFieldEnd();
    }
    if (this.notificationMention !== null && this.notificationMention !== undefined) {
      output.writeFieldBegin('notificationMention', Thrift.Type.BOOL, 68);
      output.writeBool(this.notificationMention);
      output.writeFieldEnd();
    }
    if (this.botUseAgreementAcceptedAt !== null && this.botUseAgreementAcceptedAt !== undefined) {
      output.writeFieldBegin('botUseAgreementAcceptedAt', Thrift.Type.I64, 69);
      output.writeI64(this.botUseAgreementAcceptedAt);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopUpdates = module.exports.ShopUpdates = class {
  constructor(args) {
    this.latestNewReleaseTime = null;
    this.latestEventReleaseTime = null;
    this.latestCategoryUpdateTime = null;
    this.lastVersion = null;
    this.updatedProductList = null;
    if (args) {
      if (args.latestNewReleaseTime !== undefined && args.latestNewReleaseTime !== null) {
        this.latestNewReleaseTime = args.latestNewReleaseTime;
      }
      if (args.latestEventReleaseTime !== undefined && args.latestEventReleaseTime !== null) {
        this.latestEventReleaseTime = args.latestEventReleaseTime;
      }
      if (args.latestCategoryUpdateTime !== undefined && args.latestCategoryUpdateTime !== null) {
        this.latestCategoryUpdateTime = args.latestCategoryUpdateTime;
      }
      if (args.lastVersion !== undefined && args.lastVersion !== null) {
        this.lastVersion = args.lastVersion;
      }
      if (args.updatedProductList !== undefined && args.updatedProductList !== null) {
        this.updatedProductList = Thrift.copyList(args.updatedProductList, [ttypes.ProductSimple]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.latestNewReleaseTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.latestEventReleaseTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.latestCategoryUpdateTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.lastVersion = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.LIST) {
          this.updatedProductList = [];
          const _rtmp3443 = input.readListBegin();
          const _size442 = _rtmp3443.size || 0;
          for (let _i444 = 0; _i444 < _size442; ++_i444) {
            let elem445 = null;
            elem445 = new ttypes.ProductSimple();
            elem445.read(input);
            this.updatedProductList.push(elem445);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopUpdates');
    if (this.latestNewReleaseTime !== null && this.latestNewReleaseTime !== undefined) {
      output.writeFieldBegin('latestNewReleaseTime', Thrift.Type.I64, 1);
      output.writeI64(this.latestNewReleaseTime);
      output.writeFieldEnd();
    }
    if (this.latestEventReleaseTime !== null && this.latestEventReleaseTime !== undefined) {
      output.writeFieldBegin('latestEventReleaseTime', Thrift.Type.I64, 2);
      output.writeI64(this.latestEventReleaseTime);
      output.writeFieldEnd();
    }
    if (this.latestCategoryUpdateTime !== null && this.latestCategoryUpdateTime !== undefined) {
      output.writeFieldBegin('latestCategoryUpdateTime', Thrift.Type.I64, 3);
      output.writeI64(this.latestCategoryUpdateTime);
      output.writeFieldEnd();
    }
    if (this.lastVersion !== null && this.lastVersion !== undefined) {
      output.writeFieldBegin('lastVersion', Thrift.Type.I64, 11);
      output.writeI64(this.lastVersion);
      output.writeFieldEnd();
    }
    if (this.updatedProductList !== null && this.updatedProductList !== undefined) {
      output.writeFieldBegin('updatedProductList', Thrift.Type.LIST, 21);
      output.writeListBegin(Thrift.Type.STRUCT, this.updatedProductList.length);
      for (let iter446 in this.updatedProductList) {
        if (this.updatedProductList.hasOwnProperty(iter446)) {
          iter446 = this.updatedProductList[iter446];
          iter446.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShouldSyncException = module.exports.ShouldSyncException = class extends Thrift.TException {
  constructor(args) {
    super(args);
    this.name = "ShouldSyncException";
    this.syncOpRevision = null;
    this.syncScope = null;
    this.syncReason = null;
    this.message = null;
    if (args) {
      if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
        this.syncOpRevision = args.syncOpRevision;
      }
      if (args.syncScope !== undefined && args.syncScope !== null) {
        this.syncScope = new ttypes.SyncScope(args.syncScope);
      }
      if (args.syncReason !== undefined && args.syncReason !== null) {
        this.syncReason = args.syncReason;
      }
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.syncOpRevision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.syncScope = new ttypes.SyncScope();
          this.syncScope.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.syncReason = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShouldSyncException');
    if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
      output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 1);
      output.writeI64(this.syncOpRevision);
      output.writeFieldEnd();
    }
    if (this.syncScope !== null && this.syncScope !== undefined) {
      output.writeFieldBegin('syncScope', Thrift.Type.STRUCT, 2);
      this.syncScope.write(output);
      output.writeFieldEnd();
    }
    if (this.syncReason !== null && this.syncReason !== undefined) {
      output.writeFieldBegin('syncReason', Thrift.Type.I32, 3);
      output.writeI32(this.syncReason);
      output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 4);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SIMInfo = module.exports.SIMInfo = class {
  constructor(args) {
    this.phoneNumber = null;
    this.countryCode = null;
    if (args) {
      if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
        this.phoneNumber = args.phoneNumber;
      }
      if (args.countryCode !== undefined && args.countryCode !== null) {
        this.countryCode = args.countryCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.phoneNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.countryCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SIMInfo');
    if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
      output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 1);
      output.writeString(this.phoneNumber);
      output.writeFieldEnd();
    }
    if (this.countryCode !== null && this.countryCode !== undefined) {
      output.writeFieldBegin('countryCode', Thrift.Type.STRING, 2);
      output.writeString(this.countryCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SimpleChannelClient = module.exports.SimpleChannelClient = class {
  constructor(args) {
    this.applicationType = null;
    this.applicationVersion = null;
    this.locale = null;
    this.mid = null;
    if (args) {
      if (args.applicationType !== undefined && args.applicationType !== null) {
        this.applicationType = args.applicationType;
      }
      if (args.applicationVersion !== undefined && args.applicationVersion !== null) {
        this.applicationVersion = args.applicationVersion;
      }
      if (args.locale !== undefined && args.locale !== null) {
        this.locale = args.locale;
      }
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.applicationType = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.applicationVersion = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.locale = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SimpleChannelClient');
    if (this.applicationType !== null && this.applicationType !== undefined) {
      output.writeFieldBegin('applicationType', Thrift.Type.STRING, 1);
      output.writeString(this.applicationType);
      output.writeFieldEnd();
    }
    if (this.applicationVersion !== null && this.applicationVersion !== undefined) {
      output.writeFieldBegin('applicationVersion', Thrift.Type.STRING, 2);
      output.writeString(this.applicationVersion);
      output.writeFieldEnd();
    }
    if (this.locale !== null && this.locale !== undefined) {
      output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
      output.writeString(this.locale);
      output.writeFieldEnd();
    }
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 4);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SimpleChannelContact = module.exports.SimpleChannelContact = class {
  constructor(args) {
    this.mid = null;
    this.displayName = null;
    this.pictureStatus = null;
    this.picturePath = null;
    this.statusMessage = null;
    this.userid = null;
    this.regionCode = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
        this.pictureStatus = args.pictureStatus;
      }
      if (args.picturePath !== undefined && args.picturePath !== null) {
        this.picturePath = args.picturePath;
      }
      if (args.statusMessage !== undefined && args.statusMessage !== null) {
        this.statusMessage = args.statusMessage;
      }
      if (args.userid !== undefined && args.userid !== null) {
        this.userid = args.userid;
      }
      if (args.regionCode !== undefined && args.regionCode !== null) {
        this.regionCode = args.regionCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.pictureStatus = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.picturePath = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.statusMessage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.userid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.regionCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SimpleChannelContact');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
      output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 3);
      output.writeString(this.pictureStatus);
      output.writeFieldEnd();
    }
    if (this.picturePath !== null && this.picturePath !== undefined) {
      output.writeFieldBegin('picturePath', Thrift.Type.STRING, 4);
      output.writeString(this.picturePath);
      output.writeFieldEnd();
    }
    if (this.statusMessage !== null && this.statusMessage !== undefined) {
      output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
      output.writeString(this.statusMessage);
      output.writeFieldEnd();
    }
    if (this.userid !== null && this.userid !== undefined) {
      output.writeFieldBegin('userid', Thrift.Type.STRING, 6);
      output.writeString(this.userid);
      output.writeFieldEnd();
    }
    if (this.regionCode !== null && this.regionCode !== undefined) {
      output.writeFieldBegin('regionCode', Thrift.Type.STRING, 7);
      output.writeString(this.regionCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SnsFriend = module.exports.SnsFriend = class {
  constructor(args) {
    this.snsUserId = null;
    this.snsUserName = null;
    this.snsIdType = null;
    if (args) {
      if (args.snsUserId !== undefined && args.snsUserId !== null) {
        this.snsUserId = args.snsUserId;
      }
      if (args.snsUserName !== undefined && args.snsUserName !== null) {
        this.snsUserName = args.snsUserName;
      }
      if (args.snsIdType !== undefined && args.snsIdType !== null) {
        this.snsIdType = args.snsIdType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.snsUserId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.snsUserName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.snsIdType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SnsFriend');
    if (this.snsUserId !== null && this.snsUserId !== undefined) {
      output.writeFieldBegin('snsUserId', Thrift.Type.STRING, 1);
      output.writeString(this.snsUserId);
      output.writeFieldEnd();
    }
    if (this.snsUserName !== null && this.snsUserName !== undefined) {
      output.writeFieldBegin('snsUserName', Thrift.Type.STRING, 2);
      output.writeString(this.snsUserName);
      output.writeFieldEnd();
    }
    if (this.snsIdType !== null && this.snsIdType !== undefined) {
      output.writeFieldBegin('snsIdType', Thrift.Type.I32, 3);
      output.writeI32(this.snsIdType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SnsFriendContactRegistration = module.exports.SnsFriendContactRegistration = class {
  constructor(args) {
    this.contact = null;
    this.snsIdType = null;
    this.snsUserId = null;
    if (args) {
      if (args.contact !== undefined && args.contact !== null) {
        this.contact = new ttypes.Contact(args.contact);
      }
      if (args.snsIdType !== undefined && args.snsIdType !== null) {
        this.snsIdType = args.snsIdType;
      }
      if (args.snsUserId !== undefined && args.snsUserId !== null) {
        this.snsUserId = args.snsUserId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.contact = new ttypes.Contact();
          this.contact.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.snsIdType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.snsUserId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SnsFriendContactRegistration');
    if (this.contact !== null && this.contact !== undefined) {
      output.writeFieldBegin('contact', Thrift.Type.STRUCT, 1);
      this.contact.write(output);
      output.writeFieldEnd();
    }
    if (this.snsIdType !== null && this.snsIdType !== undefined) {
      output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
      output.writeI32(this.snsIdType);
      output.writeFieldEnd();
    }
    if (this.snsUserId !== null && this.snsUserId !== undefined) {
      output.writeFieldBegin('snsUserId', Thrift.Type.STRING, 3);
      output.writeString(this.snsUserId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SnsFriendModification = module.exports.SnsFriendModification = class {
  constructor(args) {
    this.type = null;
    this.snsFriend = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.snsFriend !== undefined && args.snsFriend !== null) {
        this.snsFriend = new ttypes.SnsFriend(args.snsFriend);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.snsFriend = new ttypes.SnsFriend();
          this.snsFriend.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SnsFriendModification');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.snsFriend !== null && this.snsFriend !== undefined) {
      output.writeFieldBegin('snsFriend', Thrift.Type.STRUCT, 2);
      this.snsFriend.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SnsFriends = module.exports.SnsFriends = class {
  constructor(args) {
    this.snsFriends = null;
    this.hasMore = null;
    if (args) {
      if (args.snsFriends !== undefined && args.snsFriends !== null) {
        this.snsFriends = Thrift.copyList(args.snsFriends, [ttypes.SnsFriend]);
      }
      if (args.hasMore !== undefined && args.hasMore !== null) {
        this.hasMore = args.hasMore;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.snsFriends = [];
          const _rtmp3448 = input.readListBegin();
          const _size447 = _rtmp3448.size || 0;
          for (let _i449 = 0; _i449 < _size447; ++_i449) {
            let elem450 = null;
            elem450 = new ttypes.SnsFriend();
            elem450.read(input);
            this.snsFriends.push(elem450);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.hasMore = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SnsFriends');
    if (this.snsFriends !== null && this.snsFriends !== undefined) {
      output.writeFieldBegin('snsFriends', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.snsFriends.length);
      for (let iter451 in this.snsFriends) {
        if (this.snsFriends.hasOwnProperty(iter451)) {
          iter451 = this.snsFriends[iter451];
          iter451.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.hasMore !== null && this.hasMore !== undefined) {
      output.writeFieldBegin('hasMore', Thrift.Type.BOOL, 2);
      output.writeBool(this.hasMore);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SnsIdUserStatus = module.exports.SnsIdUserStatus = class {
  constructor(args) {
    this.userExisting = null;
    this.phoneNumberRegistered = null;
    this.sameDevice = null;
    this.accountMigrationCheckType = null;
    if (args) {
      if (args.userExisting !== undefined && args.userExisting !== null) {
        this.userExisting = args.userExisting;
      }
      if (args.phoneNumberRegistered !== undefined && args.phoneNumberRegistered !== null) {
        this.phoneNumberRegistered = args.phoneNumberRegistered;
      }
      if (args.sameDevice !== undefined && args.sameDevice !== null) {
        this.sameDevice = args.sameDevice;
      }
      if (args.accountMigrationCheckType !== undefined && args.accountMigrationCheckType !== null) {
        this.accountMigrationCheckType = args.accountMigrationCheckType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.userExisting = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.phoneNumberRegistered = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.sameDevice = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.accountMigrationCheckType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SnsIdUserStatus');
    if (this.userExisting !== null && this.userExisting !== undefined) {
      output.writeFieldBegin('userExisting', Thrift.Type.BOOL, 1);
      output.writeBool(this.userExisting);
      output.writeFieldEnd();
    }
    if (this.phoneNumberRegistered !== null && this.phoneNumberRegistered !== undefined) {
      output.writeFieldBegin('phoneNumberRegistered', Thrift.Type.BOOL, 2);
      output.writeBool(this.phoneNumberRegistered);
      output.writeFieldEnd();
    }
    if (this.sameDevice !== null && this.sameDevice !== undefined) {
      output.writeFieldBegin('sameDevice', Thrift.Type.BOOL, 3);
      output.writeBool(this.sameDevice);
      output.writeFieldEnd();
    }
    if (this.accountMigrationCheckType !== null && this.accountMigrationCheckType !== undefined) {
      output.writeFieldBegin('accountMigrationCheckType', Thrift.Type.I32, 4);
      output.writeI32(this.accountMigrationCheckType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SnsProfile = module.exports.SnsProfile = class {
  constructor(args) {
    this.snsUserId = null;
    this.snsUserName = null;
    this.email = null;
    this.thumbnailUrl = null;
    if (args) {
      if (args.snsUserId !== undefined && args.snsUserId !== null) {
        this.snsUserId = args.snsUserId;
      }
      if (args.snsUserName !== undefined && args.snsUserName !== null) {
        this.snsUserName = args.snsUserName;
      }
      if (args.email !== undefined && args.email !== null) {
        this.email = args.email;
      }
      if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
        this.thumbnailUrl = args.thumbnailUrl;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.snsUserId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.snsUserName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.email = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.thumbnailUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SnsProfile');
    if (this.snsUserId !== null && this.snsUserId !== undefined) {
      output.writeFieldBegin('snsUserId', Thrift.Type.STRING, 1);
      output.writeString(this.snsUserId);
      output.writeFieldEnd();
    }
    if (this.snsUserName !== null && this.snsUserName !== undefined) {
      output.writeFieldBegin('snsUserName', Thrift.Type.STRING, 2);
      output.writeString(this.snsUserName);
      output.writeFieldEnd();
    }
    if (this.email !== null && this.email !== undefined) {
      output.writeFieldBegin('email', Thrift.Type.STRING, 3);
      output.writeString(this.email);
      output.writeFieldEnd();
    }
    if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
      output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 4);
      output.writeString(this.thumbnailUrl);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SpotItem = module.exports.SpotItem = class {
  constructor(args) {
    this.name = null;
    this.phone = null;
    this.category = null;
    this.mid = null;
    this.countryAreaCode = null;
    this.freePhoneCallable = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.phone !== undefined && args.phone !== null) {
        this.phone = args.phone;
      }
      if (args.category !== undefined && args.category !== null) {
        this.category = args.category;
      }
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.countryAreaCode !== undefined && args.countryAreaCode !== null) {
        this.countryAreaCode = args.countryAreaCode;
      }
      if (args.freePhoneCallable !== undefined && args.freePhoneCallable !== null) {
        this.freePhoneCallable = args.freePhoneCallable;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.phone = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.category = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.countryAreaCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.BOOL) {
          this.freePhoneCallable = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SpotItem');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.phone !== null && this.phone !== undefined) {
      output.writeFieldBegin('phone', Thrift.Type.STRING, 3);
      output.writeString(this.phone);
      output.writeFieldEnd();
    }
    if (this.category !== null && this.category !== undefined) {
      output.writeFieldBegin('category', Thrift.Type.I32, 4);
      output.writeI32(this.category);
      output.writeFieldEnd();
    }
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 5);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.countryAreaCode !== null && this.countryAreaCode !== undefined) {
      output.writeFieldBegin('countryAreaCode', Thrift.Type.STRING, 6);
      output.writeString(this.countryAreaCode);
      output.writeFieldEnd();
    }
    if (this.freePhoneCallable !== null && this.freePhoneCallable !== undefined) {
      output.writeFieldBegin('freePhoneCallable', Thrift.Type.BOOL, 10);
      output.writeBool(this.freePhoneCallable);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SpotNearbyItem = module.exports.SpotNearbyItem = class {
  constructor(args) {
    this.spotItem = null;
    this.location = null;
    if (args) {
      if (args.spotItem !== undefined && args.spotItem !== null) {
        this.spotItem = new ttypes.SpotItem(args.spotItem);
      }
      if (args.location !== undefined && args.location !== null) {
        this.location = new ttypes.Location(args.location);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.spotItem = new ttypes.SpotItem();
          this.spotItem.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRUCT) {
          this.location = new ttypes.Location();
          this.location.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SpotNearbyItem');
    if (this.spotItem !== null && this.spotItem !== undefined) {
      output.writeFieldBegin('spotItem', Thrift.Type.STRUCT, 2);
      this.spotItem.write(output);
      output.writeFieldEnd();
    }
    if (this.location !== null && this.location !== undefined) {
      output.writeFieldBegin('location', Thrift.Type.STRUCT, 11);
      this.location.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SpotNearbyResponse = module.exports.SpotNearbyResponse = class {
  constructor(args) {
    this.spotNearbyItems = null;
    if (args) {
      if (args.spotNearbyItems !== undefined && args.spotNearbyItems !== null) {
        this.spotNearbyItems = Thrift.copyList(args.spotNearbyItems, [ttypes.SpotNearbyItem]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.spotNearbyItems = [];
          const _rtmp3453 = input.readListBegin();
          const _size452 = _rtmp3453.size || 0;
          for (let _i454 = 0; _i454 < _size452; ++_i454) {
            let elem455 = null;
            elem455 = new ttypes.SpotNearbyItem();
            elem455.read(input);
            this.spotNearbyItems.push(elem455);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SpotNearbyResponse');
    if (this.spotNearbyItems !== null && this.spotNearbyItems !== undefined) {
      output.writeFieldBegin('spotNearbyItems', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.spotNearbyItems.length);
      for (let iter456 in this.spotNearbyItems) {
        if (this.spotNearbyItems.hasOwnProperty(iter456)) {
          iter456 = this.spotNearbyItems[iter456];
          iter456.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SpotPhoneNumberResponse = module.exports.SpotPhoneNumberResponse = class {
  constructor(args) {
    this.spotItems = null;
    if (args) {
      if (args.spotItems !== undefined && args.spotItems !== null) {
        this.spotItems = Thrift.copyList(args.spotItems, [ttypes.SpotItem]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.spotItems = [];
          const _rtmp3458 = input.readListBegin();
          const _size457 = _rtmp3458.size || 0;
          for (let _i459 = 0; _i459 < _size457; ++_i459) {
            let elem460 = null;
            elem460 = new ttypes.SpotItem();
            elem460.read(input);
            this.spotItems.push(elem460);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SpotPhoneNumberResponse');
    if (this.spotItems !== null && this.spotItems !== undefined) {
      output.writeFieldBegin('spotItems', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.spotItems.length);
      for (let iter461 in this.spotItems) {
        if (this.spotItems.hasOwnProperty(iter461)) {
          iter461 = this.spotItems[iter461];
          iter461.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const StickerIdRange = module.exports.StickerIdRange = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('StickerIdRange');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 1);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 2);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SuggestDictionary = module.exports.SuggestDictionary = class {
  constructor(args) {
    this.language = null;
    this.name = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SuggestDictionary');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 1);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SuggestDictionaryIncrements = module.exports.SuggestDictionaryIncrements = class {
  constructor(args) {
    this.itemIncrement = null;
    this.tagIncrements = null;
    if (args) {
      if (args.itemIncrement !== undefined && args.itemIncrement !== null) {
        this.itemIncrement = new ttypes.SuggestItemDictionaryIncrement(args.itemIncrement);
      }
      if (args.tagIncrements !== undefined && args.tagIncrements !== null) {
        this.tagIncrements = Thrift.copyList(args.tagIncrements, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.itemIncrement = new ttypes.SuggestItemDictionaryIncrement();
          this.itemIncrement.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.tagIncrements = [];
          const _rtmp3463 = input.readListBegin();
          const _size462 = _rtmp3463.size || 0;
          for (let _i464 = 0; _i464 < _size462; ++_i464) {
            let elem465 = null;
            elem465 = new ttypes.SuggestTagDictionaryIncrement();
            elem465.read(input);
            this.tagIncrements.push(elem465);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SuggestDictionaryIncrements');
    if (this.itemIncrement !== null && this.itemIncrement !== undefined) {
      output.writeFieldBegin('itemIncrement', Thrift.Type.STRUCT, 1);
      this.itemIncrement.write(output);
      output.writeFieldEnd();
    }
    if (this.tagIncrements !== null && this.tagIncrements !== undefined) {
      output.writeFieldBegin('tagIncrements', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.tagIncrements.length);
      for (let iter466 in this.tagIncrements) {
        if (this.tagIncrements.hasOwnProperty(iter466)) {
          iter466 = this.tagIncrements[iter466];
          iter466.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SuggestDictionaryRevisions = module.exports.SuggestDictionaryRevisions = class {
  constructor(args) {
    this.itemRevision = null;
    this.tagRevisions = null;
    if (args) {
      if (args.itemRevision !== undefined && args.itemRevision !== null) {
        this.itemRevision = new ttypes.SuggestItemDictionaryRevision(args.itemRevision);
      }
      if (args.tagRevisions !== undefined && args.tagRevisions !== null) {
        this.tagRevisions = Thrift.copyList(args.tagRevisions, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.itemRevision = new ttypes.SuggestItemDictionaryRevision();
          this.itemRevision.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.tagRevisions = [];
          const _rtmp3468 = input.readListBegin();
          const _size467 = _rtmp3468.size || 0;
          for (let _i469 = 0; _i469 < _size467; ++_i469) {
            let elem470 = null;
            elem470 = new ttypes.SuggestTagDictionaryRevision();
            elem470.read(input);
            this.tagRevisions.push(elem470);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SuggestDictionaryRevisions');
    if (this.itemRevision !== null && this.itemRevision !== undefined) {
      output.writeFieldBegin('itemRevision', Thrift.Type.STRUCT, 1);
      this.itemRevision.write(output);
      output.writeFieldEnd();
    }
    if (this.tagRevisions !== null && this.tagRevisions !== undefined) {
      output.writeFieldBegin('tagRevisions', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.tagRevisions.length);
      for (let iter471 in this.tagRevisions) {
        if (this.tagRevisions.hasOwnProperty(iter471)) {
          iter471 = this.tagRevisions[iter471];
          iter471.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SuggestDictionarySettings = module.exports.SuggestDictionarySettings = class {
  constructor(args) {
    this.revision = null;
    this.newRevision = null;
    this.dictionaries = null;
    this.preloadedDictionaries = null;
    if (args) {
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
      if (args.newRevision !== undefined && args.newRevision !== null) {
        this.newRevision = args.newRevision;
      }
      if (args.dictionaries !== undefined && args.dictionaries !== null) {
        this.dictionaries = Thrift.copyList(args.dictionaries, [ttypes.SuggestDictionary]);
      }
      if (args.preloadedDictionaries !== undefined && args.preloadedDictionaries !== null) {
        this.preloadedDictionaries = Thrift.copyList(args.preloadedDictionaries, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.newRevision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.dictionaries = [];
          const _rtmp3473 = input.readListBegin();
          const _size472 = _rtmp3473.size || 0;
          for (let _i474 = 0; _i474 < _size472; ++_i474) {
            let elem475 = null;
            elem475 = new ttypes.SuggestDictionary();
            elem475.read(input);
            this.dictionaries.push(elem475);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.preloadedDictionaries = [];
          const _rtmp3477 = input.readListBegin();
          const _size476 = _rtmp3477.size || 0;
          for (let _i478 = 0; _i478 < _size476; ++_i478) {
            let elem479 = null;
            elem479 = input.readString();
            this.preloadedDictionaries.push(elem479);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SuggestDictionarySettings');
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 1);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    if (this.newRevision !== null && this.newRevision !== undefined) {
      output.writeFieldBegin('newRevision', Thrift.Type.I64, 2);
      output.writeI64(this.newRevision);
      output.writeFieldEnd();
    }
    if (this.dictionaries !== null && this.dictionaries !== undefined) {
      output.writeFieldBegin('dictionaries', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.dictionaries.length);
      for (let iter480 in this.dictionaries) {
        if (this.dictionaries.hasOwnProperty(iter480)) {
          iter480 = this.dictionaries[iter480];
          iter480.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.preloadedDictionaries !== null && this.preloadedDictionaries !== undefined) {
      output.writeFieldBegin('preloadedDictionaries', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.preloadedDictionaries.length);
      for (let iter481 in this.preloadedDictionaries) {
        if (this.preloadedDictionaries.hasOwnProperty(iter481)) {
          iter481 = this.preloadedDictionaries[iter481];
          output.writeString(iter481);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SuggestItemDictionaryIncrement = module.exports.SuggestItemDictionaryIncrement = class {
  constructor(args) {
    this.status = null;
    this.revision = null;
    this.scheme = null;
    this.data = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
      if (args.scheme !== undefined && args.scheme !== null) {
        this.scheme = args.scheme;
      }
      if (args.data !== undefined && args.data !== null) {
        this.data = args.data;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.scheme = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.data = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SuggestItemDictionaryIncrement');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 1);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 2);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    if (this.scheme !== null && this.scheme !== undefined) {
      output.writeFieldBegin('scheme', Thrift.Type.STRING, 3);
      output.writeString(this.scheme);
      output.writeFieldEnd();
    }
    if (this.data !== null && this.data !== undefined) {
      output.writeFieldBegin('data', Thrift.Type.STRING, 4);
      output.writeBinary(this.data);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SuggestItemDictionaryRevision = module.exports.SuggestItemDictionaryRevision = class {
  constructor(args) {
    this.revision = null;
    this.scheme = null;
    if (args) {
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
      if (args.scheme !== undefined && args.scheme !== null) {
        this.scheme = args.scheme;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.scheme = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SuggestItemDictionaryRevision');
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 1);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    if (this.scheme !== null && this.scheme !== undefined) {
      output.writeFieldBegin('scheme', Thrift.Type.STRING, 2);
      output.writeString(this.scheme);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SuggestTagDictionaryIncrement = module.exports.SuggestTagDictionaryIncrement = class {
  constructor(args) {
    this.status = null;
    this.language = null;
    this.revision = null;
    this.scheme = null;
    this.data = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
      if (args.scheme !== undefined && args.scheme !== null) {
        this.scheme = args.scheme;
      }
      if (args.data !== undefined && args.data !== null) {
        this.data = args.data;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.scheme = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.data = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SuggestTagDictionaryIncrement');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 1);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 3);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    if (this.scheme !== null && this.scheme !== undefined) {
      output.writeFieldBegin('scheme', Thrift.Type.STRING, 4);
      output.writeString(this.scheme);
      output.writeFieldEnd();
    }
    if (this.data !== null && this.data !== undefined) {
      output.writeFieldBegin('data', Thrift.Type.STRING, 5);
      output.writeBinary(this.data);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SuggestTagDictionaryRevision = module.exports.SuggestTagDictionaryRevision = class {
  constructor(args) {
    this.language = null;
    this.revision = null;
    this.scheme = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
      if (args.scheme !== undefined && args.scheme !== null) {
        this.scheme = args.scheme;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.scheme = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SuggestTagDictionaryRevision');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 1);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 2);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    if (this.scheme !== null && this.scheme !== undefined) {
      output.writeFieldBegin('scheme', Thrift.Type.STRING, 3);
      output.writeString(this.scheme);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SyncParamContact = module.exports.SyncParamContact = class {
  constructor(args) {
    this.syncParamMid = null;
    this.contactStatus = null;
    if (args) {
      if (args.syncParamMid !== undefined && args.syncParamMid !== null) {
        this.syncParamMid = new ttypes.SyncParamMid(args.syncParamMid);
      }
      if (args.contactStatus !== undefined && args.contactStatus !== null) {
        this.contactStatus = args.contactStatus;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.syncParamMid = new ttypes.SyncParamMid();
          this.syncParamMid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.contactStatus = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SyncParamContact');
    if (this.syncParamMid !== null && this.syncParamMid !== undefined) {
      output.writeFieldBegin('syncParamMid', Thrift.Type.STRUCT, 1);
      this.syncParamMid.write(output);
      output.writeFieldEnd();
    }
    if (this.contactStatus !== null && this.contactStatus !== undefined) {
      output.writeFieldBegin('contactStatus', Thrift.Type.I32, 2);
      output.writeI32(this.contactStatus);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SyncParamMid = module.exports.SyncParamMid = class {
  constructor(args) {
    this.mid = null;
    this.diff = null;
    this.revision = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.diff !== undefined && args.diff !== null) {
        this.diff = args.diff;
      }
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.diff = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SyncParamMid');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.diff !== null && this.diff !== undefined) {
      output.writeFieldBegin('diff', Thrift.Type.I32, 2);
      output.writeI32(this.diff);
      output.writeFieldEnd();
    }
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 3);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SyncRelations = module.exports.SyncRelations = class {
  constructor(args) {
    this.syncAll = null;
    this.syncParamContact = null;
    this.syncParamMid = null;
    if (args) {
      if (args.syncAll !== undefined && args.syncAll !== null) {
        this.syncAll = args.syncAll;
      }
      if (args.syncParamContact !== undefined && args.syncParamContact !== null) {
        this.syncParamContact = Thrift.copyList(args.syncParamContact, [ttypes.SyncParamContact]);
      }
      if (args.syncParamMid !== undefined && args.syncParamMid !== null) {
        this.syncParamMid = Thrift.copyList(args.syncParamMid, [ttypes.SyncParamMid]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.syncAll = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.syncParamContact = [];
          const _rtmp3483 = input.readListBegin();
          const _size482 = _rtmp3483.size || 0;
          for (let _i484 = 0; _i484 < _size482; ++_i484) {
            let elem485 = null;
            elem485 = new ttypes.SyncParamContact();
            elem485.read(input);
            this.syncParamContact.push(elem485);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.syncParamMid = [];
          const _rtmp3487 = input.readListBegin();
          const _size486 = _rtmp3487.size || 0;
          for (let _i488 = 0; _i488 < _size486; ++_i488) {
            let elem489 = null;
            elem489 = new ttypes.SyncParamMid();
            elem489.read(input);
            this.syncParamMid.push(elem489);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SyncRelations');
    if (this.syncAll !== null && this.syncAll !== undefined) {
      output.writeFieldBegin('syncAll', Thrift.Type.BOOL, 1);
      output.writeBool(this.syncAll);
      output.writeFieldEnd();
    }
    if (this.syncParamContact !== null && this.syncParamContact !== undefined) {
      output.writeFieldBegin('syncParamContact', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.syncParamContact.length);
      for (let iter490 in this.syncParamContact) {
        if (this.syncParamContact.hasOwnProperty(iter490)) {
          iter490 = this.syncParamContact[iter490];
          iter490.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.syncParamMid !== null && this.syncParamMid !== undefined) {
      output.writeFieldBegin('syncParamMid', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.syncParamMid.length);
      for (let iter491 in this.syncParamMid) {
        if (this.syncParamMid.hasOwnProperty(iter491)) {
          iter491 = this.syncParamMid[iter491];
          iter491.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SyncScope = module.exports.SyncScope = class {
  constructor(args) {
    this.syncProfile = null;
    this.syncSettings = null;
    this.syncSticker = null;
    this.syncThemeShop = null;
    this.contact = null;
    this.group = null;
    this.room = null;
    this.chat = null;
    if (args) {
      if (args.syncProfile !== undefined && args.syncProfile !== null) {
        this.syncProfile = args.syncProfile;
      }
      if (args.syncSettings !== undefined && args.syncSettings !== null) {
        this.syncSettings = args.syncSettings;
      }
      if (args.syncSticker !== undefined && args.syncSticker !== null) {
        this.syncSticker = args.syncSticker;
      }
      if (args.syncThemeShop !== undefined && args.syncThemeShop !== null) {
        this.syncThemeShop = args.syncThemeShop;
      }
      if (args.contact !== undefined && args.contact !== null) {
        this.contact = new ttypes.SyncRelations(args.contact);
      }
      if (args.group !== undefined && args.group !== null) {
        this.group = new ttypes.SyncRelations(args.group);
      }
      if (args.room !== undefined && args.room !== null) {
        this.room = new ttypes.SyncRelations(args.room);
      }
      if (args.chat !== undefined && args.chat !== null) {
        this.chat = new ttypes.SyncRelations(args.chat);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.syncProfile = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.syncSettings = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.syncSticker = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.syncThemeShop = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRUCT) {
          this.contact = new ttypes.SyncRelations();
          this.contact.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRUCT) {
          this.group = new ttypes.SyncRelations();
          this.group.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRUCT) {
          this.room = new ttypes.SyncRelations();
          this.room.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRUCT) {
          this.chat = new ttypes.SyncRelations();
          this.chat.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SyncScope');
    if (this.syncProfile !== null && this.syncProfile !== undefined) {
      output.writeFieldBegin('syncProfile', Thrift.Type.BOOL, 1);
      output.writeBool(this.syncProfile);
      output.writeFieldEnd();
    }
    if (this.syncSettings !== null && this.syncSettings !== undefined) {
      output.writeFieldBegin('syncSettings', Thrift.Type.BOOL, 2);
      output.writeBool(this.syncSettings);
      output.writeFieldEnd();
    }
    if (this.syncSticker !== null && this.syncSticker !== undefined) {
      output.writeFieldBegin('syncSticker', Thrift.Type.BOOL, 3);
      output.writeBool(this.syncSticker);
      output.writeFieldEnd();
    }
    if (this.syncThemeShop !== null && this.syncThemeShop !== undefined) {
      output.writeFieldBegin('syncThemeShop', Thrift.Type.BOOL, 4);
      output.writeBool(this.syncThemeShop);
      output.writeFieldEnd();
    }
    if (this.contact !== null && this.contact !== undefined) {
      output.writeFieldBegin('contact', Thrift.Type.STRUCT, 10);
      this.contact.write(output);
      output.writeFieldEnd();
    }
    if (this.group !== null && this.group !== undefined) {
      output.writeFieldBegin('group', Thrift.Type.STRUCT, 11);
      this.group.write(output);
      output.writeFieldEnd();
    }
    if (this.room !== null && this.room !== undefined) {
      output.writeFieldBegin('room', Thrift.Type.STRUCT, 12);
      this.room.write(output);
      output.writeFieldEnd();
    }
    if (this.chat !== null && this.chat !== undefined) {
      output.writeFieldBegin('chat', Thrift.Type.STRUCT, 13);
      this.chat.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SystemConfiguration = module.exports.SystemConfiguration = class {
  constructor(args) {
    this.endpoint = null;
    this.endpointSsl = null;
    this.updateUrl = null;
    this.c2dmAccount = null;
    this.nniServer = null;
    if (args) {
      if (args.endpoint !== undefined && args.endpoint !== null) {
        this.endpoint = args.endpoint;
      }
      if (args.endpointSsl !== undefined && args.endpointSsl !== null) {
        this.endpointSsl = args.endpointSsl;
      }
      if (args.updateUrl !== undefined && args.updateUrl !== null) {
        this.updateUrl = args.updateUrl;
      }
      if (args.c2dmAccount !== undefined && args.c2dmAccount !== null) {
        this.c2dmAccount = args.c2dmAccount;
      }
      if (args.nniServer !== undefined && args.nniServer !== null) {
        this.nniServer = args.nniServer;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.endpoint = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.endpointSsl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.updateUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.c2dmAccount = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.nniServer = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SystemConfiguration');
    if (this.endpoint !== null && this.endpoint !== undefined) {
      output.writeFieldBegin('endpoint', Thrift.Type.STRING, 1);
      output.writeString(this.endpoint);
      output.writeFieldEnd();
    }
    if (this.endpointSsl !== null && this.endpointSsl !== undefined) {
      output.writeFieldBegin('endpointSsl', Thrift.Type.STRING, 2);
      output.writeString(this.endpointSsl);
      output.writeFieldEnd();
    }
    if (this.updateUrl !== null && this.updateUrl !== undefined) {
      output.writeFieldBegin('updateUrl', Thrift.Type.STRING, 3);
      output.writeString(this.updateUrl);
      output.writeFieldEnd();
    }
    if (this.c2dmAccount !== null && this.c2dmAccount !== undefined) {
      output.writeFieldBegin('c2dmAccount', Thrift.Type.STRING, 11);
      output.writeString(this.c2dmAccount);
      output.writeFieldEnd();
    }
    if (this.nniServer !== null && this.nniServer !== undefined) {
      output.writeFieldBegin('nniServer', Thrift.Type.STRING, 12);
      output.writeString(this.nniServer);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TalkException = module.exports.TalkException = class extends Thrift.TException {
  constructor(args) {
    super(args);
    this.name = "TalkException";
    this.code = null;
    this.reason = null;
    this.parameterMap = null;
    if (args) {
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.reason !== undefined && args.reason !== null) {
        this.reason = args.reason;
      }
      if (args.parameterMap !== undefined && args.parameterMap !== null) {
        this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.code = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.reason = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.MAP) {
          this.parameterMap = {};
          const _rtmp3493 = input.readMapBegin();
          const _size492 = _rtmp3493.size || 0;
          for (let _i494 = 0; _i494 < _size492; ++_i494) {
            let key495 = null;
            let val496 = null;
            key495 = input.readString();
            val496 = input.readString();
            this.parameterMap[key495] = val496;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TalkException');
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.I32, 1);
      output.writeI32(this.code);
      output.writeFieldEnd();
    }
    if (this.reason !== null && this.reason !== undefined) {
      output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
      output.writeString(this.reason);
      output.writeFieldEnd();
    }
    if (this.parameterMap !== null && this.parameterMap !== undefined) {
      output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
      for (let kiter497 in this.parameterMap) {
        if (this.parameterMap.hasOwnProperty(kiter497)) {
          let viter498 = this.parameterMap[kiter497];
          output.writeString(kiter497);
          output.writeString(viter498);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Ticket = module.exports.Ticket = class {
  constructor(args) {
    this.id = null;
    this.expirationTime = null;
    this.maxUseCount = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.expirationTime !== undefined && args.expirationTime !== null) {
        this.expirationTime = args.expirationTime;
      }
      if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
        this.maxUseCount = args.maxUseCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I64) {
          this.expirationTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.I32) {
          this.maxUseCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Ticket');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.expirationTime !== null && this.expirationTime !== undefined) {
      output.writeFieldBegin('expirationTime', Thrift.Type.I64, 10);
      output.writeI64(this.expirationTime);
      output.writeFieldEnd();
    }
    if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
      output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 21);
      output.writeI32(this.maxUseCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TMessageBox = module.exports.TMessageBox = class {
  constructor(args) {
    this.id = null;
    this.channelId = null;
    this.lastSeq = null;
    this.unreadCount = null;
    this.lastModifiedTime = null;
    this.status = null;
    this.midType = null;
    this.lastMessages = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.channelId !== undefined && args.channelId !== null) {
        this.channelId = args.channelId;
      }
      if (args.lastSeq !== undefined && args.lastSeq !== null) {
        this.lastSeq = args.lastSeq;
      }
      if (args.unreadCount !== undefined && args.unreadCount !== null) {
        this.unreadCount = args.unreadCount;
      }
      if (args.lastModifiedTime !== undefined && args.lastModifiedTime !== null) {
        this.lastModifiedTime = args.lastModifiedTime;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.midType !== undefined && args.midType !== null) {
        this.midType = args.midType;
      }
      if (args.lastMessages !== undefined && args.lastMessages !== null) {
        this.lastMessages = Thrift.copyList(args.lastMessages, [ttypes.Message]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.channelId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.lastSeq = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.unreadCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.lastModifiedTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I32) {
          this.midType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.LIST) {
          this.lastMessages = [];
          const _rtmp3500 = input.readListBegin();
          const _size499 = _rtmp3500.size || 0;
          for (let _i501 = 0; _i501 < _size499; ++_i501) {
            let elem502 = null;
            elem502 = new ttypes.Message();
            elem502.read(input);
            this.lastMessages.push(elem502);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TMessageBox');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.channelId !== null && this.channelId !== undefined) {
      output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
      output.writeString(this.channelId);
      output.writeFieldEnd();
    }
    if (this.lastSeq !== null && this.lastSeq !== undefined) {
      output.writeFieldBegin('lastSeq', Thrift.Type.I64, 5);
      output.writeI64(this.lastSeq);
      output.writeFieldEnd();
    }
    if (this.unreadCount !== null && this.unreadCount !== undefined) {
      output.writeFieldBegin('unreadCount', Thrift.Type.I64, 6);
      output.writeI64(this.unreadCount);
      output.writeFieldEnd();
    }
    if (this.lastModifiedTime !== null && this.lastModifiedTime !== undefined) {
      output.writeFieldBegin('lastModifiedTime', Thrift.Type.I64, 7);
      output.writeI64(this.lastModifiedTime);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 8);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.midType !== null && this.midType !== undefined) {
      output.writeFieldBegin('midType', Thrift.Type.I32, 9);
      output.writeI32(this.midType);
      output.writeFieldEnd();
    }
    if (this.lastMessages !== null && this.lastMessages !== undefined) {
      output.writeFieldBegin('lastMessages', Thrift.Type.LIST, 10);
      output.writeListBegin(Thrift.Type.STRUCT, this.lastMessages.length);
      for (let iter503 in this.lastMessages) {
        if (this.lastMessages.hasOwnProperty(iter503)) {
          iter503 = this.lastMessages[iter503];
          iter503.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TMessageBoxWrapUp = module.exports.TMessageBoxWrapUp = class {
  constructor(args) {
    this.messageBox = null;
    this.name = null;
    this.contacts = null;
    this.pictureRevision = null;
    if (args) {
      if (args.messageBox !== undefined && args.messageBox !== null) {
        this.messageBox = new ttypes.TMessageBox(args.messageBox);
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.contacts !== undefined && args.contacts !== null) {
        this.contacts = Thrift.copyList(args.contacts, [ttypes.Contact]);
      }
      if (args.pictureRevision !== undefined && args.pictureRevision !== null) {
        this.pictureRevision = args.pictureRevision;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.messageBox = new ttypes.TMessageBox();
          this.messageBox.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.contacts = [];
          const _rtmp3505 = input.readListBegin();
          const _size504 = _rtmp3505.size || 0;
          for (let _i506 = 0; _i506 < _size504; ++_i506) {
            let elem507 = null;
            elem507 = new ttypes.Contact();
            elem507.read(input);
            this.contacts.push(elem507);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.pictureRevision = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TMessageBoxWrapUp');
    if (this.messageBox !== null && this.messageBox !== undefined) {
      output.writeFieldBegin('messageBox', Thrift.Type.STRUCT, 1);
      this.messageBox.write(output);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.contacts !== null && this.contacts !== undefined) {
      output.writeFieldBegin('contacts', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.contacts.length);
      for (let iter508 in this.contacts) {
        if (this.contacts.hasOwnProperty(iter508)) {
          iter508 = this.contacts[iter508];
          iter508.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.pictureRevision !== null && this.pictureRevision !== undefined) {
      output.writeFieldBegin('pictureRevision', Thrift.Type.STRING, 4);
      output.writeString(this.pictureRevision);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TMessageBoxWrapUpResponse = module.exports.TMessageBoxWrapUpResponse = class {
  constructor(args) {
    this.messageBoxWrapUpList = null;
    this.totalSize = null;
    if (args) {
      if (args.messageBoxWrapUpList !== undefined && args.messageBoxWrapUpList !== null) {
        this.messageBoxWrapUpList = Thrift.copyList(args.messageBoxWrapUpList, [ttypes.TMessageBoxWrapUp]);
      }
      if (args.totalSize !== undefined && args.totalSize !== null) {
        this.totalSize = args.totalSize;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.messageBoxWrapUpList = [];
          const _rtmp3510 = input.readListBegin();
          const _size509 = _rtmp3510.size || 0;
          for (let _i511 = 0; _i511 < _size509; ++_i511) {
            let elem512 = null;
            elem512 = new ttypes.TMessageBoxWrapUp();
            elem512.read(input);
            this.messageBoxWrapUpList.push(elem512);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.totalSize = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TMessageBoxWrapUpResponse');
    if (this.messageBoxWrapUpList !== null && this.messageBoxWrapUpList !== undefined) {
      output.writeFieldBegin('messageBoxWrapUpList', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.messageBoxWrapUpList.length);
      for (let iter513 in this.messageBoxWrapUpList) {
        if (this.messageBoxWrapUpList.hasOwnProperty(iter513)) {
          iter513 = this.messageBoxWrapUpList[iter513];
          iter513.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.totalSize !== null && this.totalSize !== undefined) {
      output.writeFieldBegin('totalSize', Thrift.Type.I32, 2);
      output.writeI32(this.totalSize);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TMessageReadRange = module.exports.TMessageReadRange = class {
  constructor(args) {
    this.chatId = null;
    this.ranges = null;
    if (args) {
      if (args.chatId !== undefined && args.chatId !== null) {
        this.chatId = args.chatId;
      }
      if (args.ranges !== undefined && args.ranges !== null) {
        this.ranges = Thrift.copyMap(args.ranges, [Thrift.copyList, null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.chatId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.MAP) {
          this.ranges = {};
          const _rtmp3515 = input.readMapBegin();
          const _size514 = _rtmp3515.size || 0;
          for (let _i516 = 0; _i516 < _size514; ++_i516) {
            let key517 = null;
            let val518 = null;
            key517 = input.readString();
            val518 = [];
            const _rtmp3520 = input.readListBegin();
            const _size519 = _rtmp3520.size || 0;
            for (let _i521 = 0; _i521 < _size519; ++_i521) {
              let elem522 = null;
              elem522 = new ttypes.TMessageReadRangeEntry();
              elem522.read(input);
              val518.push(elem522);
            }
            input.readListEnd();
            this.ranges[key517] = val518;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TMessageReadRange');
    if (this.chatId !== null && this.chatId !== undefined) {
      output.writeFieldBegin('chatId', Thrift.Type.STRING, 1);
      output.writeString(this.chatId);
      output.writeFieldEnd();
    }
    if (this.ranges !== null && this.ranges !== undefined) {
      output.writeFieldBegin('ranges', Thrift.Type.MAP, 2);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.ranges));
      for (let kiter523 in this.ranges) {
        if (this.ranges.hasOwnProperty(kiter523)) {
          let viter524 = this.ranges[kiter523];
          output.writeString(kiter523);
          output.writeListBegin(Thrift.Type.STRUCT, viter524.length);
          for (let iter525 in viter524) {
            if (viter524.hasOwnProperty(iter525)) {
              iter525 = viter524[iter525];
              iter525.write(output);
            }
          }
          output.writeListEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TMessageReadRangeEntry = module.exports.TMessageReadRangeEntry = class {
  constructor(args) {
    this.startMessageId = null;
    this.endMessageId = null;
    this.startTime = null;
    this.endTime = null;
    if (args) {
      if (args.startMessageId !== undefined && args.startMessageId !== null) {
        this.startMessageId = args.startMessageId;
      }
      if (args.endMessageId !== undefined && args.endMessageId !== null) {
        this.endMessageId = args.endMessageId;
      }
      if (args.startTime !== undefined && args.startTime !== null) {
        this.startTime = args.startTime;
      }
      if (args.endTime !== undefined && args.endTime !== null) {
        this.endTime = args.endTime;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.startMessageId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.endMessageId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.startTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.endTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TMessageReadRangeEntry');
    if (this.startMessageId !== null && this.startMessageId !== undefined) {
      output.writeFieldBegin('startMessageId', Thrift.Type.I64, 1);
      output.writeI64(this.startMessageId);
      output.writeFieldEnd();
    }
    if (this.endMessageId !== null && this.endMessageId !== undefined) {
      output.writeFieldBegin('endMessageId', Thrift.Type.I64, 2);
      output.writeI64(this.endMessageId);
      output.writeFieldEnd();
    }
    if (this.startTime !== null && this.startTime !== undefined) {
      output.writeFieldBegin('startTime', Thrift.Type.I64, 3);
      output.writeI64(this.startTime);
      output.writeFieldEnd();
    }
    if (this.endTime !== null && this.endTime !== undefined) {
      output.writeFieldBegin('endTime', Thrift.Type.I64, 4);
      output.writeI64(this.endTime);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const UnregisterBuddyResult = module.exports.UnregisterBuddyResult = class {
  constructor(args) {
    this.requestId = null;
    this.state = null;
    this.eventNo = null;
    this.message = null;
    this.timestamp = null;
    this.subscriberCountToRemove = null;
    this.subscriberCountRemoved = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.state !== undefined && args.state !== null) {
        this.state = args.state;
      }
      if (args.eventNo !== undefined && args.eventNo !== null) {
        this.eventNo = args.eventNo;
      }
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.subscriberCountToRemove !== undefined && args.subscriberCountToRemove !== null) {
        this.subscriberCountToRemove = args.subscriberCountToRemove;
      }
      if (args.subscriberCountRemoved !== undefined && args.subscriberCountRemoved !== null) {
        this.subscriberCountRemoved = args.subscriberCountRemoved;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.state = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.eventNo = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.subscriberCountToRemove = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.subscriberCountRemoved = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('UnregisterBuddyResult');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.state !== null && this.state !== undefined) {
      output.writeFieldBegin('state', Thrift.Type.I32, 2);
      output.writeI32(this.state);
      output.writeFieldEnd();
    }
    if (this.eventNo !== null && this.eventNo !== undefined) {
      output.writeFieldBegin('eventNo', Thrift.Type.I32, 3);
      output.writeI32(this.eventNo);
      output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 4);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.subscriberCountToRemove !== null && this.subscriberCountToRemove !== undefined) {
      output.writeFieldBegin('subscriberCountToRemove', Thrift.Type.I64, 6);
      output.writeI64(this.subscriberCountToRemove);
      output.writeFieldEnd();
    }
    if (this.subscriberCountRemoved !== null && this.subscriberCountRemoved !== undefined) {
      output.writeFieldBegin('subscriberCountRemoved', Thrift.Type.I64, 7);
      output.writeI64(this.subscriberCountRemoved);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const UpdateBuddyProfileResult = module.exports.UpdateBuddyProfileResult = class {
  constructor(args) {
    this.requestId = null;
    this.state = null;
    this.eventNo = null;
    this.receiverCount = null;
    this.successCount = null;
    this.failCount = null;
    this.cancelCount = null;
    this.unregisterCount = null;
    this.timestamp = null;
    this.message = null;
    this.urlhash = null;
    if (args) {
      if (args.requestId !== undefined && args.requestId !== null) {
        this.requestId = args.requestId;
      }
      if (args.state !== undefined && args.state !== null) {
        this.state = args.state;
      }
      if (args.eventNo !== undefined && args.eventNo !== null) {
        this.eventNo = args.eventNo;
      }
      if (args.receiverCount !== undefined && args.receiverCount !== null) {
        this.receiverCount = args.receiverCount;
      }
      if (args.successCount !== undefined && args.successCount !== null) {
        this.successCount = args.successCount;
      }
      if (args.failCount !== undefined && args.failCount !== null) {
        this.failCount = args.failCount;
      }
      if (args.cancelCount !== undefined && args.cancelCount !== null) {
        this.cancelCount = args.cancelCount;
      }
      if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
        this.unregisterCount = args.unregisterCount;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      }
      if (args.urlhash !== undefined && args.urlhash !== null) {
        this.urlhash = args.urlhash;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.state = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.eventNo = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.receiverCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I64) {
          this.successCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I64) {
          this.failCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I64) {
          this.cancelCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.I64) {
          this.unregisterCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.STRING) {
          this.urlhash = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('UpdateBuddyProfileResult');
    if (this.requestId !== null && this.requestId !== undefined) {
      output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
      output.writeString(this.requestId);
      output.writeFieldEnd();
    }
    if (this.state !== null && this.state !== undefined) {
      output.writeFieldBegin('state', Thrift.Type.I32, 2);
      output.writeI32(this.state);
      output.writeFieldEnd();
    }
    if (this.eventNo !== null && this.eventNo !== undefined) {
      output.writeFieldBegin('eventNo', Thrift.Type.I32, 3);
      output.writeI32(this.eventNo);
      output.writeFieldEnd();
    }
    if (this.receiverCount !== null && this.receiverCount !== undefined) {
      output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
      output.writeI64(this.receiverCount);
      output.writeFieldEnd();
    }
    if (this.successCount !== null && this.successCount !== undefined) {
      output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
      output.writeI64(this.successCount);
      output.writeFieldEnd();
    }
    if (this.failCount !== null && this.failCount !== undefined) {
      output.writeFieldBegin('failCount', Thrift.Type.I64, 13);
      output.writeI64(this.failCount);
      output.writeFieldEnd();
    }
    if (this.cancelCount !== null && this.cancelCount !== undefined) {
      output.writeFieldBegin('cancelCount', Thrift.Type.I64, 14);
      output.writeI64(this.cancelCount);
      output.writeFieldEnd();
    }
    if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
      output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 15);
      output.writeI64(this.unregisterCount);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 21);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 22);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    if (this.urlhash !== null && this.urlhash !== undefined) {
      output.writeFieldBegin('urlhash', Thrift.Type.STRING, 23);
      output.writeString(this.urlhash);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const UserAuthStatus = module.exports.UserAuthStatus = class {
  constructor(args) {
    this.phoneNumberRegistered = null;
    this.registeredSnsIdTypes = null;
    this.accountMigrationCheckType = null;
    if (args) {
      if (args.phoneNumberRegistered !== undefined && args.phoneNumberRegistered !== null) {
        this.phoneNumberRegistered = args.phoneNumberRegistered;
      }
      if (args.registeredSnsIdTypes !== undefined && args.registeredSnsIdTypes !== null) {
        this.registeredSnsIdTypes = Thrift.copyList(args.registeredSnsIdTypes, [null]);
      }
      if (args.accountMigrationCheckType !== undefined && args.accountMigrationCheckType !== null) {
        this.accountMigrationCheckType = args.accountMigrationCheckType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.phoneNumberRegistered = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.registeredSnsIdTypes = [];
          const _rtmp3527 = input.readListBegin();
          const _size526 = _rtmp3527.size || 0;
          for (let _i528 = 0; _i528 < _size526; ++_i528) {
            let elem529 = null;
            elem529 = input.readI32();
            this.registeredSnsIdTypes.push(elem529);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.accountMigrationCheckType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('UserAuthStatus');
    if (this.phoneNumberRegistered !== null && this.phoneNumberRegistered !== undefined) {
      output.writeFieldBegin('phoneNumberRegistered', Thrift.Type.BOOL, 1);
      output.writeBool(this.phoneNumberRegistered);
      output.writeFieldEnd();
    }
    if (this.registeredSnsIdTypes !== null && this.registeredSnsIdTypes !== undefined) {
      output.writeFieldBegin('registeredSnsIdTypes', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I32, this.registeredSnsIdTypes.length);
      for (let iter530 in this.registeredSnsIdTypes) {
        if (this.registeredSnsIdTypes.hasOwnProperty(iter530)) {
          iter530 = this.registeredSnsIdTypes[iter530];
          output.writeI32(iter530);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.accountMigrationCheckType !== null && this.accountMigrationCheckType !== undefined) {
      output.writeFieldBegin('accountMigrationCheckType', Thrift.Type.I32, 3);
      output.writeI32(this.accountMigrationCheckType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const UserTicketResponse = module.exports.UserTicketResponse = class {
  constructor(args) {
    this.mid = null;
    this.userTicket = null;
    if (args) {
      if (args.mid !== undefined && args.mid !== null) {
        this.mid = args.mid;
      }
      if (args.userTicket !== undefined && args.userTicket !== null) {
        this.userTicket = args.userTicket;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.mid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userTicket = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('UserTicketResponse');
    if (this.mid !== null && this.mid !== undefined) {
      output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
      output.writeString(this.mid);
      output.writeFieldEnd();
    }
    if (this.userTicket !== null && this.userTicket !== undefined) {
      output.writeFieldBegin('userTicket', Thrift.Type.STRING, 2);
      output.writeString(this.userTicket);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ValidateContactsResult = module.exports.ValidateContactsResult = class {
  constructor(args) {
    this.receiverCount = null;
    this.successCount = null;
    this.blockCount = null;
    this.unregisterCount = null;
    this.unrelatedCount = null;
    this.failCount = null;
    if (args) {
      if (args.receiverCount !== undefined && args.receiverCount !== null) {
        this.receiverCount = args.receiverCount;
      }
      if (args.successCount !== undefined && args.successCount !== null) {
        this.successCount = args.successCount;
      }
      if (args.blockCount !== undefined && args.blockCount !== null) {
        this.blockCount = args.blockCount;
      }
      if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
        this.unregisterCount = args.unregisterCount;
      }
      if (args.unrelatedCount !== undefined && args.unrelatedCount !== null) {
        this.unrelatedCount = args.unrelatedCount;
      }
      if (args.failCount !== undefined && args.failCount !== null) {
        this.failCount = args.failCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.receiverCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I64) {
          this.successCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I64) {
          this.blockCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I64) {
          this.unregisterCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.I64) {
          this.unrelatedCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.I64) {
          this.failCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ValidateContactsResult');
    if (this.receiverCount !== null && this.receiverCount !== undefined) {
      output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
      output.writeI64(this.receiverCount);
      output.writeFieldEnd();
    }
    if (this.successCount !== null && this.successCount !== undefined) {
      output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
      output.writeI64(this.successCount);
      output.writeFieldEnd();
    }
    if (this.blockCount !== null && this.blockCount !== undefined) {
      output.writeFieldBegin('blockCount', Thrift.Type.I64, 13);
      output.writeI64(this.blockCount);
      output.writeFieldEnd();
    }
    if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
      output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 14);
      output.writeI64(this.unregisterCount);
      output.writeFieldEnd();
    }
    if (this.unrelatedCount !== null && this.unrelatedCount !== undefined) {
      output.writeFieldBegin('unrelatedCount', Thrift.Type.I64, 15);
      output.writeI64(this.unrelatedCount);
      output.writeFieldEnd();
    }
    if (this.failCount !== null && this.failCount !== undefined) {
      output.writeFieldBegin('failCount', Thrift.Type.I64, 16);
      output.writeI64(this.failCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const VerificationSessionData = module.exports.VerificationSessionData = class {
  constructor(args) {
    this.sessionId = null;
    this.method = null;
    this.callback = null;
    this.normalizedPhone = null;
    this.countryCode = null;
    this.nationalSignificantNumber = null;
    this.availableVerificationMethods = null;
    this.callerIdMask = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
      if (args.method !== undefined && args.method !== null) {
        this.method = args.method;
      }
      if (args.callback !== undefined && args.callback !== null) {
        this.callback = args.callback;
      }
      if (args.normalizedPhone !== undefined && args.normalizedPhone !== null) {
        this.normalizedPhone = args.normalizedPhone;
      }
      if (args.countryCode !== undefined && args.countryCode !== null) {
        this.countryCode = args.countryCode;
      }
      if (args.nationalSignificantNumber !== undefined && args.nationalSignificantNumber !== null) {
        this.nationalSignificantNumber = args.nationalSignificantNumber;
      }
      if (args.availableVerificationMethods !== undefined && args.availableVerificationMethods !== null) {
        this.availableVerificationMethods = Thrift.copyList(args.availableVerificationMethods, [null]);
      }
      if (args.callerIdMask !== undefined && args.callerIdMask !== null) {
        this.callerIdMask = args.callerIdMask;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.method = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.callback = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.normalizedPhone = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.countryCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.nationalSignificantNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.LIST) {
          this.availableVerificationMethods = [];
          const _rtmp3532 = input.readListBegin();
          const _size531 = _rtmp3532.size || 0;
          for (let _i533 = 0; _i533 < _size531; ++_i533) {
            let elem534 = null;
            elem534 = input.readI32();
            this.availableVerificationMethods.push(elem534);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.callerIdMask = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('VerificationSessionData');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    if (this.method !== null && this.method !== undefined) {
      output.writeFieldBegin('method', Thrift.Type.I32, 2);
      output.writeI32(this.method);
      output.writeFieldEnd();
    }
    if (this.callback !== null && this.callback !== undefined) {
      output.writeFieldBegin('callback', Thrift.Type.STRING, 3);
      output.writeString(this.callback);
      output.writeFieldEnd();
    }
    if (this.normalizedPhone !== null && this.normalizedPhone !== undefined) {
      output.writeFieldBegin('normalizedPhone', Thrift.Type.STRING, 4);
      output.writeString(this.normalizedPhone);
      output.writeFieldEnd();
    }
    if (this.countryCode !== null && this.countryCode !== undefined) {
      output.writeFieldBegin('countryCode', Thrift.Type.STRING, 5);
      output.writeString(this.countryCode);
      output.writeFieldEnd();
    }
    if (this.nationalSignificantNumber !== null && this.nationalSignificantNumber !== undefined) {
      output.writeFieldBegin('nationalSignificantNumber', Thrift.Type.STRING, 6);
      output.writeString(this.nationalSignificantNumber);
      output.writeFieldEnd();
    }
    if (this.availableVerificationMethods !== null && this.availableVerificationMethods !== undefined) {
      output.writeFieldBegin('availableVerificationMethods', Thrift.Type.LIST, 7);
      output.writeListBegin(Thrift.Type.I32, this.availableVerificationMethods.length);
      for (let iter535 in this.availableVerificationMethods) {
        if (this.availableVerificationMethods.hasOwnProperty(iter535)) {
          iter535 = this.availableVerificationMethods[iter535];
          output.writeI32(iter535);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.callerIdMask !== null && this.callerIdMask !== undefined) {
      output.writeFieldBegin('callerIdMask', Thrift.Type.STRING, 8);
      output.writeString(this.callerIdMask);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const WapInvitation = module.exports.WapInvitation = class {
  constructor(args) {
    this.type = null;
    this.inviteeEmail = null;
    this.inviterMid = null;
    this.roomMid = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.inviteeEmail !== undefined && args.inviteeEmail !== null) {
        this.inviteeEmail = args.inviteeEmail;
      }
      if (args.inviterMid !== undefined && args.inviterMid !== null) {
        this.inviterMid = args.inviterMid;
      }
      if (args.roomMid !== undefined && args.roomMid !== null) {
        this.roomMid = args.roomMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.inviteeEmail = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.inviterMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.roomMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('WapInvitation');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.inviteeEmail !== null && this.inviteeEmail !== undefined) {
      output.writeFieldBegin('inviteeEmail', Thrift.Type.STRING, 10);
      output.writeString(this.inviteeEmail);
      output.writeFieldEnd();
    }
    if (this.inviterMid !== null && this.inviterMid !== undefined) {
      output.writeFieldBegin('inviterMid', Thrift.Type.STRING, 11);
      output.writeString(this.inviterMid);
      output.writeFieldEnd();
    }
    if (this.roomMid !== null && this.roomMid !== undefined) {
      output.writeFieldBegin('roomMid', Thrift.Type.STRING, 12);
      output.writeString(this.roomMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginQrCode_CreateQrSessionResponse = module.exports.LoginQrCode_CreateQrSessionResponse = class {
  constructor(args) {
    this.authSessionId = null;
    if (args) {
      if (args.authSessionId !== undefined && args.authSessionId !== null) {
        this.authSessionId = args.authSessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.authSessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginQrCode_CreateQrSessionResponse');
    if (this.authSessionId !== null && this.authSessionId !== undefined) {
      output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
      output.writeString(this.authSessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginQrCode_CreateQrCodeRequest = module.exports.LoginQrCode_CreateQrCodeRequest = class {
  constructor(args) {
    this.authSessionId = null;
    if (args) {
      if (args.authSessionId !== undefined && args.authSessionId !== null) {
        this.authSessionId = args.authSessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.authSessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginQrCode_CreateQrCodeRequest');
    if (this.authSessionId !== null && this.authSessionId !== undefined) {
      output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
      output.writeString(this.authSessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginQrCode_CreateQrCodeResponse = module.exports.LoginQrCode_CreateQrCodeResponse = class {
  constructor(args) {
    this.callbackUrl = null;
    if (args) {
      if (args.callbackUrl !== undefined && args.callbackUrl !== null) {
        this.callbackUrl = args.callbackUrl;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.callbackUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginQrCode_CreateQrCodeResponse');
    if (this.callbackUrl !== null && this.callbackUrl !== undefined) {
      output.writeFieldBegin('callbackUrl', Thrift.Type.STRING, 1);
      output.writeString(this.callbackUrl);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginQrCode_VerifyCertificateRequest = module.exports.LoginQrCode_VerifyCertificateRequest = class {
  constructor(args) {
    this.authSessionId = null;
    this.certificate = null;
    if (args) {
      if (args.authSessionId !== undefined && args.authSessionId !== null) {
        this.authSessionId = args.authSessionId;
      }
      if (args.certificate !== undefined && args.certificate !== null) {
        this.certificate = args.certificate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.authSessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.certificate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginQrCode_VerifyCertificateRequest');
    if (this.authSessionId !== null && this.authSessionId !== undefined) {
      output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
      output.writeString(this.authSessionId);
      output.writeFieldEnd();
    }
    if (this.certificate !== null && this.certificate !== undefined) {
      output.writeFieldBegin('certificate', Thrift.Type.STRING, 2);
      output.writeString(this.certificate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginQrCode_CreatePinCodeRequest = module.exports.LoginQrCode_CreatePinCodeRequest = class {
  constructor(args) {
    this.authSessionId = null;
    if (args) {
      if (args.authSessionId !== undefined && args.authSessionId !== null) {
        this.authSessionId = args.authSessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.authSessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginQrCode_CreatePinCodeRequest');
    if (this.authSessionId !== null && this.authSessionId !== undefined) {
      output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
      output.writeString(this.authSessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginQrCode_CreatePinCodeResponse = module.exports.LoginQrCode_CreatePinCodeResponse = class {
  constructor(args) {
    this.pinCode = null;
    if (args) {
      if (args.pinCode !== undefined && args.pinCode !== null) {
        this.pinCode = args.pinCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.pinCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginQrCode_CreatePinCodeResponse');
    if (this.pinCode !== null && this.pinCode !== undefined) {
      output.writeFieldBegin('pinCode', Thrift.Type.STRING, 1);
      output.writeString(this.pinCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginQrCode_QrCodeLoginRequest = module.exports.LoginQrCode_QrCodeLoginRequest = class {
  constructor(args) {
    this.authSessionId = null;
    this.systemName = null;
    this.autoLoginIsRequired = null;
    if (args) {
      if (args.authSessionId !== undefined && args.authSessionId !== null) {
        this.authSessionId = args.authSessionId;
      }
      if (args.systemName !== undefined && args.systemName !== null) {
        this.systemName = args.systemName;
      }
      if (args.autoLoginIsRequired !== undefined && args.autoLoginIsRequired !== null) {
        this.autoLoginIsRequired = args.autoLoginIsRequired;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.authSessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.systemName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.autoLoginIsRequired = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginQrCode_QrCodeLoginRequest');
    if (this.authSessionId !== null && this.authSessionId !== undefined) {
      output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
      output.writeString(this.authSessionId);
      output.writeFieldEnd();
    }
    if (this.systemName !== null && this.systemName !== undefined) {
      output.writeFieldBegin('systemName', Thrift.Type.STRING, 2);
      output.writeString(this.systemName);
      output.writeFieldEnd();
    }
    if (this.autoLoginIsRequired !== null && this.autoLoginIsRequired !== undefined) {
      output.writeFieldBegin('autoLoginIsRequired', Thrift.Type.BOOL, 3);
      output.writeBool(this.autoLoginIsRequired);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginQrCode_QrCodeLoginResponse = module.exports.LoginQrCode_QrCodeLoginResponse = class {
  constructor(args) {
    this.certificate = null;
    this.accessToken = null;
    this.lastBindTimestamp = null;
    this.metaData = null;
    if (args) {
      if (args.certificate !== undefined && args.certificate !== null) {
        this.certificate = args.certificate;
      }
      if (args.accessToken !== undefined && args.accessToken !== null) {
        this.accessToken = args.accessToken;
      }
      if (args.lastBindTimestamp !== undefined && args.lastBindTimestamp !== null) {
        this.lastBindTimestamp = args.lastBindTimestamp;
      }
      if (args.metaData !== undefined && args.metaData !== null) {
        this.metaData = args.metaData;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.certificate = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.accessToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.lastBindTimestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.metaData = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginQrCode_QrCodeLoginResponse');
    if (this.certificate !== null && this.certificate !== undefined) {
      output.writeFieldBegin('certificate', Thrift.Type.STRING, 1);
      output.writeString(this.certificate);
      output.writeFieldEnd();
    }
    if (this.accessToken !== null && this.accessToken !== undefined) {
      output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
      output.writeString(this.accessToken);
      output.writeFieldEnd();
    }
    if (this.lastBindTimestamp !== null && this.lastBindTimestamp !== undefined) {
      output.writeFieldBegin('lastBindTimestamp', Thrift.Type.STRING, 3);
      output.writeString(this.lastBindTimestamp);
      output.writeFieldEnd();
    }
    if (this.metaData !== null && this.metaData !== undefined) {
      output.writeFieldBegin('metaData', Thrift.Type.STRING, 4);
      output.writeString(this.metaData);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginQrCode_CheckQrCodeVerifiedRequest = module.exports.LoginQrCode_CheckQrCodeVerifiedRequest = class {
  constructor(args) {
    this.authSessionId = null;
    if (args) {
      if (args.authSessionId !== undefined && args.authSessionId !== null) {
        this.authSessionId = args.authSessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.authSessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginQrCode_CheckQrCodeVerifiedRequest');
    if (this.authSessionId !== null && this.authSessionId !== undefined) {
      output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
      output.writeString(this.authSessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const LoginQrCode_CheckPinCodeVerifiedRequest = module.exports.LoginQrCode_CheckPinCodeVerifiedRequest = class {
  constructor(args) {
    this.authSessionId = null;
    if (args) {
      if (args.authSessionId !== undefined && args.authSessionId !== null) {
        this.authSessionId = args.authSessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.authSessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LoginQrCode_CheckPinCodeVerifiedRequest');
    if (this.authSessionId !== null && this.authSessionId !== undefined) {
      output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 1);
      output.writeString(this.authSessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SecondaryQrCodeException = module.exports.SecondaryQrCodeException = class extends Thrift.TException {
  constructor(args) {
    super(args);
    this.name = "SecondaryQrCodeException";
    this.code = null;
    this.alertMessage = null;
    if (args) {
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.alertMessage !== undefined && args.alertMessage !== null) {
        this.alertMessage = args.alertMessage;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.code = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.alertMessage = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SecondaryQrCodeException');
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.I32, 1);
      output.writeI32(this.code);
      output.writeFieldEnd();
    }
    if (this.alertMessage !== null && this.alertMessage !== undefined) {
      output.writeFieldBegin('alertMessage', Thrift.Type.STRING, 2);
      output.writeString(this.alertMessage);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
