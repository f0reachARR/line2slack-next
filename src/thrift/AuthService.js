//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = require('./talk_types');
//HELPER FUNCTIONS AND STRUCTURES

const AuthService_normalizePhoneNumber_args = class {
  constructor(args) {
    this.countryCode = null;
    this.phoneNumber = null;
    this.countryCodeHint = null;
    if (args) {
      if (args.countryCode !== undefined && args.countryCode !== null) {
        this.countryCode = args.countryCode;
      }
      if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
        this.phoneNumber = args.phoneNumber;
      }
      if (args.countryCodeHint !== undefined && args.countryCodeHint !== null) {
        this.countryCodeHint = args.countryCodeHint;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.countryCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.phoneNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.countryCodeHint = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_normalizePhoneNumber_args');
    if (this.countryCode !== null && this.countryCode !== undefined) {
      output.writeFieldBegin('countryCode', Thrift.Type.STRING, 2);
      output.writeString(this.countryCode);
      output.writeFieldEnd();
    }
    if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
      output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 3);
      output.writeString(this.phoneNumber);
      output.writeFieldEnd();
    }
    if (this.countryCodeHint !== null && this.countryCodeHint !== undefined) {
      output.writeFieldBegin('countryCodeHint', Thrift.Type.STRING, 4);
      output.writeString(this.countryCodeHint);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_normalizePhoneNumber_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_normalizePhoneNumber_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_respondE2EELoginRequest_args = class {
  constructor(args) {
    this.verifier = null;
    this.publicKey = null;
    this.encryptedKeyChain = null;
    this.hashKeyChain = null;
    this.errorCode = null;
    if (args) {
      if (args.verifier !== undefined && args.verifier !== null) {
        this.verifier = args.verifier;
      }
      if (args.publicKey !== undefined && args.publicKey !== null) {
        this.publicKey = new ttypes.E2EEPublicKey(args.publicKey);
      }
      if (args.encryptedKeyChain !== undefined && args.encryptedKeyChain !== null) {
        this.encryptedKeyChain = args.encryptedKeyChain;
      }
      if (args.hashKeyChain !== undefined && args.hashKeyChain !== null) {
        this.hashKeyChain = args.hashKeyChain;
      }
      if (args.errorCode !== undefined && args.errorCode !== null) {
        this.errorCode = args.errorCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.verifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.publicKey = new ttypes.E2EEPublicKey();
          this.publicKey.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.encryptedKeyChain = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.hashKeyChain = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.errorCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_respondE2EELoginRequest_args');
    if (this.verifier !== null && this.verifier !== undefined) {
      output.writeFieldBegin('verifier', Thrift.Type.STRING, 1);
      output.writeString(this.verifier);
      output.writeFieldEnd();
    }
    if (this.publicKey !== null && this.publicKey !== undefined) {
      output.writeFieldBegin('publicKey', Thrift.Type.STRUCT, 2);
      this.publicKey.write(output);
      output.writeFieldEnd();
    }
    if (this.encryptedKeyChain !== null && this.encryptedKeyChain !== undefined) {
      output.writeFieldBegin('encryptedKeyChain', Thrift.Type.STRING, 3);
      output.writeBinary(this.encryptedKeyChain);
      output.writeFieldEnd();
    }
    if (this.hashKeyChain !== null && this.hashKeyChain !== undefined) {
      output.writeFieldBegin('hashKeyChain', Thrift.Type.STRING, 4);
      output.writeBinary(this.hashKeyChain);
      output.writeFieldEnd();
    }
    if (this.errorCode !== null && this.errorCode !== undefined) {
      output.writeFieldBegin('errorCode', Thrift.Type.I32, 5);
      output.writeI32(this.errorCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_respondE2EELoginRequest_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_respondE2EELoginRequest_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_confirmE2EELogin_args = class {
  constructor(args) {
    this.verifier = null;
    this.deviceSecret = null;
    if (args) {
      if (args.verifier !== undefined && args.verifier !== null) {
        this.verifier = args.verifier;
      }
      if (args.deviceSecret !== undefined && args.deviceSecret !== null) {
        this.deviceSecret = args.deviceSecret;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.verifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.deviceSecret = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_confirmE2EELogin_args');
    if (this.verifier !== null && this.verifier !== undefined) {
      output.writeFieldBegin('verifier', Thrift.Type.STRING, 1);
      output.writeString(this.verifier);
      output.writeFieldEnd();
    }
    if (this.deviceSecret !== null && this.deviceSecret !== undefined) {
      output.writeFieldBegin('deviceSecret', Thrift.Type.STRING, 2);
      output.writeBinary(this.deviceSecret);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_confirmE2EELogin_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_confirmE2EELogin_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_logoutZ_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_logoutZ_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_logoutZ_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_logoutZ_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_loginZ_args = class {
  constructor(args) {
    this.loginRequest = null;
    if (args) {
      if (args.loginRequest !== undefined && args.loginRequest !== null) {
        this.loginRequest = new ttypes.LoginRequest(args.loginRequest);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.loginRequest = new ttypes.LoginRequest();
          this.loginRequest.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_loginZ_args');
    if (this.loginRequest !== null && this.loginRequest !== undefined) {
      output.writeFieldBegin('loginRequest', Thrift.Type.STRUCT, 2);
      this.loginRequest.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_loginZ_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.LoginResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.LoginResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_loginZ_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_issueTokenForAccountMigrationSettings_args = class {
  constructor(args) {
    this.enforce = null;
    if (args) {
      if (args.enforce !== undefined && args.enforce !== null) {
        this.enforce = args.enforce;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.enforce = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_issueTokenForAccountMigrationSettings_args');
    if (this.enforce !== null && this.enforce !== undefined) {
      output.writeFieldBegin('enforce', Thrift.Type.BOOL, 2);
      output.writeBool(this.enforce);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_issueTokenForAccountMigrationSettings_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SecurityCenterResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SecurityCenterResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_issueTokenForAccountMigrationSettings_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_issueTokenForAccountMigration_args = class {
  constructor(args) {
    this.migrationSessionId = null;
    if (args) {
      if (args.migrationSessionId !== undefined && args.migrationSessionId !== null) {
        this.migrationSessionId = args.migrationSessionId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.migrationSessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_issueTokenForAccountMigration_args');
    if (this.migrationSessionId !== null && this.migrationSessionId !== undefined) {
      output.writeFieldBegin('migrationSessionId', Thrift.Type.STRING, 2);
      output.writeString(this.migrationSessionId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_issueTokenForAccountMigration_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SecurityCenterResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SecurityCenterResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_issueTokenForAccountMigration_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_verifyQrcodeWithE2EE_args = class {
  constructor(args) {
    this.verifier = null;
    this.pinCode = null;
    this.errorCode = null;
    this.publicKey = null;
    this.encryptedKeyChain = null;
    this.hashKeyChain = null;
    if (args) {
      if (args.verifier !== undefined && args.verifier !== null) {
        this.verifier = args.verifier;
      }
      if (args.pinCode !== undefined && args.pinCode !== null) {
        this.pinCode = args.pinCode;
      }
      if (args.errorCode !== undefined && args.errorCode !== null) {
        this.errorCode = args.errorCode;
      }
      if (args.publicKey !== undefined && args.publicKey !== null) {
        this.publicKey = new ttypes.E2EEPublicKey(args.publicKey);
      }
      if (args.encryptedKeyChain !== undefined && args.encryptedKeyChain !== null) {
        this.encryptedKeyChain = args.encryptedKeyChain;
      }
      if (args.hashKeyChain !== undefined && args.hashKeyChain !== null) {
        this.hashKeyChain = args.hashKeyChain;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.verifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.pinCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.errorCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.publicKey = new ttypes.E2EEPublicKey();
          this.publicKey.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.encryptedKeyChain = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.hashKeyChain = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_verifyQrcodeWithE2EE_args');
    if (this.verifier !== null && this.verifier !== undefined) {
      output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
      output.writeString(this.verifier);
      output.writeFieldEnd();
    }
    if (this.pinCode !== null && this.pinCode !== undefined) {
      output.writeFieldBegin('pinCode', Thrift.Type.STRING, 3);
      output.writeString(this.pinCode);
      output.writeFieldEnd();
    }
    if (this.errorCode !== null && this.errorCode !== undefined) {
      output.writeFieldBegin('errorCode', Thrift.Type.I32, 4);
      output.writeI32(this.errorCode);
      output.writeFieldEnd();
    }
    if (this.publicKey !== null && this.publicKey !== undefined) {
      output.writeFieldBegin('publicKey', Thrift.Type.STRUCT, 5);
      this.publicKey.write(output);
      output.writeFieldEnd();
    }
    if (this.encryptedKeyChain !== null && this.encryptedKeyChain !== undefined) {
      output.writeFieldBegin('encryptedKeyChain', Thrift.Type.STRING, 6);
      output.writeBinary(this.encryptedKeyChain);
      output.writeFieldEnd();
    }
    if (this.hashKeyChain !== null && this.hashKeyChain !== undefined) {
      output.writeFieldBegin('hashKeyChain', Thrift.Type.STRING, 7);
      output.writeBinary(this.hashKeyChain);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthService_verifyQrcodeWithE2EE_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AuthService_verifyQrcodeWithE2EE_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AuthServiceClient = exports.Client = class {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  normalizePhoneNumber (countryCode, phoneNumber, countryCodeHint) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_normalizePhoneNumber(countryCode, phoneNumber, countryCodeHint);
    });
  }

  send_normalizePhoneNumber (countryCode, phoneNumber, countryCodeHint) {
    const output = new this.pClass(this.output);
    const params = {
      countryCode: countryCode,
      phoneNumber: phoneNumber,
      countryCodeHint: countryCodeHint
    };
    const args = new AuthService_normalizePhoneNumber_args(params);
    try {
      output.writeMessageBegin('normalizePhoneNumber', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_normalizePhoneNumber (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AuthService_normalizePhoneNumber_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('normalizePhoneNumber failed: unknown result');
  }

  respondE2EELoginRequest (verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode);
    });
  }

  send_respondE2EELoginRequest (verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode) {
    const output = new this.pClass(this.output);
    const params = {
      verifier: verifier,
      publicKey: publicKey,
      encryptedKeyChain: encryptedKeyChain,
      hashKeyChain: hashKeyChain,
      errorCode: errorCode
    };
    const args = new AuthService_respondE2EELoginRequest_args(params);
    try {
      output.writeMessageBegin('respondE2EELoginRequest', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_respondE2EELoginRequest (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AuthService_respondE2EELoginRequest_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  confirmE2EELogin (verifier, deviceSecret) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_confirmE2EELogin(verifier, deviceSecret);
    });
  }

  send_confirmE2EELogin (verifier, deviceSecret) {
    const output = new this.pClass(this.output);
    const params = {
      verifier: verifier,
      deviceSecret: deviceSecret
    };
    const args = new AuthService_confirmE2EELogin_args(params);
    try {
      output.writeMessageBegin('confirmE2EELogin', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_confirmE2EELogin (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AuthService_confirmE2EELogin_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('confirmE2EELogin failed: unknown result');
  }

  logoutZ () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_logoutZ();
    });
  }

  send_logoutZ () {
    const output = new this.pClass(this.output);
    const args = new AuthService_logoutZ_args();
    try {
      output.writeMessageBegin('logoutZ', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_logoutZ (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AuthService_logoutZ_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  loginZ (loginRequest) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_loginZ(loginRequest);
    });
  }

  send_loginZ (loginRequest) {
    const output = new this.pClass(this.output);
    const params = {
      loginRequest: loginRequest
    };
    const args = new AuthService_loginZ_args(params);
    try {
      output.writeMessageBegin('loginZ', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_loginZ (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AuthService_loginZ_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('loginZ failed: unknown result');
  }

  issueTokenForAccountMigrationSettings (enforce) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_issueTokenForAccountMigrationSettings(enforce);
    });
  }

  send_issueTokenForAccountMigrationSettings (enforce) {
    const output = new this.pClass(this.output);
    const params = {
      enforce: enforce
    };
    const args = new AuthService_issueTokenForAccountMigrationSettings_args(params);
    try {
      output.writeMessageBegin('issueTokenForAccountMigrationSettings', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_issueTokenForAccountMigrationSettings (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AuthService_issueTokenForAccountMigrationSettings_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('issueTokenForAccountMigrationSettings failed: unknown result');
  }

  issueTokenForAccountMigration (migrationSessionId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_issueTokenForAccountMigration(migrationSessionId);
    });
  }

  send_issueTokenForAccountMigration (migrationSessionId) {
    const output = new this.pClass(this.output);
    const params = {
      migrationSessionId: migrationSessionId
    };
    const args = new AuthService_issueTokenForAccountMigration_args(params);
    try {
      output.writeMessageBegin('issueTokenForAccountMigration', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_issueTokenForAccountMigration (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AuthService_issueTokenForAccountMigration_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('issueTokenForAccountMigration failed: unknown result');
  }

  verifyQrcodeWithE2EE (verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain);
    });
  }

  send_verifyQrcodeWithE2EE (verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain) {
    const output = new this.pClass(this.output);
    const params = {
      verifier: verifier,
      pinCode: pinCode,
      errorCode: errorCode,
      publicKey: publicKey,
      encryptedKeyChain: encryptedKeyChain,
      hashKeyChain: hashKeyChain
    };
    const args = new AuthService_verifyQrcodeWithE2EE_args(params);
    try {
      output.writeMessageBegin('verifyQrcodeWithE2EE', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_verifyQrcodeWithE2EE (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AuthService_verifyQrcodeWithE2EE_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyQrcodeWithE2EE failed: unknown result');
  }
};
const AuthServiceProcessor = exports.Processor = class {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_normalizePhoneNumber (seqid, input, output) {
    const args = new AuthService_normalizePhoneNumber_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.normalizePhoneNumber.length === 3) {
      Promise.resolve(this._handler.normalizePhoneNumber.bind(this._handler)(
        args.countryCode,
        args.phoneNumber,
        args.countryCodeHint
      )).then(result => {
        const result_obj = new AuthService_normalizePhoneNumber_result({success: result});
        output.writeMessageBegin("normalizePhoneNumber", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AuthService_normalizePhoneNumber_result(err);
          output.writeMessageBegin("normalizePhoneNumber", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("normalizePhoneNumber", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.normalizePhoneNumber(args.countryCode, args.phoneNumber, args.countryCodeHint, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AuthService_normalizePhoneNumber_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("normalizePhoneNumber", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("normalizePhoneNumber", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_respondE2EELoginRequest (seqid, input, output) {
    const args = new AuthService_respondE2EELoginRequest_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.respondE2EELoginRequest.length === 5) {
      Promise.resolve(this._handler.respondE2EELoginRequest.bind(this._handler)(
        args.verifier,
        args.publicKey,
        args.encryptedKeyChain,
        args.hashKeyChain,
        args.errorCode
      )).then(result => {
        const result_obj = new AuthService_respondE2EELoginRequest_result({success: result});
        output.writeMessageBegin("respondE2EELoginRequest", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AuthService_respondE2EELoginRequest_result(err);
          output.writeMessageBegin("respondE2EELoginRequest", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("respondE2EELoginRequest", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.respondE2EELoginRequest(args.verifier, args.publicKey, args.encryptedKeyChain, args.hashKeyChain, args.errorCode, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AuthService_respondE2EELoginRequest_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("respondE2EELoginRequest", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("respondE2EELoginRequest", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_confirmE2EELogin (seqid, input, output) {
    const args = new AuthService_confirmE2EELogin_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.confirmE2EELogin.length === 2) {
      Promise.resolve(this._handler.confirmE2EELogin.bind(this._handler)(
        args.verifier,
        args.deviceSecret
      )).then(result => {
        const result_obj = new AuthService_confirmE2EELogin_result({success: result});
        output.writeMessageBegin("confirmE2EELogin", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AuthService_confirmE2EELogin_result(err);
          output.writeMessageBegin("confirmE2EELogin", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("confirmE2EELogin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.confirmE2EELogin(args.verifier, args.deviceSecret, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AuthService_confirmE2EELogin_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("confirmE2EELogin", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("confirmE2EELogin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_logoutZ (seqid, input, output) {
    const args = new AuthService_logoutZ_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.logoutZ.length === 0) {
      Promise.resolve(this._handler.logoutZ.bind(this._handler)(
      )).then(result => {
        const result_obj = new AuthService_logoutZ_result({success: result});
        output.writeMessageBegin("logoutZ", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AuthService_logoutZ_result(err);
          output.writeMessageBegin("logoutZ", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("logoutZ", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.logoutZ((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AuthService_logoutZ_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("logoutZ", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("logoutZ", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_loginZ (seqid, input, output) {
    const args = new AuthService_loginZ_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.loginZ.length === 1) {
      Promise.resolve(this._handler.loginZ.bind(this._handler)(
        args.loginRequest
      )).then(result => {
        const result_obj = new AuthService_loginZ_result({success: result});
        output.writeMessageBegin("loginZ", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AuthService_loginZ_result(err);
          output.writeMessageBegin("loginZ", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loginZ", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.loginZ(args.loginRequest, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AuthService_loginZ_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("loginZ", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loginZ", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_issueTokenForAccountMigrationSettings (seqid, input, output) {
    const args = new AuthService_issueTokenForAccountMigrationSettings_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.issueTokenForAccountMigrationSettings.length === 1) {
      Promise.resolve(this._handler.issueTokenForAccountMigrationSettings.bind(this._handler)(
        args.enforce
      )).then(result => {
        const result_obj = new AuthService_issueTokenForAccountMigrationSettings_result({success: result});
        output.writeMessageBegin("issueTokenForAccountMigrationSettings", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AuthService_issueTokenForAccountMigrationSettings_result(err);
          output.writeMessageBegin("issueTokenForAccountMigrationSettings", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("issueTokenForAccountMigrationSettings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.issueTokenForAccountMigrationSettings(args.enforce, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AuthService_issueTokenForAccountMigrationSettings_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("issueTokenForAccountMigrationSettings", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("issueTokenForAccountMigrationSettings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_issueTokenForAccountMigration (seqid, input, output) {
    const args = new AuthService_issueTokenForAccountMigration_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.issueTokenForAccountMigration.length === 1) {
      Promise.resolve(this._handler.issueTokenForAccountMigration.bind(this._handler)(
        args.migrationSessionId
      )).then(result => {
        const result_obj = new AuthService_issueTokenForAccountMigration_result({success: result});
        output.writeMessageBegin("issueTokenForAccountMigration", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AuthService_issueTokenForAccountMigration_result(err);
          output.writeMessageBegin("issueTokenForAccountMigration", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("issueTokenForAccountMigration", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.issueTokenForAccountMigration(args.migrationSessionId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AuthService_issueTokenForAccountMigration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("issueTokenForAccountMigration", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("issueTokenForAccountMigration", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_verifyQrcodeWithE2EE (seqid, input, output) {
    const args = new AuthService_verifyQrcodeWithE2EE_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.verifyQrcodeWithE2EE.length === 6) {
      Promise.resolve(this._handler.verifyQrcodeWithE2EE.bind(this._handler)(
        args.verifier,
        args.pinCode,
        args.errorCode,
        args.publicKey,
        args.encryptedKeyChain,
        args.hashKeyChain
      )).then(result => {
        const result_obj = new AuthService_verifyQrcodeWithE2EE_result({success: result});
        output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AuthService_verifyQrcodeWithE2EE_result(err);
          output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.verifyQrcodeWithE2EE(args.verifier, args.pinCode, args.errorCode, args.publicKey, args.encryptedKeyChain, args.hashKeyChain, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AuthService_verifyQrcodeWithE2EE_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
