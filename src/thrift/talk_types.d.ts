//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');


declare enum AccountMigrationCheckType {
  SKIP = 0,
  PINCODE = 1,
  SECURITY_CENTER = 2,
}

declare enum AccountMigrationPincodeType {
  NOT_APPLICABLE = 0,
  NOT_SET = 1,
  SET = 2,
  NEED_ENFORCED_INPUT = 3,
}

declare enum ApplicationType {
  IOS = 16,
  IOS_RC = 17,
  IOS_BETA = 18,
  IOS_ALPHA = 19,
  ANDROID = 32,
  ANDROID_RC = 33,
  ANDROID_BETA = 34,
  ANDROID_ALPHA = 35,
  WAP = 48,
  WAP_RC = 49,
  WAP_BETA = 50,
  WAP_ALPHA = 51,
  BOT = 64,
  BOT_RC = 65,
  BOT_BETA = 66,
  BOT_ALPHA = 67,
  WEB = 80,
  WEB_RC = 81,
  WEB_BETA = 82,
  WEB_ALPHA = 83,
  DESKTOPWIN = 96,
  DESKTOPWIN_RC = 97,
  DESKTOPWIN_BETA = 98,
  DESKTOPWIN_ALPHA = 99,
  DESKTOPMAC = 112,
  DESKTOPMAC_RC = 113,
  DESKTOPMAC_BETA = 114,
  DESKTOPMAC_ALPHA = 115,
  CHANNELGW = 128,
  CHANNELGW_RC = 129,
  CHANNELGW_BETA = 130,
  CHANNELGW_ALPHA = 131,
  CHANNELCP = 144,
  CHANNELCP_RC = 145,
  CHANNELCP_BETA = 146,
  CHANNELCP_ALPHA = 147,
  WINPHONE = 160,
  WINPHONE_RC = 161,
  WINPHONE_BETA = 162,
  WINPHONE_ALPHA = 163,
  BLACKBERRY = 176,
  BLACKBERRY_RC = 177,
  BLACKBERRY_BETA = 178,
  BLACKBERRY_ALPHA = 179,
  WINMETRO = 192,
  WINMETRO_RC = 193,
  WINMETRO_BETA = 194,
  WINMETRO_ALPHA = 195,
  S40 = 208,
  S40_RC = 209,
  S40_BETA = 210,
  S40_ALPHA = 211,
  CHRONO = 224,
  CHRONO_RC = 225,
  CHRONO_BETA = 226,
  CHRONO_ALPHA = 227,
  TIZEN = 256,
  TIZEN_RC = 257,
  TIZEN_BETA = 258,
  TIZEN_ALPHA = 259,
  VIRTUAL = 272,
  FIREFOXOS = 288,
  FIREFOXOS_RC = 289,
  FIREFOXOS_BETA = 290,
  FIREFOXOS_ALPHA = 291,
  IOSIPAD = 304,
  IOSIPAD_RC = 305,
  IOSIPAD_BETA = 306,
  IOSIPAD_ALPHA = 307,
  BIZIOS = 320,
  BIZIOS_RC = 321,
  BIZIOS_BETA = 322,
  BIZIOS_ALPHA = 323,
  BIZANDROID = 336,
  BIZANDROID_RC = 337,
  BIZANDROID_BETA = 338,
  BIZANDROID_ALPHA = 339,
  BIZBOT = 352,
  BIZBOT_RC = 353,
  BIZBOT_BETA = 354,
  BIZBOT_ALPHA = 355,
  CHROMEOS = 368,
  CHROMEOS_RC = 369,
  CHROMEOS_BETA = 370,
  CHROMEOS_ALPHA = 371,
  ANDROIDLITE = 384,
  ANDROIDLITE_RC = 385,
  ANDROIDLITE_BETA = 386,
  ANDROIDLITE_ALPHA = 387,
  WIN10 = 400,
  WIN10_RC = 401,
  WIN10_BETA = 402,
  WIN10_ALPHA = 403,
  BIZWEB = 416,
  BIZWEB_RC = 417,
  BIZWEB_BETA = 418,
  BIZWEB_ALPHA = 419,
  DUMMYPRIMARY = 432,
  DUMMYPRIMARY_RC = 433,
  DUMMYPRIMARY_BETA = 434,
  DUMMYPRIMARY_ALPHA = 435,
  SQUARE = 448,
  SQUARE_RC = 449,
  SQUARE_BETA = 450,
  SQUARE_ALPHA = 451,
  INTERNAL = 464,
  INTERNAL_RC = 465,
  INTERNAL_BETA = 466,
  INTERNAL_ALPHA = 467,
}

declare enum AsymmetricKeyAlgorithm {
  ASYMMETRIC_KEY_ALGORITHM_RSA = 1,
  ASYMMETRIC_KEY_ALGORITHM_ECDH = 2,
}

declare enum BeaconNotificationType {
  BUTTON = 1,
  ENTRY_SELECTED = 2,
  BROADCAST_ENTER = 3,
  BROADCAST_LEAVE = 4,
}

declare enum BotType {
  RESERVED = 0,
  OFFICIAL = 1,
  LINE_AT_0 = 2,
  LINE_AT = 3,
}

declare enum BuddyBannerLinkType {
  BUDDY_BANNER_LINK_HIDDEN = 0,
  BUDDY_BANNER_LINK_MID = 1,
  BUDDY_BANNER_LINK_URL = 2,
}

declare enum BuddyCollectionType {
  NORMAL = 0,
  NEW = 1,
  ONAIR = 2,
  POPULAR = 3,
}

declare enum BuddyOnAirLabel {
  ON_AIR = 0,
  LIVE = 1,
}

declare enum BuddyOnAirType {
  NORMAL = 0,
  VIDEOCAM = 1,
  VOIP = 2,
  RECORD = 3,
}

declare enum BuddyProfilePopupType {
  NONE = 0,
  WEB = 1,
}

declare enum BuddyResultState {
  ACCEPTED = 1,
  SUCCEEDED = 2,
  FAILED = 3,
  CANCELLED = 4,
  NOTIFY_FAILED = 5,
  STORING = 11,
  UPLOADING = 21,
  NOTIFYING = 31,
  REMOVING_SUBSCRIPTION = 41,
  UNREGISTERING_ACCOUNT = 42,
  NOTIFYING_LEAVE_CHAT = 43,
}

declare enum BuddySearchRequestSource {
  NA = 0,
  FRIEND_VIEW = 1,
  OFFICIAL_ACCOUNT_VIEW = 2,
}

declare enum BuddyStatusBarDisplayType {
  NOT_A_FRIEND = 0,
  ALWAYS = 1,
}

declare enum CarrierCode {
  NOT_SPECIFIED = 0,
  JP_DOCOMO = 1,
  JP_AU = 2,
  JP_SOFTBANK = 3,
  KR_SKT = 17,
  KR_KT = 18,
  KR_LGT = 19,
  JP_DOCOMO_LINE = 4,
}

declare enum ChannelConfiguration {
  MESSAGE = 0,
  MESSAGE_NOTIFICATION = 1,
  NOTIFICATION_CENTER = 2,
}

declare enum ChannelErrorCode {
  ILLEGAL_ARGUMENT = 0,
  INTERNAL_ERROR = 1,
  CONNECTION_ERROR = 2,
  AUTHENTICATIONI_FAILED = 3,
  NEED_PERMISSION_APPROVAL = 4,
  COIN_NOT_USABLE = 5,
  WEBVIEW_NOT_ALLOWED = 6,
}

declare enum ChannelPermission {
  PROFILE = 0,
  FRIENDS = 1,
  GROUP = 2,
}

declare enum ChannelSyncTarget {
  ALL = 255,
  CHANNEL_INFO = 1,
  CHANNEL_TOKEN = 2,
  COMMON_DOMAIN = 4,
}

declare enum ChannelSyncType {
  SYNC = 0,
  REMOVE = 1,
  REMOVE_ALL = 2,
}

declare enum CommitMessageResultCode {
  DELIVERED = 0,
  DELIVERY_SKIPPED = 1,
  DELIVERY_RESTRICTED = 2,
}

declare enum ContactAttribute {
  CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1,
  CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2,
  CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16,
  CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32,
}

declare enum ContactCategory {
  NORMAL = 0,
  RECOMMEND = 1,
  BLOCKED = 2,
}

declare enum ContactRelation {
  ONEWAY = 0,
  BOTH = 1,
  NOT_REGISTERED = 2,
}

declare enum ContactSetting {
  CONTACT_SETTING_NOTIFICATION_DISABLE = 1,
  CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2,
  CONTACT_SETTING_CONTACT_HIDE = 4,
  CONTACT_SETTING_FAVORITE = 8,
  CONTACT_SETTING_DELETE = 16,
}

declare enum ContactStatus {
  UNSPECIFIED = 0,
  FRIEND = 1,
  FRIEND_BLOCKED = 2,
  RECOMMEND = 3,
  RECOMMEND_BLOCKED = 4,
  DELETED = 5,
  DELETED_BLOCKED = 6,
}

declare enum ContactType {
  MID = 0,
  PHONE = 1,
  EMAIL = 2,
  USERID = 3,
  PROXIMITY = 4,
  GROUP = 5,
  USER = 6,
  QRCODE = 7,
  PROMOTION_BOT = 8,
  CONTACT_MESSAGE = 9,
  FRIEND_REQUEST = 10,
  REPAIR = 128,
  FACEBOOK = 2305,
  SINA = 2306,
  RENREN = 2307,
  FEIXIN = 2308,
  BBM = 2309,
  BEACON = 11,
}

declare enum ContentType {
  NONE = 0,
  IMAGE = 1,
  VIDEO = 2,
  AUDIO = 3,
  HTML = 4,
  PDF = 5,
  CALL = 6,
  STICKER = 7,
  PRESENCE = 8,
  GIFT = 9,
  GROUPBOARD = 10,
  APPLINK = 11,
  LINK = 12,
  CONTACT = 13,
  FILE = 14,
  LOCATION = 15,
  POSTNOTIFICATION = 16,
  RICH = 17,
  CHATEVENT = 18,
  MUSIC = 19,
  PAYMENT = 20,
  EXTIMAGE = 21,
}

declare enum CustomMode {
  PROMOTION_FRIENDS_INVITE = 1,
  CAPABILITY_SERVER_SIDE_SMS = 2,
  LINE_CLIENT_ANALYTICS_CONFIGURATION = 3,
}

declare enum DeviceBooleanStateKey {
  BEACON_AGREEMENT = 1,
  BLUETOOTH = 2,
}

declare enum DeviceStringStateKey {
  LOCATION_OS = 1,
  LOCATION_APP = 2,
}

declare enum Diff {
  ADDED = 0,
  UPDATED = 1,
  REMOVED = 2,
}

declare enum EmailConfirmationStatus {
  NOT_SPECIFIED = 0,
  NOT_YET = 1,
  DONE = 3,
  NEED_ENFORCED_INPUT = 4,
}

declare enum EmailConfirmationType {
  SERVER_SIDE_EMAIL = 0,
  CLIENT_SIDE_EMAIL = 1,
}

declare enum ErrorCode {
  ILLEGAL_ARGUMENT = 0,
  AUTHENTICATION_FAILED = 1,
  DB_FAILED = 2,
  INVALID_STATE = 3,
  EXCESSIVE_ACCESS = 4,
  NOT_FOUND = 5,
  INVALID_MID = 9,
  NOT_A_MEMBER = 10,
  INVALID_LENGTH = 6,
  NOT_AVAILABLE_USER = 7,
  NOT_AUTHORIZED_DEVICE = 8,
  NOT_AUTHORIZED_SESSION = 14,
  INCOMPATIBLE_APP_VERSION = 11,
  NOT_READY = 12,
  NOT_AVAILABLE_SESSION = 13,
  SYSTEM_ERROR = 15,
  NO_AVAILABLE_VERIFICATION_METHOD = 16,
  NOT_AUTHENTICATED = 17,
  INVALID_IDENTITY_CREDENTIAL = 18,
  NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19,
  INTERNAL_ERROR = 20,
  NO_SUCH_IDENTITY_IDENFIER = 21,
  DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22,
  ILLEGAL_IDENTITY_CREDENTIAL = 23,
  UNKNOWN_CHANNEL = 24,
  NO_SUCH_MESSAGE_BOX = 25,
  NOT_AVAILABLE_MESSAGE_BOX = 26,
  CHANNEL_DOES_NOT_MATCH = 27,
  NOT_YOUR_MESSAGE = 28,
  MESSAGE_DEFINED_ERROR = 29,
  USER_CANNOT_ACCEPT_PRESENTS = 30,
  USER_NOT_STICKER_OWNER = 32,
  MAINTENANCE_ERROR = 33,
  ACCOUNT_NOT_MATCHED = 34,
  ABUSE_BLOCK = 35,
  NOT_FRIEND = 36,
  NOT_ALLOWED_CALL = 37,
  BLOCK_FRIEND = 38,
  INCOMPATIBLE_VOIP_VERSION = 39,
  INVALID_SNS_ACCESS_TOKEN = 40,
  EXTERNAL_SERVICE_NOT_AVAILABLE = 41,
  NOT_ALLOWED_ADD_CONTACT = 42,
  NOT_CERTIFICATED = 43,
  NOT_ALLOWED_SECONDARY_DEVICE = 44,
  INVALID_PIN_CODE = 45,
  NOT_FOUND_IDENTITY_CREDENTIAL = 46,
  EXCEED_FILE_MAX_SIZE = 47,
  EXCEED_DAILY_QUOTA = 48,
  NOT_SUPPORT_SEND_FILE = 49,
  MUST_UPGRADE = 50,
  NOT_AVAILABLE_PIN_CODE_SESSION = 51,
  EXPIRED_REVISION = 52,
  NOT_YET_PHONE_NUMBER = 54,
  BAD_CALL_NUMBER = 55,
  UNAVAILABLE_CALL_NUMBER = 56,
  NOT_SUPPORT_CALL_SERVICE = 57,
  CONGESTION_CONTROL = 58,
  NO_BALANCE = 59,
  NOT_PERMITTED_CALLER_ID = 60,
  NO_CALLER_ID_LIMIT_EXCEEDED = 61,
  CALLER_ID_VERIFICATION_REQUIRED = 62,
  NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63,
  MESSAGE_NOT_FOUND = 64,
  INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65,
  ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66,
  ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67,
  INVALID_PASSWORD_FORMAT = 69,
  FEATURE_RESTRICTED = 70,
  MESSAGE_NOT_DESTRUCTIBLE = 71,
  PAID_CALL_REDEEM_FAILED = 72,
  PREVENTED_JOIN_BY_TICKET = 73,
  SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75,
  SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76,
  SECURITY_CENTER_NOT_VERIFIED = 77,
  SECURITY_CENTER_BLOCKED_BY_SETTING = 78,
  SECURITY_CENTER_BLOCKED = 79,
  TALK_PROXY_EXCEPTION = 80,
  E2EE_INVALID_PROTOCOL = 81,
  E2EE_RETRY_ENCRYPT = 82,
  E2EE_UPDATE_SENDER_KEY = 83,
  E2EE_UPDATE_RECEIVER_KEY = 84,
  E2EE_INVALID_ARGUMENT = 85,
  E2EE_INVALID_VERSION = 86,
  E2EE_SENDER_DISABLED = 87,
  E2EE_RECEIVER_DISABLED = 88,
  E2EE_SENDER_NOT_ALLOWED = 89,
  E2EE_RECEIVER_NOT_ALLOWED = 90,
  E2EE_RESEND_FAIL = 91,
  E2EE_RESEND_OK = 92,
  HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93,
  E2EE_UPDATE_PRIMARY_DEVICE = 94,
  SUCCESS = 95,
  CANCEL = 96,
  E2EE_PRIMARY_NOT_SUPPORT = 97,
  E2EE_RETRY_PLAIN = 98,
  E2EE_RECREATE_GROUP_KEY = 99,
  E2EE_GROUP_TOO_MANY_MEMBERS = 100,
  SERVER_BUSY = 101,
  NOT_ALLOWED_ADD_FOLLOW = 102,
  INCOMING_FRIEND_REQUEST_LIMIT = 103,
  OUTGOING_FRIEND_REQUEST_LIMIT = 104,
  OUTGOING_FRIEND_REQUEST_QUOTA = 105,
  DUPLICATED = 106,
  BANNED = 107,
}

declare enum ExtendedProfileAttribute {
}

declare enum FeatureType {
  OBS_VIDEO = 1,
  OBS_GENERAL = 2,
}

declare enum FriendRequestDirection {
  INCOMING = 1,
  OUTGOING = 2,
}

declare enum FriendRequestMethod {
  TIMELINE = 1,
  NEARBY = 2,
  SQUARE = 3,
}

declare enum FriendRequestStatus {
  NONE = 0,
  AVAILABLE = 1,
  ALREADY_REQUESTED = 2,
  UNAVAILABLE = 3,
}

declare enum GroupAttribute {
  ALL = 255,
  NAME = 1,
  PICTURE_STATUS = 2,
  PREVENTED_JOIN_BY_TICKET = 4,
  NOTIFICATION_SETTING = 8,
}

declare enum GroupCallMediaType {
  AUDIO = 1,
  VIDEO = 2,
}

declare enum GroupPreferenceAttribute {
  INVITATION_TICKET = 1,
  FAVORITE_TIMESTAMP = 2,
}

declare enum IdentityProvider {
  UNKNOWN = 0,
  LINE = 1,
  NAVER_KR = 2,
  LINE_PHONE = 3,
}

declare enum LoginResultType {
  SUCCESS = 1,
  REQUIRE_QRCODE = 2,
  REQUIRE_DEVICE_CONFIRM = 3,
  REQUIRE_SMS_CONFIRM = 4,
}

declare enum LoginType {
  ID_CREDENTIAL = 0,
  QRCODE = 1,
  ID_CREDENTIAL_WITH_E2EE = 2,
}

declare enum MessageRelationType {
  FORWARD = 0,
  AUTO_REPLY = 1,
  SUBORDINATE = 2,
}

declare enum MIDType {
  USER = 0,
  ROOM = 1,
  GROUP = 2,
  SQUARE = 3,
  SQUARE_CHAT = 4,
  SQUARE_MEMBER = 5,
}

declare enum ModificationType {
  ADD = 0,
  REMOVE = 1,
  MODIFY = 2,
}

declare enum NotificationItemFetchMode {
  ALL = 0,
  APPEND = 1,
}

declare enum NotificationStatus {
  NOTIFICATION_ITEM_EXIST = 1,
  TIMELINE_ITEM_EXIST = 2,
  NOTE_GROUP_NEW_ITEM_EXIST = 4,
  TIMELINE_BUDDYGROUP_CHANGED = 8,
  NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16,
  ALBUM_ITEM_EXIST = 32,
  TIMELINE_ITEM_DELETED = 64,
  OTOGROUP_ITEM_EXIST = 128,
  GROUPHOME_NEW_ITEM_EXIST = 256,
  GROUPHOME_HIDDEN_ITEM_CHANGED = 512,
  NOTIFICATION_ITEM_CHANGED = 1024,
  BEAD_ITEM_HIDE = 2048,
  BEAD_ITEM_SHOW = 4096,
}

declare enum NotificationType {
  APPLE_APNS = 1,
  GOOGLE_C2DM = 2,
  NHN_NNI = 3,
  SKT_AOM = 4,
  MS_MPNS = 5,
  RIM_BIS = 6,
  GOOGLE_GCM = 7,
  NOKIA_NNAPI = 8,
  TIZEN = 9,
  MOZILLA_SIMPLE = 10,
  LINE_BOT = 17,
  LINE_WAP = 18,
  APPLE_APNS_VOIP = 19,
  MS_WNS = 20,
}

declare enum OpStatus {
  NORMAL = 0,
  ALERT_DISABLED = 1,
  ALWAYS = 2,
}

declare enum OpType {
  END_OF_OPERATION = 0,
  UPDATE_PROFILE = 1,
  UPDATE_SETTINGS = 36,
  NOTIFIED_UPDATE_PROFILE = 2,
  REGISTER_USERID = 3,
  ADD_CONTACT = 4,
  NOTIFIED_ADD_CONTACT = 5,
  BLOCK_CONTACT = 6,
  UNBLOCK_CONTACT = 7,
  NOTIFIED_RECOMMEND_CONTACT = 8,
  CREATE_GROUP = 9,
  UPDATE_GROUP = 10,
  NOTIFIED_UPDATE_GROUP = 11,
  INVITE_INTO_GROUP = 12,
  NOTIFIED_INVITE_INTO_GROUP = 13,
  CANCEL_INVITATION_GROUP = 31,
  NOTIFIED_CANCEL_INVITATION_GROUP = 32,
  LEAVE_GROUP = 14,
  NOTIFIED_LEAVE_GROUP = 15,
  ACCEPT_GROUP_INVITATION = 16,
  NOTIFIED_ACCEPT_GROUP_INVITATION = 17,
  REJECT_GROUP_INVITATION = 34,
  NOTIFIED_REJECT_GROUP_INVITATION = 35,
  KICKOUT_FROM_GROUP = 18,
  NOTIFIED_KICKOUT_FROM_GROUP = 19,
  CREATE_ROOM = 20,
  INVITE_INTO_ROOM = 21,
  NOTIFIED_INVITE_INTO_ROOM = 22,
  LEAVE_ROOM = 23,
  NOTIFIED_LEAVE_ROOM = 24,
  SEND_MESSAGE = 25,
  RECEIVE_MESSAGE = 26,
  SEND_MESSAGE_RECEIPT = 27,
  RECEIVE_MESSAGE_RECEIPT = 28,
  SEND_CONTENT_RECEIPT = 29,
  SEND_CHAT_CHECKED = 40,
  SEND_CHAT_REMOVED = 41,
  RECEIVE_ANNOUNCEMENT = 30,
  INVITE_VIA_EMAIL = 38,
  NOTIFIED_REGISTER_USER = 37,
  NOTIFIED_UNREGISTER_USER = 33,
  NOTIFIED_REQUEST_RECOVERY = 39,
  NOTIFIED_FORCE_SYNC = 42,
  SEND_CONTENT = 43,
  SEND_MESSAGE_MYHOME = 44,
  NOTIFIED_UPDATE_CONTENT_PREVIEW = 45,
  REMOVE_ALL_MESSAGES = 46,
  NOTIFIED_UPDATE_PURCHASES = 47,
  DUMMY = 48,
  UPDATE_CONTACT = 49,
  NOTIFIED_RECEIVED_CALL = 50,
  CANCEL_CALL = 51,
  NOTIFIED_REDIRECT = 52,
  NOTIFIED_CHANNEL_SYNC = 53,
  FAILED_SEND_MESSAGE = 54,
  NOTIFIED_READ_MESSAGE = 55,
  FAILED_EMAIL_CONFIRMATION = 56,
  NOTIFIED_PUSH_NOTICENTER_ITEM = 59,
  NOTIFIED_CHAT_CONTENT = 58,
  NOTIFIED_JOIN_CHAT = 60,
  NOTIFIED_LEAVE_CHAT = 61,
  NOTIFIED_TYPING = 62,
  FRIEND_REQUEST_ACCEPTED = 63,
  DESTROY_MESSAGE = 64,
  NOTIFIED_DESTROY_MESSAGE = 65,
  UPDATE_PUBLICKEYCHAIN = 66,
  NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67,
  NOTIFIED_BLOCK_CONTACT = 68,
  NOTIFIED_UNBLOCK_CONTACT = 69,
  UPDATE_GROUPPREFERENCE = 70,
  NOTIFIED_PAYMENT_EVENT = 71,
  REGISTER_E2EE_PUBLICKEY = 72,
  NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73,
  NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74,
  NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75,
  NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76,
  NOTIFIED_E2EE_KEY_UPDATE = 77,
  NOTIFIED_BUDDY_UPDATE_PROFILE = 78,
  NOTIFIED_UPDATE_LINEAT_TABS = 79,
  UPDATE_ROOM = 80,
  NOTIFIED_BEACON_DETECTED = 81,
  UPDATE_EXTENDED_PROFILE = 82,
  ADD_FOLLOW = 83,
  NOTIFIED_ADD_FOLLOW = 84,
  DELETE_FOLLOW = 85,
  NOTIFIED_DELETE_FOLLOW = 86,
  UPDATE_TIMELINE_SETTINGS = 87,
  NOTIFIED_FRIEND_REQUEST = 88,
  UPDATE_RINGBACK_TONE = 89,
  NOTIFIED_POSTBACK = 90,
  RECEIVE_READ_WATERMARK = 91,
  NOTIFIED_MESSAGE_DELIVERED = 92,
}

declare enum PaidCallerIdStatus {
  NOT_SPECIFIED = 0,
  VALID = 1,
  VERIFICATION_REQUIRED = 2,
  NOT_PERMITTED = 3,
  LIMIT_EXCEEDED = 4,
  LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 5,
}

declare enum PaidCallProductType {
  COIN = 0,
  CREDIT = 1,
  MONTHLY = 2,
}

declare enum PaidCallType {
  OUT = 0,
  IN = 1,
  TOLLFREE = 2,
  RECORD = 3,
  AD = 4,
  CS = 5,
}

declare enum PayloadType {
  PAYLOAD_BUY = 101,
  PAYLOAD_CS = 111,
  PAYLOAD_BONUS = 121,
  PAYLOAD_EVENT = 131,
  PAYLOAD_POINT_AUTO_EXCHANGED = 141,
  PAYLOAD_POINT_MANUAL_EXCHANGED = 151,
}

declare enum PaymentPgType {
  PAYMENT_PG_NONE = 0,
  PAYMENT_PG_AU = 1,
  PAYMENT_PG_AL = 2,
}

declare enum PaymentType {
  PAYMENT_APPLE = 1,
  PAYMENT_GOOGLE = 2,
}

declare enum PersonalInfo {
  EMAIL = 0,
  PHONE = 1,
  BIRTHDAY = 2,
  RAW_BIRTHDAY = 3,
}

declare enum PlaceSearchProvider {
  GOOGLE = 0,
  BAIDU = 1,
}

declare enum PointErrorCode {
  REQUEST_DUPLICATION = 3001,
  INVALID_PARAMETER = 3002,
  NOT_ENOUGH_BALANCE = 3003,
  AUTHENTICATION_FAIL = 3004,
  API_ACCESS_FORBIDDEN = 3005,
  MEMBER_ACCOUNT_NOT_FOUND = 3006,
  SERVICE_ACCOUNT_NOT_FOUND = 3007,
  TRANSACTION_NOT_FOUND = 3008,
  ALREADY_REVERSED_TRANSACTION = 3009,
  MESSAGE_NOT_READABLE = 3010,
  HTTP_REQUEST_METHOD_NOT_SUPPORTED = 3011,
  HTTP_MEDIA_TYPE_NOT_SUPPORTED = 3012,
  NOT_ALLOWED_TO_DEPOSIT = 3013,
  NOT_ALLOWED_TO_PAY = 3014,
  TRANSACTION_ACCESS_FORBIDDEN = 3015,
  INVALID_SERVICE_CONFIGURATION = 4001,
  DCS_COMMUNICATION_FAIL = 5004,
  UPDATE_BALANCE_FAIL = 5007,
  SYSTEM_ERROR = 5999,
  SYSTEM_MAINTENANCE = 5888,
}

declare enum PrivacyLevelType {
  PUBLIC = 0,
  PRIVATE = 1,
}

declare enum ProductBannerLinkType {
  BANNER_LINK_NONE = 0,
  BANNER_LINK_ITEM = 1,
  BANNER_LINK_URL = 2,
  BANNER_LINK_CATEGORY = 3,
}

declare enum ProductEventType {
  NO_EVENT = 0,
  CARRIER_ANY = 65537,
  BUDDY_ANY = 131073,
  INSTALL_IOS = 196609,
  INSTALL_ANDROID = 196610,
  MISSION_ANY = 262145,
  MUSTBUY_ANY = 327681,
}

declare enum ProfileAttribute {
  ALL = 511,
  EMAIL = 1,
  DISPLAY_NAME = 2,
  PHONETIC_NAME = 4,
  PICTURE = 8,
  STATUS_MESSAGE = 16,
  ALLOW_SEARCH_BY_USERID = 32,
  ALLOW_SEARCH_BY_EMAIL = 64,
  BUDDY_STATUS = 128,
  MUSIC_PROFILE = 256,
}

declare enum PublicKeychainStatus {
  UPDATED = 0,
  DELETED = 1,
  RESTRICTED = 2,
}

declare enum PublicType {
  HIDDEN = 0,
  PUBLIC = 1000,
}

declare enum RedirectType {
  NONE = 0,
  EXPIRE_SECOND = 1,
}

declare enum RegistrationType {
  PHONE = 0,
  EMAIL_WAP = 1,
  FACEBOOK = 2305,
  SINA = 2306,
  RENREN = 2307,
  FEIXIN = 2308,
}

declare enum ReportCategory {
  PUSH_NORMAL_PLAIN = 0,
  PUSH_NORMAL_E2EE = 1,
  PUSH_VOIP_PLAIN = 2,
  PUSH_VOIP_E2EE = 3,
}

declare enum ReservedMessageSessionId {
  DEFAULT = 0,
  HIDDEN_CHAT = 1,
}

declare enum RoomAttribute {
  ALL = 255,
  NOTIFICATION_SETTING = 1,
}

declare enum SecurityCenterSettingsType {
  NOT_APPLICABLE = 0,
  NOT_SET = 1,
  SET = 2,
  NEED_ENFORCED_INPUT = 3,
}

declare enum ServiceCode {
  UNKNOWN = 0,
  TALK = 1,
  SQUARE = 2,
}

declare enum SettingsAttribute {
  NOTIFICATION_ENABLE = 1,
  NOTIFICATION_MUTE_EXPIRATION = 2,
  NOTIFICATION_NEW_MESSAGE = 4,
  NOTIFICATION_GROUP_INVITATION = 8,
  NOTIFICATION_SHOW_MESSAGE = 16,
  NOTIFICATION_INCOMING_CALL = 32,
  NOTIFICATION_SOUND_MESSAGE = 256,
  NOTIFICATION_SOUND_GROUP = 512,
  NOTIFICATION_DISABLED_WITH_SUB = 65536,
  NOTIFICATION_PAYMENT = 131072,
  PRIVACY_SYNC_CONTACTS = 64,
  PRIVACY_SEARCH_BY_PHONE_NUMBER = 128,
  PRIVACY_SEARCH_BY_USERID = 8192,
  PRIVACY_SEARCH_BY_EMAIL = 16384,
  PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152,
  PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608,
  PRIVACY_ALLOW_FRIEND_REQUEST = 1073741824,
  PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432,
  PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 67108864,
  PRIVACY_AGREE_USE_PAIDCALL = 134217728,
  CONTACT_MY_TICKET = 1024,
  IDENTITY_PROVIDER = 2048,
  IDENTITY_IDENTIFIER = 4096,
  SNS_ACCOUNT = 524288,
  PHONE_REGISTRATION = 1048576,
  PREFERENCE_LOCALE = 32768,
  CUSTOM_MODE = 4194304,
  EMAIL_CONFIRMATION_STATUS = 16777216,
  ACCOUNT_MIGRATION_PINCODE = 268435456,
  ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 536870912,
  SECURITY_CENTER_SETTINGS = 262144,
}

declare enum SettingsAttributeEx {
  NOTIFICATION_ENABLE = 0,
  NOTIFICATION_MUTE_EXPIRATION = 1,
  NOTIFICATION_NEW_MESSAGE = 2,
  NOTIFICATION_GROUP_INVITATION = 3,
  NOTIFICATION_SHOW_MESSAGE = 4,
  NOTIFICATION_INCOMING_CALL = 5,
  NOTIFICATION_SOUND_MESSAGE = 8,
  NOTIFICATION_SOUND_GROUP = 9,
  NOTIFICATION_DISABLED_WITH_SUB = 16,
  NOTIFICATION_PAYMENT = 17,
  NOTIFICATION_MENTION = 40,
  PRIVACY_SYNC_CONTACTS = 6,
  PRIVACY_SEARCH_BY_PHONE_NUMBER = 7,
  PRIVACY_SEARCH_BY_USERID = 13,
  PRIVACY_SEARCH_BY_EMAIL = 14,
  PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21,
  PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23,
  PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35,
  PRIVACY_ALLOW_FRIEND_REQUEST = 30,
  PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25,
  PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26,
  PRIVACY_AGREE_USE_PAIDCALL = 27,
  CONTACT_MY_TICKET = 10,
  IDENTITY_PROVIDER = 11,
  IDENTITY_IDENTIFIER = 12,
  SNS_ACCOUNT = 19,
  PHONE_REGISTRATION = 20,
  PREFERENCE_LOCALE = 15,
  CUSTOM_MODE = 22,
  EMAIL_CONFIRMATION_STATUS = 24,
  ACCOUNT_MIGRATION_PINCODE = 28,
  ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29,
  SECURITY_CENTER_SETTINGS = 18,
  E2EE_ENABLE = 33,
  HITOKOTO_BACKUP_REQUESTED = 34,
  CONTACT_ALLOW_FOLLOWING = 36,
  PRIVACY_ALLOW_NEARBY = 37,
  AGREEMENT_NEARBY = 38,
  AGREEMENT_SQUARE = 39,
  ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41,
  AGREEMENT_BOT_USE = 42,
}

declare enum SnsIdType {
  FACEBOOK = 1,
  SINA = 2,
  RENREN = 3,
  FEIXIN = 4,
  BBM = 5,
}

declare enum SpammerReason {
  OTHER = 0,
  ADVERTISING = 1,
  GENDER_HARASSMENT = 2,
  HARASSMENT = 3,
}

declare enum SpotCategory {
  UNKNOWN = 0,
  GOURMET = 1,
  BEAUTY = 2,
  TRAVEL = 3,
  SHOPPING = 4,
  ENTERTAINMENT = 5,
  SPORTS = 6,
  TRANSPORT = 7,
  LIFE = 8,
  HOSPITAL = 9,
  FINANCE = 10,
  EDUCATION = 11,
  OTHER = 12,
  ALL = 10000,
}

declare enum StickerResourceType {
  STATIC = 1,
  ANIMATION = 2,
  SOUND = 3,
  ANIMATION_SOUND = 4,
  POPUP = 5,
  POPUP_SOUND = 6,
}

declare enum SuggestDictionaryIncrementStatus {
  SUCCESS = 0,
  INVALID_REVISION = 1,
  TOO_LARGE_DATA = 2,
  SCHEME_CHANGED = 3,
  RETRY = 4,
  FAIL = 5,
  TOO_OLD_DATA = 6,
}

declare enum SyncActionType {
  SYNC = 0,
  REPORT = 1,
}

declare enum SyncCategory {
  PROFILE = 0,
  SETTINGS = 1,
  OPS = 2,
  CONTACT = 3,
  RECOMMEND = 4,
  BLOCK = 5,
  GROUP = 6,
  ROOM = 7,
  NOTIFICATION = 8,
  ADDRESS_BOOK = 9,
}

declare enum SyncTriggerReason {
  OTHER = 0,
  REVISION_GAP_TOO_LARGE = 1,
  OPERATION_EXPIRED = 2,
}

declare enum TMessageBoxStatus {
  ACTIVATED = 1,
  UNREAD = 2,
}

declare enum TrackingType {
}

declare enum UnregistrationReason {
  UNREGISTRATION_REASON_UNREGISTER_USER = 1,
  UNREGISTRATION_REASON_UNBIND_DEVICE = 2,
}

declare enum UserAgeType {
  OVER = 1,
  UNDER = 2,
  UNDEFINED = 3,
}

declare enum UserStatus {
  NORMAL = 0,
  UNBOUND = 1,
  UNREGISTERED = 2,
}

declare enum VerificationMethod {
  NO_AVAILABLE = 0,
  PIN_VIA_SMS = 1,
  CALLERID_INDIGO = 2,
  PIN_VIA_TTS = 4,
  SKIP = 10,
}

declare enum VerificationResult {
  FAILED = 0,
  OK_NOT_REGISTERED_YET = 1,
  OK_REGISTERED_WITH_SAME_DEVICE = 2,
  OK_REGISTERED_WITH_ANOTHER_DEVICE = 3,
}

declare enum WapInvitationType {
  REGISTRATION = 1,
  CHAT = 2,
}

declare enum LoginQrCode_ErrorCode {
  INTERNAL_ERROR = 0,
  ILLEGAL_ARGUMENT = 1,
  VERIFICATION_FAILED = 2,
  NOT_ALLOWED_QR_CODE_LOGIN = 3,
  VERIFICATION_NOTICE_FAILED = 4,
  RETRY_LATER = 5,
  INVALID_CONTEXT = 100,
  APP_UPGRADE_REQUIRED = 101,
}

declare class AgeCheckDocomoResult {
    public authUrl: string;
    public userAgeType: UserAgeType;

      constructor(args?: { authUrl: string; userAgeType: UserAgeType; });
  }

declare class AgeCheckRequestResult {
    public authUrl: string;
    public sessionId: string;

      constructor(args?: { authUrl: string; sessionId: string; });
  }

declare class AnalyticsInfo {
    public gaSamplingRate: number;
    public tmid: string;

      constructor(args?: { gaSamplingRate: number; tmid: string; });
  }

declare class Announcement {
    public index: number;
    public forceUpdate: boolean;
    public title: string;
    public text: string;
    public createdTime: Int64;
    public pictureUrl: string;
    public thumbnailUrl: string;

      constructor(args?: { index: number; forceUpdate: boolean; title: string; text: string; createdTime: Int64; pictureUrl: string; thumbnailUrl: string; });
  }

declare class ApprovedChannelInfo {
    public channelInfo: ChannelInfo;
    public approvedAt: Int64;

      constructor(args?: { channelInfo: ChannelInfo; approvedAt: Int64; });
  }

declare class ApprovedChannelInfos {
    public approvedChannelInfos: ApprovedChannelInfo[];
    public revision: Int64;

      constructor(args?: { approvedChannelInfos: ApprovedChannelInfo[]; revision: Int64; });
  }

declare class AuthQrcode {
    public qrcode: string;
    public verifier: string;
    public callbackUrl: string;

      constructor(args?: { qrcode: string; verifier: string; callbackUrl: string; });
  }

declare class Balance {
    public currentPointsFixedPointDecimal: string;

      constructor(args?: { currentPointsFixedPointDecimal: string; });
  }

declare class BanPage {
    public url: string;

      constructor(args?: { url: string; });
  }

declare class BeaconBackgroundNotification {
    public actionInterval: Int64;
    public actionAndConditions: BeaconCondition[];
    public actionDelay: Int64;
    public actionConditions: BeaconCondition[][];

      constructor(args?: { actionInterval: Int64; actionAndConditions: BeaconCondition[]; actionDelay: Int64; actionConditions: BeaconCondition[][]; });
  }

declare class BeaconCondition {
    public inFriends: string;
    public notInFriends: string;
    public termsAgreed: boolean;

      constructor(args?: { inFriends: string; notInFriends: string; termsAgreed: boolean; });
  }

declare class BeaconLayerInfoAndActions {
    public pictureUrl: string;
    public label: string;
    public text: string;
    public actions: string[];
    public showOrConditions: BeaconCondition[];
    public showConditions: BeaconCondition[][];
    public timeToHide: Int64;

      constructor(args?: { pictureUrl: string; label: string; text: string; actions: string[]; showOrConditions: BeaconCondition[]; showConditions: BeaconCondition[][]; timeToHide: Int64; });
  }

declare class BeaconQueryResponse {
    public deprecated_actionUrls: string[];
    public cacheTtl: Int64;
    public touchActions: BeaconTouchActions;
    public layerInfoAndActions: BeaconLayerInfoAndActions;
    public backgroundEnteringNotification: BeaconBackgroundNotification;
    public backgroundLeavingNotification: BeaconBackgroundNotification;
    public group: string;
    public major: string;
    public minor: string;
    public effectiveRange: number;
    public channelWhiteList: string[];

      constructor(args?: { deprecated_actionUrls: string[]; cacheTtl: Int64; touchActions: BeaconTouchActions; layerInfoAndActions: BeaconLayerInfoAndActions; backgroundEnteringNotification: BeaconBackgroundNotification; backgroundLeavingNotification: BeaconBackgroundNotification; group: string; major: string; minor: string; effectiveRange: number; channelWhiteList: string[]; });
  }

declare class BeaconTouchActions {
    public actions: string[];

      constructor(args?: { actions: string[]; });
  }

declare class BotUseInfo {
    public botUseAgreementAccepted: boolean;
    public botInFriends: boolean;
    public primaryApplication: string;
    public locale: string;

      constructor(args?: { botUseAgreementAccepted: boolean; botInFriends: boolean; primaryApplication: string; locale: string; });
  }

declare class BuddyBanner {
    public buddyBannerLinkType: BuddyBannerLinkType;
    public buddyBannerLink: string;
    public buddyBannerImageUrl: string;
    public width: number;
    public height: number;
    public bannerId: Int64;

      constructor(args?: { buddyBannerLinkType: BuddyBannerLinkType; buddyBannerLink: string; buddyBannerImageUrl: string; width: number; height: number; bannerId: Int64; });
  }

declare class BuddyCategoryEntry {
    public classification: string;
    public displayName: string;
    public totalBuddyCount: number;

      constructor(args?: { classification: string; displayName: string; totalBuddyCount: number; });
  }

declare class BuddyCategoryView {
    public categoryEntries: BuddyCategoryEntry[];

      constructor(args?: { categoryEntries: BuddyCategoryEntry[]; });
  }

declare class BuddyChatBar {
    public barItems: BuddyChatBarItem[];

      constructor(args?: { barItems: BuddyChatBarItem[]; });
  }

declare class BuddyChatBarItem {
    public rich: BuddyRichMenuChatBarItem;
    public widgetList: BuddyWidgetListCharBarItem;
    public web: BuddyWebChatBarItem;

      constructor(args?: { rich: BuddyRichMenuChatBarItem; widgetList: BuddyWidgetListCharBarItem; web: BuddyWebChatBarItem; });
  }

declare class BuddyCollection {
    public code: number;
    public displayName: string;
    public totalBuddyCount: number;
    public entries: BuddyCollectionEntry[];
    public horizontal: boolean;
    public type: BuddyCollectionType;

      constructor(args?: { code: number; displayName: string; totalBuddyCount: number; entries: BuddyCollectionEntry[]; horizontal: boolean; type: BuddyCollectionType; });
  }

declare class BuddyCollectionEntry {
    public contact: Contact;
    public onAir: boolean;
    public asNew: boolean;

      constructor(args?: { contact: Contact; onAir: boolean; asNew: boolean; });
  }

declare class BuddyDetail {
    public mid: string;
    public memberCount: Int64;
    public onAir: boolean;
    public businessAccount: boolean;
    public addable: boolean;
    public acceptableContentTypes: ContentType[];
    public capableMyhome: boolean;
    public freePhoneCallable: boolean;
    public phoneNumberToDial: string;
    public needPermissionApproval: boolean;
    public channelId: number;
    public channelProviderName: string;
    public iconType: number;
    public botType: BotType;
    public showRichMenu: boolean;
    public richMenuRevision: Int64;
    public onAirLabel: BuddyOnAirLabel;
    public useTheme: boolean;
    public themeId: string;
    public useBar: boolean;
    public barRevision: Int64;
    public useBackground: boolean;
    public backgroundId: string;
    public statusBarEnabled: boolean;
    public statusBarRevision: Int64;
    public capableChat: boolean;

      constructor(args?: { mid: string; memberCount: Int64; onAir: boolean; businessAccount: boolean; addable: boolean; acceptableContentTypes: ContentType[]; capableMyhome: boolean; freePhoneCallable: boolean; phoneNumberToDial: string; needPermissionApproval: boolean; channelId: number; channelProviderName: string; iconType: number; botType: BotType; showRichMenu: boolean; richMenuRevision: Int64; onAirLabel: BuddyOnAirLabel; useTheme: boolean; themeId: string; useBar: boolean; barRevision: Int64; useBackground: boolean; backgroundId: string; statusBarEnabled: boolean; statusBarRevision: Int64; capableChat: boolean; });
  }

declare class BuddyList {
    public classification: string;
    public displayName: string;
    public totalBuddyCount: number;
    public popularContacts: Contact[];

      constructor(args?: { classification: string; displayName: string; totalBuddyCount: number; popularContacts: Contact[]; });
  }

declare class BuddyMessageRequest {
    public contentType: ContentType;
    public text: string;
    public location: Location;
    public content: string;
    public contentMetadata: { [k: string]: string; };
    public sourceContentId: string;
    public usePermanent: boolean;
    public toMid: string;

      constructor(args?: { contentType: ContentType; text: string; location: Location; content: string; contentMetadata: { [k: string]: string; }; sourceContentId: string; usePermanent: boolean; toMid: string; });
  }

declare class BuddyNewsEntry {
    public banner: BuddyBanner;
    public contact: Contact;
    public memberCount: Int64;
    public subtitle: string;
    public releasedTime: Int64;
    public newsId: Int64;

      constructor(args?: { banner: BuddyBanner; contact: Contact; memberCount: Int64; subtitle: string; releasedTime: Int64; newsId: Int64; });
  }

declare class BuddyNewsView {
    public hasNext: boolean;
    public newsEntries: BuddyNewsEntry[];

      constructor(args?: { hasNext: boolean; newsEntries: BuddyNewsEntry[]; });
  }

declare class BuddyOnAir {
    public mid: string;
    public freshnessLifetime: Int64;
    public onAirId: string;
    public onAir: boolean;
    public text: string;
    public viewerCount: Int64;
    public targetCount: Int64;
    public livePlayTime: Int64;
    public screenAspectRate: string;
    public onAirType: BuddyOnAirType;
    public onAirUrls: BuddyOnAirUrls;
    public aspectRatioOfSource: string;
    public useFadingOut: boolean;
    public fadingOutIn: Int64;
    public urlAfterFadingOut: string;
    public labelAfterFadingOut: string;
    public useLowerBanner: boolean;
    public lowerBannerUrl: string;
    public lowerBannerLabel: string;

      constructor(args?: { mid: string; freshnessLifetime: Int64; onAirId: string; onAir: boolean; text: string; viewerCount: Int64; targetCount: Int64; livePlayTime: Int64; screenAspectRate: string; onAirType: BuddyOnAirType; onAirUrls: BuddyOnAirUrls; aspectRatioOfSource: string; useFadingOut: boolean; fadingOutIn: Int64; urlAfterFadingOut: string; labelAfterFadingOut: string; useLowerBanner: boolean; lowerBannerUrl: string; lowerBannerLabel: string; });
  }

declare class BuddyOnAirUrls {
    public hls: { [k: string]: string; };
    public smoothStreaming: { [k: string]: string; };

      constructor(args?: { hls: { [k: string]: string; }; smoothStreaming: { [k: string]: string; }; });
  }

declare class BuddyProfile {
    public buddyId: string;
    public mid: string;
    public searchId: string;
    public displayName: string;
    public statusMessage: string;
    public contactCount: Int64;

      constructor(args?: { buddyId: string; mid: string; searchId: string; displayName: string; statusMessage: string; contactCount: Int64; });
  }

declare class BuddyProfilePopup {
    public popupType: BuddyProfilePopupType;
    public linkUrl: string;
    public backgroundColorRgb: number;
    public textColorRgb: number;
    public label: string;

      constructor(args?: { popupType: BuddyProfilePopupType; linkUrl: string; backgroundColorRgb: number; textColorRgb: number; label: string; });
  }

declare class BuddyRichMenuChatBarItem {
    public label: string;
    public body: string;
    public selected: boolean;

      constructor(args?: { label: string; body: string; selected: boolean; });
  }

declare class BuddyRichMenuContents {
    public body: string;

      constructor(args?: { body: string; });
  }

declare class BuddySearchResult {
    public mid: string;
    public displayName: string;
    public pictureStatus: string;
    public picturePath: string;
    public statusMessage: string;
    public businessAccount: boolean;
    public iconType: number;
    public botType: BotType;

      constructor(args?: { mid: string; displayName: string; pictureStatus: string; picturePath: string; statusMessage: string; businessAccount: boolean; iconType: number; botType: BotType; });
  }

declare class BuddyStatusBar {
    public label: string;
    public displayType: BuddyStatusBarDisplayType;

      constructor(args?: { label: string; displayType: BuddyStatusBarDisplayType; });
  }

declare class BuddyTopView {
    public banners: BuddyBanner[];
    public collections: BuddyCollection[];
    public rotationInterval: Int64;

      constructor(args?: { banners: BuddyBanner[]; collections: BuddyCollection[]; rotationInterval: Int64; });
  }

declare class BuddyWebChatBarItem {
    public label: string;
    public url: string;

      constructor(args?: { label: string; url: string; });
  }

declare class BuddyWidget {
    public icon: string;
    public label: string;
    public url: string;

      constructor(args?: { icon: string; label: string; url: string; });
  }

declare class BuddyWidgetListCharBarItem {
    public label: string;
    public widgets: BuddyWidget[];
    public selected: boolean;

      constructor(args?: { label: string; widgets: BuddyWidget[]; selected: boolean; });
  }

declare class CallHost {
    public host: string;
    public port: number;
    public zone: string;

      constructor(args?: { host: string; port: number; zone: string; });
  }

declare class ChannelDomain {
    public host: string;
    public removed: boolean;

      constructor(args?: { host: string; removed: boolean; });
  }

declare class ChannelDomains {
    public channelDomains: ChannelDomain[];
    public revision: Int64;

      constructor(args?: { channelDomains: ChannelDomain[]; revision: Int64; });
  }

declare class ChannelException extends Thrift.TException {
    public code: ChannelErrorCode;
    public reason: string;
    public parameterMap: { [k: string]: string; };

      constructor(args?: { code: ChannelErrorCode; reason: string; parameterMap: { [k: string]: string; }; });
  }

declare class ChannelIdWithLastUpdated {
    public channelId: string;
    public lastUpdated: Int64;

      constructor(args?: { channelId: string; lastUpdated: Int64; });
  }

declare class ChannelInfo {
    public channelId: string;
    public name: string;
    public entryPageUrl: string;
    public descriptionText: string;
    public provider: ChannelProvider;
    public publicType: PublicType;
    public iconImage: string;
    public permissions: string[];
    public iconThumbnailImage: string;
    public channelConfigurations: ChannelConfiguration[];
    public lcsAllApiUsable: boolean;
    public allowedPermissions: ChannelPermission[];
    public channelDomains: ChannelDomain[];
    public updatedTimestamp: Int64;

      constructor(args?: { channelId: string; name: string; entryPageUrl: string; descriptionText: string; provider: ChannelProvider; publicType: PublicType; iconImage: string; permissions: string[]; iconThumbnailImage: string; channelConfigurations: ChannelConfiguration[]; lcsAllApiUsable: boolean; allowedPermissions: ChannelPermission[]; channelDomains: ChannelDomain[]; updatedTimestamp: Int64; });
  }

declare class ChannelInfos {
    public channelInfos: ChannelInfo[];
    public revision: Int64;

      constructor(args?: { channelInfos: ChannelInfo[]; revision: Int64; });
  }

declare class ChannelNotificationSetting {
    public channelId: string;
    public name: string;
    public notificationReceivable: boolean;
    public messageReceivable: boolean;
    public showDefault: boolean;

      constructor(args?: { channelId: string; name: string; notificationReceivable: boolean; messageReceivable: boolean; showDefault: boolean; });
  }

declare class ChannelProvider {
    public name: string;

      constructor(args?: { name: string; });
  }

declare class ChannelSettings {
    public unapprovedMessageReceivable: boolean;

      constructor(args?: { unapprovedMessageReceivable: boolean; });
  }

declare class ChannelSyncDatas {
    public channelInfos: ChannelInfo[];
    public channelDomains: ChannelDomain[];
    public revision: Int64;
    public expires: Int64;

      constructor(args?: { channelInfos: ChannelInfo[]; channelDomains: ChannelDomain[]; revision: Int64; expires: Int64; });
  }

declare class ChannelToken {
    public token: string;
    public obsToken: string;
    public expiration: Int64;
    public refreshToken: string;
    public channelAccessToken: string;

      constructor(args?: { token: string; obsToken: string; expiration: Int64; refreshToken: string; channelAccessToken: string; });
  }

declare class ClientLastStatus {
    public lastRev: Int64;
    public badgeCount: number;

      constructor(args?: { lastRev: Int64; badgeCount: number; });
  }

declare class Coin {
    public freeCoinBalance: number;
    public payedCoinBalance: number;
    public totalCoinBalance: number;
    public rewardCoinBalance: number;

      constructor(args?: { freeCoinBalance: number; payedCoinBalance: number; totalCoinBalance: number; rewardCoinBalance: number; });
  }

declare class CoinHistory {
    public payDate: Int64;
    public coinBalance: number;
    public coin: number;
    public price: string;
    public title: string;
    public refund: boolean;
    public paySeq: string;
    public currency: string;
    public currencySign: string;
    public displayPrice: string;
    public payload: CoinPayLoad;
    public channelId: string;

      constructor(args?: { payDate: Int64; coinBalance: number; coin: number; price: string; title: string; refund: boolean; paySeq: string; currency: string; currencySign: string; displayPrice: string; payload: CoinPayLoad; channelId: string; });
  }

declare class CoinHistoryCondition {
    public start: Int64;
    public size: number;
    public language: string;
    public eddt: string;
    public appStoreCode: PaymentType;

      constructor(args?: { start: Int64; size: number; language: string; eddt: string; appStoreCode: PaymentType; });
  }

declare class CoinHistoryResult {
    public historys: CoinHistory[];
    public balance: Coin;
    public hasNext: boolean;

      constructor(args?: { historys: CoinHistory[]; balance: Coin; hasNext: boolean; });
  }

declare class CoinPayLoad {
    public payCoin: number;
    public freeCoin: number;
    public type: PayloadType;
    public rewardCoin: number;

      constructor(args?: { payCoin: number; freeCoin: number; type: PayloadType; rewardCoin: number; });
  }

declare class CoinProductItem {
    public itemId: string;
    public coin: number;
    public freeCoin: number;
    public currency: string;
    public price: string;
    public displayPrice: string;
    public name: string;
    public desc: string;

      constructor(args?: { itemId: string; coin: number; freeCoin: number; currency: string; price: string; displayPrice: string; name: string; desc: string; });
  }

declare class CoinPurchaseConfirm {
    public orderId: string;
    public appStoreCode: PaymentType;
    public receipt: string;
    public signature: string;
    public seller: string;
    public requestType: string;
    public ignoreReceipt: boolean;

      constructor(args?: { orderId: string; appStoreCode: PaymentType; receipt: string; signature: string; seller: string; requestType: string; ignoreReceipt: boolean; });
  }

declare class CoinPurchaseReservation {
    public productId: string;
    public country: string;
    public currency: string;
    public price: string;
    public appStoreCode: PaymentType;
    public language: string;
    public pgCode: PaymentPgType;
    public redirectUrl: string;

      constructor(args?: { productId: string; country: string; currency: string; price: string; appStoreCode: PaymentType; language: string; pgCode: PaymentPgType; redirectUrl: string; });
  }

declare class CoinUseReservation {
    public channelId: string;
    public shopOrderId: string;
    public appStoreCode: PaymentType;
    public items: CoinUseReservationItem[];
    public country: string;

      constructor(args?: { channelId: string; shopOrderId: string; appStoreCode: PaymentType; items: CoinUseReservationItem[]; country: string; });
  }

declare class CoinUseReservationItem {
    public itemId: string;
    public itemName: string;
    public amount: number;

      constructor(args?: { itemId: string; itemName: string; amount: number; });
  }

declare class CommitMessageResult {
    public message: Message;
    public code: CommitMessageResultCode;
    public reason: string;
    public successCount: Int64;
    public failCount: Int64;
    public unregisterCount: Int64;
    public blockCount: Int64;

      constructor(args?: { message: Message; code: CommitMessageResultCode; reason: string; successCount: Int64; failCount: Int64; unregisterCount: Int64; blockCount: Int64; });
  }

declare class CommitSendMessagesToMidRequest {
    public seq: number;
    public messageIds: string[];

      constructor(args?: { seq: number; messageIds: string[]; });
  }

declare class CommitSendMessagesToMidResponse {
    public successCount: Int64;
    public failCount: Int64;
    public unregisterCount: Int64;
    public blockCount: Int64;

      constructor(args?: { successCount: Int64; failCount: Int64; unregisterCount: Int64; blockCount: Int64; });
  }

declare class CompactContact {
    public mid: string;
    public createdTime: Int64;
    public modifiedTime: Int64;
    public status: ContactStatus;
    public settings: Int64;
    public displayNameOverridden: string;

      constructor(args?: { mid: string; createdTime: Int64; modifiedTime: Int64; status: ContactStatus; settings: Int64; displayNameOverridden: string; });
  }

declare class Configurations {
    public revision: Int64;
    public configMap: { [k: string]: string; };

      constructor(args?: { revision: Int64; configMap: { [k: string]: string; }; });
  }

declare class Contact {
    public mid: string;
    public createdTime: Int64;
    public type: ContactType;
    public status: ContactStatus;
    public relation: ContactRelation;
    public displayName: string;
    public phoneticName: string;
    public pictureStatus: string;
    public thumbnailUrl: string;
    public statusMessage: string;
    public displayNameOverridden: string;
    public favoriteTime: Int64;
    public capableVoiceCall: boolean;
    public capableVideoCall: boolean;
    public capableMyhome: boolean;
    public capableBuddy: boolean;
    public attributes: number;
    public settings: Int64;
    public picturePath: string;
    public recommendParams: string;
    public friendRequestStatus: FriendRequestStatus;
    public musicProfile: string;
    public videoProfile: string;

      constructor(args?: { mid: string; createdTime: Int64; type: ContactType; status: ContactStatus; relation: ContactRelation; displayName: string; phoneticName: string; pictureStatus: string; thumbnailUrl: string; statusMessage: string; displayNameOverridden: string; favoriteTime: Int64; capableVoiceCall: boolean; capableVideoCall: boolean; capableMyhome: boolean; capableBuddy: boolean; attributes: number; settings: Int64; picturePath: string; recommendParams: string; friendRequestStatus: FriendRequestStatus; musicProfile: string; videoProfile: string; });
  }

declare class ContactModification {
    public type: ModificationType;
    public luid: string;
    public phones: string[];
    public emails: string[];
    public userids: string[];

      constructor(args?: { type: ModificationType; luid: string; phones: string[]; emails: string[]; userids: string[]; });
  }

declare class ContactRegistration {
    public contact: Contact;
    public luid: string;
    public contactType: ContactType;
    public contactKey: string;

      constructor(args?: { contact: Contact; luid: string; contactType: ContactType; contactKey: string; });
  }

declare class ContactReport {
    public mid: string;
    public exists: boolean;
    public contact: Contact;

      constructor(args?: { mid: string; exists: boolean; contact: Contact; });
  }

declare class ContactReportResult {
    public mid: string;
    public exists: boolean;

      constructor(args?: { mid: string; exists: boolean; });
  }

declare class ContactTransition {
    public ownerMid: string;
    public targetMid: string;
    public previousStatus: ContactStatus;
    public resultStatus: ContactStatus;

      constructor(args?: { ownerMid: string; targetMid: string; previousStatus: ContactStatus; resultStatus: ContactStatus; });
  }

declare class DeviceInfo {
    public deviceName: string;
    public systemName: string;
    public systemVersion: string;
    public model: string;
    public webViewVersion: string;
    public carrierCode: CarrierCode;
    public carrierName: string;
    public applicationType: ApplicationType;

      constructor(args?: { deviceName: string; systemName: string; systemVersion: string; model: string; webViewVersion: string; carrierCode: CarrierCode; carrierName: string; applicationType: ApplicationType; });
  }

declare class E2EEGroupSharedKey {
    public version: number;
    public groupKeyId: number;
    public creator: string;
    public creatorKeyId: number;
    public receiver: string;
    public receiverKeyId: number;
    public encryptedSharedKey: string;
    public allowedTypes: ContentType[];

      constructor(args?: { version: number; groupKeyId: number; creator: string; creatorKeyId: number; receiver: string; receiverKeyId: number; encryptedSharedKey: string; allowedTypes: ContentType[]; });
  }

declare class E2EEKey {
    public version: number;
    public keyId: number;
    public publicKey: string;
    public privateKey: string;
    public createdTime: Int64;

      constructor(args?: { version: number; keyId: number; publicKey: string; privateKey: string; createdTime: Int64; });
  }

declare class E2EEKeyChain {
    public keychain: E2EEKey[];

      constructor(args?: { keychain: E2EEKey[]; });
  }

declare class E2EENegotiationResult {
    public allowedTypes: ContentType[];
    public publicKey: E2EEPublicKey;

      constructor(args?: { allowedTypes: ContentType[]; publicKey: E2EEPublicKey; });
  }

declare class E2EEPublicKey {
    public version: number;
    public keyId: number;
    public keyData: string;
    public createdTime: Int64;

      constructor(args?: { version: number; keyId: number; keyData: string; createdTime: Int64; });
  }

declare class EmailConfirmation {
    public usePasswordSet: boolean;
    public email: string;
    public password: string;
    public ignoreDuplication: boolean;
    public useEmailOnly: boolean;

      constructor(args?: { usePasswordSet: boolean; email: string; password: string; ignoreDuplication: boolean; useEmailOnly: boolean; });
  }

declare class EmailConfirmationResult {
    public certificate: string;

      constructor(args?: { certificate: string; });
  }

declare class EmailConfirmationSession {
    public emailConfirmationType: EmailConfirmationType;
    public verifier: string;
    public targetEmail: string;

      constructor(args?: { emailConfirmationType: EmailConfirmationType; verifier: string; targetEmail: string; });
  }

declare class ExtendedProfile {
    public birthday: ExtendedProfileBirthday;

      constructor(args?: { birthday: ExtendedProfileBirthday; });
  }

declare class ExtendedProfileBirthday {
    public year: string;
    public yearPrivacyLevelType: PrivacyLevelType;
    public yearEnabled: boolean;
    public day: string;
    public dayPrivacyLevelType: PrivacyLevelType;
    public dayEnabled: boolean;

      constructor(args?: { year: string; yearPrivacyLevelType: PrivacyLevelType; yearEnabled: boolean; day: string; dayPrivacyLevelType: PrivacyLevelType; dayEnabled: boolean; });
  }

declare class FriendChannelMatricesResponse {
    public expires: Int64;
    public matrices: FriendChannelMatrix[];

      constructor(args?: { expires: Int64; matrices: FriendChannelMatrix[]; });
  }

declare class FriendChannelMatrix {
    public channelId: string;
    public representMid: string;
    public count: number;
    public point: number;

      constructor(args?: { channelId: string; representMid: string; count: number; point: number; });
  }

declare class FriendRequest {
    public eMid: string;
    public mid: string;
    public direction: FriendRequestDirection;
    public method: FriendRequestMethod;
    public param: string;
    public timestamp: Int64;
    public seqId: Int64;
    public displayName: string;
    public picturePath: string;
    public pictureStatus: string;

      constructor(args?: { eMid: string; mid: string; direction: FriendRequestDirection; method: FriendRequestMethod; param: string; timestamp: Int64; seqId: Int64; displayName: string; picturePath: string; pictureStatus: string; });
  }

declare class FriendRequestsInfo {
    public totalIncomingCount: number;
    public totalOutgoingCount: number;
    public recentIncomings: FriendRequest[];
    public recentOutgoings: FriendRequest[];
    public totalIncomingLimit: number;
    public totalOutgoingLimit: number;

      constructor(args?: { totalIncomingCount: number; totalOutgoingCount: number; recentIncomings: FriendRequest[]; recentOutgoings: FriendRequest[]; totalIncomingLimit: number; totalOutgoingLimit: number; });
  }

declare class Geolocation {
    public longitude: number;
    public latitude: number;

      constructor(args?: { longitude: number; latitude: number; });
  }

declare class GetBalanceRequest {
  }

declare class GetBalanceResponse {
    public balance: Balance;

      constructor(args?: { balance: Balance; });
  }

declare class GetCoinHistoryRequest {
    public appStoreCode: PaymentType;
    public country: string;
    public language: string;
    public searchEndDate: string;
    public offset: number;
    public limit: number;

      constructor(args?: { appStoreCode: PaymentType; country: string; language: string; searchEndDate: string; offset: number; limit: number; });
  }

declare class GetCoinHistoryResponse {
    public histories: CoinHistory[];
    public balance: Coin;
    public offset: number;
    public hasNext: boolean;

      constructor(args?: { histories: CoinHistory[]; balance: Coin; offset: number; hasNext: boolean; });
  }

declare class GetCoinProductsRequest {
    public appStoreCode: PaymentType;
    public country: string;
    public language: string;
    public pgCode: PaymentPgType;

      constructor(args?: { appStoreCode: PaymentType; country: string; language: string; pgCode: PaymentPgType; });
  }

declare class GetCoinProductsResponse {
    public items: CoinProductItem[];

      constructor(args?: { items: CoinProductItem[]; });
  }

declare class GetTotalCoinBalanceRequest {
    public appStoreCode: PaymentType;

      constructor(args?: { appStoreCode: PaymentType; });
  }

declare class GetTotalCoinBalanceResponse {
    public totalBalance: string;
    public paidCoinBalance: string;
    public freeCoinBalance: string;
    public rewardCoinBalance: string;
    public expectedAutoExchangedCoinBalance: string;

      constructor(args?: { totalBalance: string; paidCoinBalance: string; freeCoinBalance: string; rewardCoinBalance: string; expectedAutoExchangedCoinBalance: string; });
  }

declare class Group {
    public id: string;
    public createdTime: Int64;
    public name: string;
    public pictureStatus: string;
    public preventedJoinByTicket: boolean;
    public groupPreference: GroupPreference;
    public members: Contact[];
    public creator: Contact;
    public invitee: Contact[];
    public notificationDisabled: boolean;
    public picturePath: string;
    public memberMids: string[];
    public inviteeMids: string[];

      constructor(args?: { id: string; createdTime: Int64; name: string; pictureStatus: string; preventedJoinByTicket: boolean; groupPreference: GroupPreference; members: Contact[]; creator: Contact; invitee: Contact[]; notificationDisabled: boolean; picturePath: string; memberMids: string[]; inviteeMids: string[]; });
  }

declare class GroupCall {
    public online: boolean;
    public chatMid: string;
    public hostMid: string;
    public memberMids: string[];
    public started: Int64;
    public mediaType: GroupCallMediaType;

      constructor(args?: { online: boolean; chatMid: string; hostMid: string; memberMids: string[]; started: Int64; mediaType: GroupCallMediaType; });
  }

declare class GroupCallRoute {
    public token: string;
    public cscf: CallHost;
    public mix: CallHost;

      constructor(args?: { token: string; cscf: CallHost; mix: CallHost; });
  }

declare class GroupPreference {
    public invitationTicket: string;
    public favoriteTimestamp: Int64;

      constructor(args?: { invitationTicket: string; favoriteTimestamp: Int64; });
  }

declare class IdentityCredential {
    public provider: IdentityProvider;
    public identifier: string;
    public password: string;

      constructor(args?: { provider: IdentityProvider; identifier: string; password: string; });
  }

declare class Location {
    public title: string;
    public address: string;
    public latitude: number;
    public longitude: number;
    public phone: string;

      constructor(args?: { title: string; address: string; latitude: number; longitude: number; phone: string; });
  }

declare class LoginRequest {
    public type: LoginType;
    public identityProvider: IdentityProvider;
    public identifier: string;
    public password: string;
    public keepLoggedIn: boolean;
    public accessLocation: string;
    public systemName: string;
    public certificate: string;
    public verifier: string;
    public secret: string;
    public e2eeVersion: number;

      constructor(args?: { type: LoginType; identityProvider: IdentityProvider; identifier: string; password: string; keepLoggedIn: boolean; accessLocation: string; systemName: string; certificate: string; verifier: string; secret: string; e2eeVersion: number; });
  }

declare class LoginResult {
    public authToken: string;
    public certificate: string;
    public verifier: string;
    public pinCode: string;
    public type: LoginResultType;
    public lastPrimaryBindTime: Int64;
    public displayMessage: string;
    public sessionForSMSConfirm: VerificationSessionData;

      constructor(args?: { authToken: string; certificate: string; verifier: string; pinCode: string; type: LoginResultType; lastPrimaryBindTime: Int64; displayMessage: string; sessionForSMSConfirm: VerificationSessionData; });
  }

declare class LoginSession {
    public tokenKey: string;
    public expirationTime: Int64;
    public applicationType: ApplicationType;
    public systemName: string;
    public accessLocation: string;

      constructor(args?: { tokenKey: string; expirationTime: Int64; applicationType: ApplicationType; systemName: string; accessLocation: string; });
  }

declare class Message {
    public from_: string;
    public to: string;
    public toType: MIDType;
    public id: string;
    public createdTime: Int64;
    public deliveredTime: Int64;
    public text: string;
    public location: Location;
    public hasContent: boolean;
    public contentType: ContentType;
    public contentPreview: string;
    public contentMetadata: { [k: string]: string; };
    public sessionId: any;
    public chunks: string[];
    public relatedMessageId: string;
    public messageRelationType: MessageRelationType;
    public readCount: number;
    public relatedMessageServiceCode: ServiceCode;

      constructor(args?: { from_: string; to: string; toType: MIDType; id: string; createdTime: Int64; deliveredTime: Int64; text: string; location: Location; hasContent: boolean; contentType: ContentType; contentPreview: string; contentMetadata: { [k: string]: string; }; sessionId: any; chunks: string[]; relatedMessageId: string; messageRelationType: MessageRelationType; readCount: number; relatedMessageServiceCode: ServiceCode; });
  }

declare class MessageBoxV2MessageId {
    public deliveredTime: Int64;
    public messageId: Int64;

      constructor(args?: { deliveredTime: Int64; messageId: Int64; });
  }

declare class MessageCommitResult {
    public requestId: string;
    public state: BuddyResultState;
    public messageStoreRequestId: string;
    public messageIds: string[];
    public receiverCount: Int64;
    public successCount: Int64;
    public failCount: Int64;
    public blockCount: Int64;
    public unregisteredCount: Int64;
    public unrelatedCount: Int64;
    public errorDescription: string;

      constructor(args?: { requestId: string; state: BuddyResultState; messageStoreRequestId: string; messageIds: string[]; receiverCount: Int64; successCount: Int64; failCount: Int64; blockCount: Int64; unregisteredCount: Int64; unrelatedCount: Int64; errorDescription: string; });
  }

declare class MessageStoreResult {
    public requestId: string;
    public messageIds: string[];

      constructor(args?: { requestId: string; messageIds: string[]; });
  }

declare class MetaProfile {
    public createTime: Int64;
    public regionCode: string;
    public identities: any;
    public udid: string;

      constructor(args?: { createTime: Int64; regionCode: string; identities: any; udid: string; });
  }

declare class MoretabRecommend {
    public accounts: MoretabRecommendAccount[];
    public nextUpdateTime: Int64;
    public cacheTtlMillis: Int64;

      constructor(args?: { accounts: MoretabRecommendAccount[]; nextUpdateTime: Int64; cacheTtlMillis: Int64; });
  }

declare class MoretabRecommendAccount {
    public mid: string;
    public displayName: string;
    public statusMessage: string;
    public pictureStatus: string;
    public picturePath: string;

      constructor(args?: { mid: string; displayName: string; statusMessage: string; pictureStatus: string; picturePath: string; });
  }

declare class NearbyEntry {
    public emid: string;
    public distance: number;
    public lastUpdatedInSec: number;
    public property: { [k: string]: string; };
    public profile: Profile;

      constructor(args?: { emid: string; distance: number; lastUpdatedInSec: number; property: { [k: string]: string; }; profile: Profile; });
  }

declare class NotiCenterEventData {
    public id: string;
    public to: string;
    public from_: string;
    public toChannel: string;
    public fromChannel: string;
    public eventType: string;
    public createdTime: Int64;
    public operationRevision: Int64;
    public content: { [k: string]: string; };
    public push: { [k: string]: string; };

      constructor(args?: { id: string; to: string; from_: string; toChannel: string; fromChannel: string; eventType: string; createdTime: Int64; operationRevision: Int64; content: { [k: string]: string; }; push: { [k: string]: string; }; });
  }

declare class NotificationFetchResult {
    public fetchMode: NotificationItemFetchMode;
    public itemList: NotificationItem[];

      constructor(args?: { fetchMode: NotificationItemFetchMode; itemList: NotificationItem[]; });
  }

declare class NotificationItem {
    public id: string;
    public from_: string;
    public to: string;
    public fromChannel: string;
    public toChannel: string;
    public revision: Int64;
    public createdTime: Int64;
    public content: { [k: string]: string; };

      constructor(args?: { id: string; from_: string; to: string; fromChannel: string; toChannel: string; revision: Int64; createdTime: Int64; content: { [k: string]: string; }; });
  }

declare class Operation {
    public revision: Int64;
    public createdTime: Int64;
    public type: OpType;
    public reqSeq: number;
    public checksum: string;
    public status: OpStatus;
    public param1: string;
    public param2: string;
    public param3: string;
    public message: Message;

      constructor(args?: { revision: Int64; createdTime: Int64; type: OpType; reqSeq: number; checksum: string; status: OpStatus; param1: string; param2: string; param3: string; message: Message; });
  }

declare class OTPResult {
    public otpId: string;
    public otp: string;

      constructor(args?: { otpId: string; otp: string; });
  }

declare class PaidCallAdCountry {
    public countryCode: string;
    public rateDivision: string;

      constructor(args?: { countryCode: string; rateDivision: string; });
  }

declare class PaidCallAdResult {
    public adRemains: number;

      constructor(args?: { adRemains: number; });
  }

declare class PaidCallBalance {
    public productType: PaidCallProductType;
    public productName: string;
    public unit: string;
    public limitedPaidBalance: number;
    public limitedFreeBalance: number;
    public unlimitedPaidBalance: number;
    public unlimitedFreeBalance: number;
    public startTime: Int64;
    public endTime: Int64;
    public autopayEnabled: boolean;

      constructor(args?: { productType: PaidCallProductType; productName: string; unit: string; limitedPaidBalance: number; limitedFreeBalance: number; unlimitedPaidBalance: number; unlimitedFreeBalance: number; startTime: Int64; endTime: Int64; autopayEnabled: boolean; });
  }

declare class PaidCallCurrencyExchangeRate {
    public currencyCode: string;
    public currencyName: string;
    public currencySign: string;
    public preferred: boolean;
    public coinRate: string;
    public creditRate: string;

      constructor(args?: { currencyCode: string; currencyName: string; currencySign: string; preferred: boolean; coinRate: string; creditRate: string; });
  }

declare class PaidCallDialing {
    public type: PaidCallType;
    public dialedNumber: string;
    public serviceDomain: string;
    public productType: PaidCallProductType;
    public productName: string;
    public multipleProduct: boolean;
    public callerIdStatus: PaidCallerIdStatus;
    public balance: number;
    public unit: string;
    public rate: number;
    public displayCode: string;
    public calledNumber: string;
    public calleeNationalNumber: string;
    public calleeCallingCode: string;
    public rateDivision: string;
    public adMaxMin: number;
    public adRemains: number;
    public adSessionId: string;

      constructor(args?: { type: PaidCallType; dialedNumber: string; serviceDomain: string; productType: PaidCallProductType; productName: string; multipleProduct: boolean; callerIdStatus: PaidCallerIdStatus; balance: number; unit: string; rate: number; displayCode: string; calledNumber: string; calleeNationalNumber: string; calleeCallingCode: string; rateDivision: string; adMaxMin: number; adRemains: number; adSessionId: string; });
  }

declare class PaidCallHistory {
    public seq: Int64;
    public type: PaidCallType;
    public dialedNumber: string;
    public calledNumber: string;
    public toMid: string;
    public toName: string;
    public setupTime: Int64;
    public startTime: Int64;
    public endTime: Int64;
    public duration: Int64;
    public terminate: number;
    public productType: PaidCallProductType;
    public charge: number;
    public unit: string;
    public result: string;

      constructor(args?: { seq: Int64; type: PaidCallType; dialedNumber: string; calledNumber: string; toMid: string; toName: string; setupTime: Int64; startTime: Int64; endTime: Int64; duration: Int64; terminate: number; productType: PaidCallProductType; charge: number; unit: string; result: string; });
  }

declare class PaidCallHistoryResult {
    public historys: PaidCallHistory[];
    public hasNext: boolean;

      constructor(args?: { historys: PaidCallHistory[]; hasNext: boolean; });
  }

declare class PaidCallMetadataResult {
    public currencyExchangeRates: PaidCallCurrencyExchangeRate[];
    public recommendedCountryCodes: string[];
    public adCountries: PaidCallAdCountry[];

      constructor(args?: { currencyExchangeRates: PaidCallCurrencyExchangeRate[]; recommendedCountryCodes: string[]; adCountries: PaidCallAdCountry[]; });
  }

declare class PaidCallRedeemResult {
    public eventName: string;
    public eventAmount: number;

      constructor(args?: { eventName: string; eventAmount: number; });
  }

declare class PaidCallResponse {
    public host: CallHost;
    public dialing: PaidCallDialing;
    public token: string;
    public spotItems: SpotItem[];

      constructor(args?: { host: CallHost; dialing: PaidCallDialing; token: string; spotItems: SpotItem[]; });
  }

declare class PaidCallUserRate {
    public countryCode: string;
    public rate: number;
    public rateDivision: string;
    public rateName: string;

      constructor(args?: { countryCode: string; rate: number; rateDivision: string; rateName: string; });
  }

declare class PaymentReservation {
    public receiverMid: string;
    public productId: string;
    public language: string;
    public location: string;
    public currency: string;
    public price: string;
    public appStoreCode: PaymentType;
    public messageText: string;
    public messageTemplate: number;
    public packageId: Int64;

      constructor(args?: { receiverMid: string; productId: string; language: string; location: string; currency: string; price: string; appStoreCode: PaymentType; messageText: string; messageTemplate: number; packageId: Int64; });
  }

declare class PaymentReservationResult {
    public orderId: string;
    public confirmUrl: string;
    public extras: { [k: string]: string; };

      constructor(args?: { orderId: string; confirmUrl: string; extras: { [k: string]: string; }; });
  }

declare class PhoneInfoForChannel {
    public mid: string;
    public normalizedPhoneNumber: string;
    public allowedToSearchByPhoneNumber: boolean;
    public allowedToReceiveMessageFromNonFriend: boolean;
    public region: string;

      constructor(args?: { mid: string; normalizedPhoneNumber: string; allowedToSearchByPhoneNumber: boolean; allowedToReceiveMessageFromNonFriend: boolean; region: string; });
  }

declare class PhoneVerificationResult {
    public verificationResult: VerificationResult;
    public accountMigrationCheckType: AccountMigrationCheckType;
    public recommendAddFriends: boolean;

      constructor(args?: { verificationResult: VerificationResult; accountMigrationCheckType: AccountMigrationCheckType; recommendAddFriends: boolean; });
  }

declare class PlaceSearchInfo {
    public name: string;
    public address: string;
    public latitude: number;
    public longitude: number;

      constructor(args?: { name: string; address: string; latitude: number; longitude: number; });
  }

declare class PointException extends Thrift.TException {
    public code: PointErrorCode;
    public reason: string;
    public extra: { [k: string]: string; };

      constructor(args?: { code: PointErrorCode; reason: string; extra: { [k: string]: string; }; });
  }

declare class PrivateBotMessage {
    public message: Message;
    public linkFrom: string;

      constructor(args?: { message: Message; linkFrom: string; });
  }

declare class Product {
    public productId: string;
    public packageId: Int64;
    public version: number;
    public authorName: string;
    public onSale: boolean;
    public validDays: number;
    public saleType: number;
    public copyright: string;
    public title: string;
    public descriptionText: string;
    public shopOrderId: Int64;
    public fromMid: string;
    public toMid: string;
    public validUntil: Int64;
    public priceTier: number;
    public price: string;
    public currency: string;
    public currencySymbol: string;
    public paymentType: PaymentType;
    public createDate: Int64;
    public ownFlag: boolean;
    public eventType: ProductEventType;
    public urlSchema: string;
    public downloadUrl: string;
    public buddyMid: string;
    public publishSince: Int64;
    public newFlag: boolean;
    public missionFlag: boolean;
    public categories: ProductCategory[];
    public missionButtonText: string;
    public missionShortDescription: string;
    public authorId: string;
    public grantedByDefault: boolean;
    public displayOrder: number;
    public availableForPresent: boolean;
    public availableForMyself: boolean;
    public hasAnimation: boolean;
    public hasSound: boolean;
    public recommendationsEnabled: boolean;
    public stickerResourceType: StickerResourceType;

      constructor(args?: { productId: string; packageId: Int64; version: number; authorName: string; onSale: boolean; validDays: number; saleType: number; copyright: string; title: string; descriptionText: string; shopOrderId: Int64; fromMid: string; toMid: string; validUntil: Int64; priceTier: number; price: string; currency: string; currencySymbol: string; paymentType: PaymentType; createDate: Int64; ownFlag: boolean; eventType: ProductEventType; urlSchema: string; downloadUrl: string; buddyMid: string; publishSince: Int64; newFlag: boolean; missionFlag: boolean; categories: ProductCategory[]; missionButtonText: string; missionShortDescription: string; authorId: string; grantedByDefault: boolean; displayOrder: number; availableForPresent: boolean; availableForMyself: boolean; hasAnimation: boolean; hasSound: boolean; recommendationsEnabled: boolean; stickerResourceType: StickerResourceType; });
  }

declare class ProductCategory {
    public productCategoryId: Int64;
    public title: string;
    public productCount: number;
    public newFlag: boolean;

      constructor(args?: { productCategoryId: Int64; title: string; productCount: number; newFlag: boolean; });
  }

declare class ProductList {
    public hasNext: boolean;
    public bannerSequence: Int64;
    public bannerTargetType: ProductBannerLinkType;
    public bannerTargetPath: string;
    public productList: Product[];
    public bannerLang: string;

      constructor(args?: { hasNext: boolean; bannerSequence: Int64; bannerTargetType: ProductBannerLinkType; bannerTargetPath: string; productList: Product[]; bannerLang: string; });
  }

declare class ProductSimple {
    public productId: string;
    public packageId: Int64;
    public version: number;
    public onSale: boolean;
    public validUntil: Int64;
    public stickerIdRanges: StickerIdRange[];
    public grantedByDefault: boolean;
    public displayOrder: number;

      constructor(args?: { productId: string; packageId: Int64; version: number; onSale: boolean; validUntil: Int64; stickerIdRanges: StickerIdRange[]; grantedByDefault: boolean; displayOrder: number; });
  }

declare class ProductSimpleList {
    public hasNext: boolean;
    public reinvokeHour: number;
    public lastVersionSeq: Int64;
    public productList: ProductSimple[];
    public recentNewReleaseDate: Int64;
    public recentEventReleaseDate: Int64;

      constructor(args?: { hasNext: boolean; reinvokeHour: number; lastVersionSeq: Int64; productList: ProductSimple[]; recentNewReleaseDate: Int64; recentEventReleaseDate: Int64; });
  }

declare class Profile {
    public mid: string;
    public userid: string;
    public phone: string;
    public email: string;
    public regionCode: string;
    public displayName: string;
    public phoneticName: string;
    public pictureStatus: string;
    public thumbnailUrl: string;
    public statusMessage: string;
    public allowSearchByUserid: boolean;
    public allowSearchByEmail: boolean;
    public picturePath: string;
    public musicProfile: string;
    public videoProfile: string;

      constructor(args?: { mid: string; userid: string; phone: string; email: string; regionCode: string; displayName: string; phoneticName: string; pictureStatus: string; thumbnailUrl: string; statusMessage: string; allowSearchByUserid: boolean; allowSearchByEmail: boolean; picturePath: string; musicProfile: string; videoProfile: string; });
  }

declare class ProximityMatchCandidateEntry {
    public contact: Contact;
    public buddyDetail: BuddyDetail;

      constructor(args?: { contact: Contact; buddyDetail: BuddyDetail; });
  }

declare class ProximityMatchCandidateResult {
    public users: ProximityMatchCandidateEntry[];
    public buddies: ProximityMatchCandidateEntry[];
    public endOfResult: boolean;

      constructor(args?: { users: ProximityMatchCandidateEntry[]; buddies: ProximityMatchCandidateEntry[]; endOfResult: boolean; });
  }

declare class PublicKey {
    public keyAlgorithm: AsymmetricKeyAlgorithm;
    public keySize: number;
    public keyData: string;
    public createdTime: Int64;

      constructor(args?: { keyAlgorithm: AsymmetricKeyAlgorithm; keySize: number; keyData: string; createdTime: Int64; });
  }

declare class PublicKeychain {
    public publicKeys: PublicKey[];

      constructor(args?: { publicKeys: PublicKey[]; });
  }

declare class QueueingPolicy {
    public priority: number;
    public policy: string;

      constructor(args?: { priority: number; policy: string; });
  }

declare class RegisterWithPhoneNumberResult {
    public authToken: string;
    public recommendEmailRegistration: boolean;
    public certificate: string;

      constructor(args?: { authToken: string; recommendEmailRegistration: boolean; certificate: string; });
  }

declare class RegisterWithSnsIdResult {
    public authToken: string;
    public userCreated: boolean;
    public recommendEmailRegistration: boolean;

      constructor(args?: { authToken: string; userCreated: boolean; recommendEmailRegistration: boolean; });
  }

declare class RequestTokenResponse {
    public requestToken: string;
    public returnUrl: string;

      constructor(args?: { requestToken: string; returnUrl: string; });
  }

declare class RingbackTone {
    public uuid: string;
    public trackId: string;
    public title: string;
    public oid: string;
    public tids: { [k: string]: string; };

      constructor(args?: { uuid: string; trackId: string; title: string; oid: string; tids: { [k: string]: string; }; });
  }

declare class Room {
    public mid: string;
    public createdTime: Int64;
    public contacts: Contact[];
    public notificationDisabled: boolean;
    public memberMids: string[];

      constructor(args?: { mid: string; createdTime: Int64; contacts: Contact[]; notificationDisabled: boolean; memberMids: string[]; });
  }

declare class RSAKey {
    public keynm: string;
    public nvalue: string;
    public evalue: string;
    public sessionKey: string;

      constructor(args?: { keynm: string; nvalue: string; evalue: string; sessionKey: string; });
  }

declare class SecurityCenterResult {
    public uri: string;
    public token: string;
    public cookiePath: string;
    public skip: boolean;

      constructor(args?: { uri: string; token: string; cookiePath: string; skip: boolean; });
  }

declare class SendBuddyMessageResult {
    public requestId: string;
    public state: BuddyResultState;
    public messageId: string;
    public eventNo: number;
    public receiverCount: Int64;
    public successCount: Int64;
    public failCount: Int64;
    public cancelCount: Int64;
    public blockCount: Int64;
    public unregisterCount: Int64;
    public unrelatedCount: Int64;
    public timestamp: Int64;
    public message: string;

      constructor(args?: { requestId: string; state: BuddyResultState; messageId: string; eventNo: number; receiverCount: Int64; successCount: Int64; failCount: Int64; cancelCount: Int64; blockCount: Int64; unregisterCount: Int64; unrelatedCount: Int64; timestamp: Int64; message: string; });
  }

declare class SendPostbackRequest {
    public messageId: string;
    public url: string;
    public chatMID: string;
    public originMID: string;

      constructor(args?: { messageId: string; url: string; chatMID: string; originMID: string; });
  }

declare class SetBuddyOnAirResult {
    public requestId: string;
    public state: BuddyResultState;
    public eventNo: number;
    public receiverCount: Int64;
    public successCount: Int64;
    public failCount: Int64;
    public cancelCount: Int64;
    public unregisterCount: Int64;
    public timestamp: Int64;
    public message: string;

      constructor(args?: { requestId: string; state: BuddyResultState; eventNo: number; receiverCount: Int64; successCount: Int64; failCount: Int64; cancelCount: Int64; unregisterCount: Int64; timestamp: Int64; message: string; });
  }

declare class Settings {
    public notificationEnable: boolean;
    public notificationMuteExpiration: Int64;
    public notificationNewMessage: boolean;
    public notificationGroupInvitation: boolean;
    public notificationShowMessage: boolean;
    public notificationIncomingCall: boolean;
    public notificationSoundMessage: string;
    public notificationSoundGroup: string;
    public notificationDisabledWithSub: boolean;
    public notificationPayment: boolean;
    public privacySyncContacts: boolean;
    public privacySearchByPhoneNumber: boolean;
    public privacySearchByUserid: boolean;
    public privacySearchByEmail: boolean;
    public privacyAllowSecondaryDeviceLogin: boolean;
    public privacyProfileImagePostToMyhome: boolean;
    public privacyReceiveMessagesFromNotFriend: boolean;
    public privacyAgreeUseLineCoinToPaidCall: boolean;
    public privacyAgreeUsePaidCall: boolean;
    public privacyAllowFriendRequest: boolean;
    public contactMyTicket: string;
    public identityProvider: IdentityProvider;
    public identityIdentifier: string;
    public snsAccounts: any;
    public phoneRegistration: boolean;
    public emailConfirmationStatus: EmailConfirmationStatus;
    public accountMigrationPincodeType: AccountMigrationPincodeType;
    public enforcedInputAccountMigrationPincode: boolean;
    public securityCenterSettingsType: SecurityCenterSettingsType;
    public allowUnregistrationSecondaryDevice: boolean;
    public preferenceLocale: string;
    public customModes: { [k: number /*CustomMode*/]: string; };
    public e2eeEnable: boolean;
    public hitokotoBackupRequested: boolean;
    public privacyProfileMusicPostToMyhome: boolean;
    public privacyAllowNearby: boolean;
    public agreementNearbyTime: Int64;
    public agreementSquareTime: Int64;
    public notificationMention: boolean;
    public botUseAgreementAcceptedAt: Int64;

      constructor(args?: { notificationEnable: boolean; notificationMuteExpiration: Int64; notificationNewMessage: boolean; notificationGroupInvitation: boolean; notificationShowMessage: boolean; notificationIncomingCall: boolean; notificationSoundMessage: string; notificationSoundGroup: string; notificationDisabledWithSub: boolean; notificationPayment: boolean; privacySyncContacts: boolean; privacySearchByPhoneNumber: boolean; privacySearchByUserid: boolean; privacySearchByEmail: boolean; privacyAllowSecondaryDeviceLogin: boolean; privacyProfileImagePostToMyhome: boolean; privacyReceiveMessagesFromNotFriend: boolean; privacyAgreeUseLineCoinToPaidCall: boolean; privacyAgreeUsePaidCall: boolean; privacyAllowFriendRequest: boolean; contactMyTicket: string; identityProvider: IdentityProvider; identityIdentifier: string; snsAccounts: any; phoneRegistration: boolean; emailConfirmationStatus: EmailConfirmationStatus; accountMigrationPincodeType: AccountMigrationPincodeType; enforcedInputAccountMigrationPincode: boolean; securityCenterSettingsType: SecurityCenterSettingsType; allowUnregistrationSecondaryDevice: boolean; preferenceLocale: string; customModes: { [k: number /*CustomMode*/]: string; }; e2eeEnable: boolean; hitokotoBackupRequested: boolean; privacyProfileMusicPostToMyhome: boolean; privacyAllowNearby: boolean; agreementNearbyTime: Int64; agreementSquareTime: Int64; notificationMention: boolean; botUseAgreementAcceptedAt: Int64; });
  }

declare class ShopUpdates {
    public latestNewReleaseTime: Int64;
    public latestEventReleaseTime: Int64;
    public latestCategoryUpdateTime: Int64;
    public lastVersion: Int64;
    public updatedProductList: ProductSimple[];

      constructor(args?: { latestNewReleaseTime: Int64; latestEventReleaseTime: Int64; latestCategoryUpdateTime: Int64; lastVersion: Int64; updatedProductList: ProductSimple[]; });
  }

declare class ShouldSyncException extends Thrift.TException {
    public syncOpRevision: Int64;
    public syncScope: SyncScope;
    public syncReason: SyncTriggerReason;
    public message: string;

      constructor(args?: { syncOpRevision: Int64; syncScope: SyncScope; syncReason: SyncTriggerReason; message: string; });
  }

declare class SIMInfo {
    public phoneNumber: string;
    public countryCode: string;

      constructor(args?: { phoneNumber: string; countryCode: string; });
  }

declare class SimpleChannelClient {
    public applicationType: string;
    public applicationVersion: string;
    public locale: string;
    public mid: string;

      constructor(args?: { applicationType: string; applicationVersion: string; locale: string; mid: string; });
  }

declare class SimpleChannelContact {
    public mid: string;
    public displayName: string;
    public pictureStatus: string;
    public picturePath: string;
    public statusMessage: string;
    public userid: string;
    public regionCode: string;

      constructor(args?: { mid: string; displayName: string; pictureStatus: string; picturePath: string; statusMessage: string; userid: string; regionCode: string; });
  }

declare class SnsFriend {
    public snsUserId: string;
    public snsUserName: string;
    public snsIdType: SnsIdType;

      constructor(args?: { snsUserId: string; snsUserName: string; snsIdType: SnsIdType; });
  }

declare class SnsFriendContactRegistration {
    public contact: Contact;
    public snsIdType: SnsIdType;
    public snsUserId: string;

      constructor(args?: { contact: Contact; snsIdType: SnsIdType; snsUserId: string; });
  }

declare class SnsFriendModification {
    public type: ModificationType;
    public snsFriend: SnsFriend;

      constructor(args?: { type: ModificationType; snsFriend: SnsFriend; });
  }

declare class SnsFriends {
    public snsFriends: SnsFriend[];
    public hasMore: boolean;

      constructor(args?: { snsFriends: SnsFriend[]; hasMore: boolean; });
  }

declare class SnsIdUserStatus {
    public userExisting: boolean;
    public phoneNumberRegistered: boolean;
    public sameDevice: boolean;
    public accountMigrationCheckType: AccountMigrationCheckType;

      constructor(args?: { userExisting: boolean; phoneNumberRegistered: boolean; sameDevice: boolean; accountMigrationCheckType: AccountMigrationCheckType; });
  }

declare class SnsProfile {
    public snsUserId: string;
    public snsUserName: string;
    public email: string;
    public thumbnailUrl: string;

      constructor(args?: { snsUserId: string; snsUserName: string; email: string; thumbnailUrl: string; });
  }

declare class SpotItem {
    public name: string;
    public phone: string;
    public category: SpotCategory;
    public mid: string;
    public countryAreaCode: string;
    public freePhoneCallable: boolean;

      constructor(args?: { name: string; phone: string; category: SpotCategory; mid: string; countryAreaCode: string; freePhoneCallable: boolean; });
  }

declare class SpotNearbyItem {
    public spotItem: SpotItem;
    public location: Location;

      constructor(args?: { spotItem: SpotItem; location: Location; });
  }

declare class SpotNearbyResponse {
    public spotNearbyItems: SpotNearbyItem[];

      constructor(args?: { spotNearbyItems: SpotNearbyItem[]; });
  }

declare class SpotPhoneNumberResponse {
    public spotItems: SpotItem[];

      constructor(args?: { spotItems: SpotItem[]; });
  }

declare class StickerIdRange {
    public start: Int64;
    public size: number;

      constructor(args?: { start: Int64; size: number; });
  }

declare class SuggestDictionary {
    public language: string;
    public name: string;

      constructor(args?: { language: string; name: string; });
  }

declare class SuggestDictionaryIncrements {
    public itemIncrement: SuggestItemDictionaryIncrement;
    public tagIncrements: SuggestTagDictionaryIncrement[];

      constructor(args?: { itemIncrement: SuggestItemDictionaryIncrement; tagIncrements: SuggestTagDictionaryIncrement[]; });
  }

declare class SuggestDictionaryRevisions {
    public itemRevision: SuggestItemDictionaryRevision;
    public tagRevisions: SuggestTagDictionaryRevision[];

      constructor(args?: { itemRevision: SuggestItemDictionaryRevision; tagRevisions: SuggestTagDictionaryRevision[]; });
  }

declare class SuggestDictionarySettings {
    public revision: Int64;
    public newRevision: Int64;
    public dictionaries: SuggestDictionary[];
    public preloadedDictionaries: string[];

      constructor(args?: { revision: Int64; newRevision: Int64; dictionaries: SuggestDictionary[]; preloadedDictionaries: string[]; });
  }

declare class SuggestItemDictionaryIncrement {
    public status: SuggestDictionaryIncrementStatus;
    public revision: Int64;
    public scheme: string;
    public data: string;

      constructor(args?: { status: SuggestDictionaryIncrementStatus; revision: Int64; scheme: string; data: string; });
  }

declare class SuggestItemDictionaryRevision {
    public revision: Int64;
    public scheme: string;

      constructor(args?: { revision: Int64; scheme: string; });
  }

declare class SuggestTagDictionaryIncrement {
    public status: SuggestDictionaryIncrementStatus;
    public language: string;
    public revision: Int64;
    public scheme: string;
    public data: string;

      constructor(args?: { status: SuggestDictionaryIncrementStatus; language: string; revision: Int64; scheme: string; data: string; });
  }

declare class SuggestTagDictionaryRevision {
    public language: string;
    public revision: Int64;
    public scheme: string;

      constructor(args?: { language: string; revision: Int64; scheme: string; });
  }

declare class SyncParamContact {
    public syncParamMid: SyncParamMid;
    public contactStatus: ContactStatus;

      constructor(args?: { syncParamMid: SyncParamMid; contactStatus: ContactStatus; });
  }

declare class SyncParamMid {
    public mid: string;
    public diff: Diff;
    public revision: Int64;

      constructor(args?: { mid: string; diff: Diff; revision: Int64; });
  }

declare class SyncRelations {
    public syncAll: boolean;
    public syncParamContact: SyncParamContact[];
    public syncParamMid: SyncParamMid[];

      constructor(args?: { syncAll: boolean; syncParamContact: SyncParamContact[]; syncParamMid: SyncParamMid[]; });
  }

declare class SyncScope {
    public syncProfile: boolean;
    public syncSettings: boolean;
    public syncSticker: boolean;
    public syncThemeShop: boolean;
    public contact: SyncRelations;
    public group: SyncRelations;
    public room: SyncRelations;
    public chat: SyncRelations;

      constructor(args?: { syncProfile: boolean; syncSettings: boolean; syncSticker: boolean; syncThemeShop: boolean; contact: SyncRelations; group: SyncRelations; room: SyncRelations; chat: SyncRelations; });
  }

declare class SystemConfiguration {
    public endpoint: string;
    public endpointSsl: string;
    public updateUrl: string;
    public c2dmAccount: string;
    public nniServer: string;

      constructor(args?: { endpoint: string; endpointSsl: string; updateUrl: string; c2dmAccount: string; nniServer: string; });
  }

declare class TalkException extends Thrift.TException {
    public code: ErrorCode;
    public reason: string;
    public parameterMap: { [k: string]: string; };

      constructor(args?: { code: ErrorCode; reason: string; parameterMap: { [k: string]: string; }; });
  }

declare class Ticket {
    public id: string;
    public expirationTime: Int64;
    public maxUseCount: number;

      constructor(args?: { id: string; expirationTime: Int64; maxUseCount: number; });
  }

declare class TMessageBox {
    public id: string;
    public channelId: string;
    public lastSeq: Int64;
    public unreadCount: Int64;
    public lastModifiedTime: Int64;
    public status: number;
    public midType: MIDType;
    public lastMessages: Message[];

      constructor(args?: { id: string; channelId: string; lastSeq: Int64; unreadCount: Int64; lastModifiedTime: Int64; status: number; midType: MIDType; lastMessages: Message[]; });
  }

declare class TMessageBoxWrapUp {
    public messageBox: TMessageBox;
    public name: string;
    public contacts: Contact[];
    public pictureRevision: string;

      constructor(args?: { messageBox: TMessageBox; name: string; contacts: Contact[]; pictureRevision: string; });
  }

declare class TMessageBoxWrapUpResponse {
    public messageBoxWrapUpList: TMessageBoxWrapUp[];
    public totalSize: number;

      constructor(args?: { messageBoxWrapUpList: TMessageBoxWrapUp[]; totalSize: number; });
  }

declare class TMessageReadRange {
    public chatId: string;
    public ranges: { [k: string]: TMessageReadRangeEntry[]; };

      constructor(args?: { chatId: string; ranges: { [k: string]: TMessageReadRangeEntry[]; }; });
  }

declare class TMessageReadRangeEntry {
    public startMessageId: Int64;
    public endMessageId: Int64;
    public startTime: Int64;
    public endTime: Int64;

      constructor(args?: { startMessageId: Int64; endMessageId: Int64; startTime: Int64; endTime: Int64; });
  }

declare class UnregisterBuddyResult {
    public requestId: string;
    public state: BuddyResultState;
    public eventNo: number;
    public message: string;
    public timestamp: Int64;
    public subscriberCountToRemove: Int64;
    public subscriberCountRemoved: Int64;

      constructor(args?: { requestId: string; state: BuddyResultState; eventNo: number; message: string; timestamp: Int64; subscriberCountToRemove: Int64; subscriberCountRemoved: Int64; });
  }

declare class UpdateBuddyProfileResult {
    public requestId: string;
    public state: BuddyResultState;
    public eventNo: number;
    public receiverCount: Int64;
    public successCount: Int64;
    public failCount: Int64;
    public cancelCount: Int64;
    public unregisterCount: Int64;
    public timestamp: Int64;
    public message: string;
    public urlhash: string;

      constructor(args?: { requestId: string; state: BuddyResultState; eventNo: number; receiverCount: Int64; successCount: Int64; failCount: Int64; cancelCount: Int64; unregisterCount: Int64; timestamp: Int64; message: string; urlhash: string; });
  }

declare class UserAuthStatus {
    public phoneNumberRegistered: boolean;
    public registeredSnsIdTypes: SnsIdType[];
    public accountMigrationCheckType: AccountMigrationCheckType;

      constructor(args?: { phoneNumberRegistered: boolean; registeredSnsIdTypes: SnsIdType[]; accountMigrationCheckType: AccountMigrationCheckType; });
  }

declare class UserTicketResponse {
    public mid: string;
    public userTicket: string;

      constructor(args?: { mid: string; userTicket: string; });
  }

declare class ValidateContactsResult {
    public receiverCount: Int64;
    public successCount: Int64;
    public blockCount: Int64;
    public unregisterCount: Int64;
    public unrelatedCount: Int64;
    public failCount: Int64;

      constructor(args?: { receiverCount: Int64; successCount: Int64; blockCount: Int64; unregisterCount: Int64; unrelatedCount: Int64; failCount: Int64; });
  }

declare class VerificationSessionData {
    public sessionId: string;
    public method: VerificationMethod;
    public callback: string;
    public normalizedPhone: string;
    public countryCode: string;
    public nationalSignificantNumber: string;
    public availableVerificationMethods: VerificationMethod[];
    public callerIdMask: string;

      constructor(args?: { sessionId: string; method: VerificationMethod; callback: string; normalizedPhone: string; countryCode: string; nationalSignificantNumber: string; availableVerificationMethods: VerificationMethod[]; callerIdMask: string; });
  }

declare class WapInvitation {
    public type: WapInvitationType;
    public inviteeEmail: string;
    public inviterMid: string;
    public roomMid: string;

      constructor(args?: { type: WapInvitationType; inviteeEmail: string; inviterMid: string; roomMid: string; });
  }

declare class LoginQrCode_CreateQrSessionResponse {
    public authSessionId: string;

      constructor(args?: { authSessionId: string; });
  }

declare class LoginQrCode_CreateQrCodeRequest {
    public authSessionId: string;

      constructor(args?: { authSessionId: string; });
  }

declare class LoginQrCode_CreateQrCodeResponse {
    public callbackUrl: string;

      constructor(args?: { callbackUrl: string; });
  }

declare class LoginQrCode_VerifyCertificateRequest {
    public authSessionId: string;
    public certificate: string;

      constructor(args?: { authSessionId: string; certificate: string; });
  }

declare class LoginQrCode_CreatePinCodeRequest {
    public authSessionId: string;

      constructor(args?: { authSessionId: string; });
  }

declare class LoginQrCode_CreatePinCodeResponse {
    public pinCode: string;

      constructor(args?: { pinCode: string; });
  }

declare class LoginQrCode_QrCodeLoginRequest {
    public authSessionId: string;
    public systemName: string;
    public autoLoginIsRequired: boolean;

      constructor(args?: { authSessionId: string; systemName: string; autoLoginIsRequired: boolean; });
  }

declare class LoginQrCode_QrCodeLoginResponse {
    public certificate: string;
    public accessToken: string;
    public lastBindTimestamp: string;
    public metaData: string;

      constructor(args?: { certificate: string; accessToken: string; lastBindTimestamp: string; metaData: string; });
  }

declare class LoginQrCode_CheckQrCodeVerifiedRequest {
    public authSessionId: string;

      constructor(args?: { authSessionId: string; });
  }

declare class LoginQrCode_CheckPinCodeVerifiedRequest {
    public authSessionId: string;

      constructor(args?: { authSessionId: string; });
  }

declare class SecondaryQrCodeException extends Thrift.TException {
    public code: number;
    public alertMessage: string;

      constructor(args?: { code: number; alertMessage: string; });
  }
