//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = require('./talk_types');
//HELPER FUNCTIONS AND STRUCTURES

const ShopService_reserveCoinPurchase_args = class {
  constructor(args) {
    this.request = null;
    if (args) {
      if (args.request !== undefined && args.request !== null) {
        this.request = new ttypes.CoinPurchaseReservation(args.request);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.CoinPurchaseReservation();
          this.request.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_reserveCoinPurchase_args');
    if (this.request !== null && this.request !== undefined) {
      output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
      this.request.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_reserveCoinPurchase_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.PaymentReservationResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PaymentReservationResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_reserveCoinPurchase_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getProductCategories_args = class {
  constructor(args) {
    this.language = null;
    this.country = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getProductCategories_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getProductCategories_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.ProductCategory]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3537 = input.readListBegin();
          const _size536 = _rtmp3537.size || 0;
          for (let _i538 = 0; _i538 < _size536; ++_i538) {
            let elem539 = null;
            elem539 = new ttypes.ProductCategory();
            elem539.read(input);
            this.success.push(elem539);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getProductCategories_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter540 in this.success) {
        if (this.success.hasOwnProperty(iter540)) {
          iter540 = this.success[iter540];
          iter540.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getProductList_args = class {
  constructor(args) {
    this.productIdList = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.productIdList !== undefined && args.productIdList !== null) {
        this.productIdList = Thrift.copyList(args.productIdList, [null]);
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.productIdList = [];
          const _rtmp3542 = input.readListBegin();
          const _size541 = _rtmp3542.size || 0;
          for (let _i543 = 0; _i543 < _size541; ++_i543) {
            let elem544 = null;
            elem544 = input.readString();
            this.productIdList.push(elem544);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getProductList_args');
    if (this.productIdList !== null && this.productIdList !== undefined) {
      output.writeFieldBegin('productIdList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.productIdList.length);
      for (let iter545 in this.productIdList) {
        if (this.productIdList.hasOwnProperty(iter545)) {
          iter545 = this.productIdList[iter545];
          output.writeString(iter545);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 4);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getProductList_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getProductList_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getCoinPurchaseHistory_args = class {
  constructor(args) {
    this.request = null;
    if (args) {
      if (args.request !== undefined && args.request !== null) {
        this.request = new ttypes.CoinHistoryCondition(args.request);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.CoinHistoryCondition();
          this.request.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getCoinPurchaseHistory_args');
    if (this.request !== null && this.request !== undefined) {
      output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
      this.request.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getCoinPurchaseHistory_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.CoinHistoryResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.CoinHistoryResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getCoinPurchaseHistory_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_buyFreeProduct_args = class {
  constructor(args) {
    this.receiverMid = null;
    this.productId = null;
    this.messageTemplate = null;
    this.language = null;
    this.country = null;
    this.packageId = null;
    if (args) {
      if (args.receiverMid !== undefined && args.receiverMid !== null) {
        this.receiverMid = args.receiverMid;
      }
      if (args.productId !== undefined && args.productId !== null) {
        this.productId = args.productId;
      }
      if (args.messageTemplate !== undefined && args.messageTemplate !== null) {
        this.messageTemplate = args.messageTemplate;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.packageId !== undefined && args.packageId !== null) {
        this.packageId = args.packageId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.receiverMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.productId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.messageTemplate = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.packageId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_buyFreeProduct_args');
    if (this.receiverMid !== null && this.receiverMid !== undefined) {
      output.writeFieldBegin('receiverMid', Thrift.Type.STRING, 2);
      output.writeString(this.receiverMid);
      output.writeFieldEnd();
    }
    if (this.productId !== null && this.productId !== undefined) {
      output.writeFieldBegin('productId', Thrift.Type.STRING, 3);
      output.writeString(this.productId);
      output.writeFieldEnd();
    }
    if (this.messageTemplate !== null && this.messageTemplate !== undefined) {
      output.writeFieldBegin('messageTemplate', Thrift.Type.I32, 4);
      output.writeI32(this.messageTemplate);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 5);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 6);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.packageId !== null && this.packageId !== undefined) {
      output.writeFieldBegin('packageId', Thrift.Type.I64, 7);
      output.writeI64(this.packageId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_buyFreeProduct_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_buyFreeProduct_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getProductListWithCarrier_args = class {
  constructor(args) {
    this.productIdList = null;
    this.language = null;
    this.country = null;
    this.carrierCode = null;
    if (args) {
      if (args.productIdList !== undefined && args.productIdList !== null) {
        this.productIdList = Thrift.copyList(args.productIdList, [null]);
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.carrierCode !== undefined && args.carrierCode !== null) {
        this.carrierCode = args.carrierCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.productIdList = [];
          const _rtmp3547 = input.readListBegin();
          const _size546 = _rtmp3547.size || 0;
          for (let _i548 = 0; _i548 < _size546; ++_i548) {
            let elem549 = null;
            elem549 = input.readString();
            this.productIdList.push(elem549);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.carrierCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getProductListWithCarrier_args');
    if (this.productIdList !== null && this.productIdList !== undefined) {
      output.writeFieldBegin('productIdList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.productIdList.length);
      for (let iter550 in this.productIdList) {
        if (this.productIdList.hasOwnProperty(iter550)) {
          iter550 = this.productIdList[iter550];
          output.writeString(iter550);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 4);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.carrierCode !== null && this.carrierCode !== undefined) {
      output.writeFieldBegin('carrierCode', Thrift.Type.STRING, 5);
      output.writeString(this.carrierCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getProductListWithCarrier_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getProductListWithCarrier_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getDefaultProducts_args = class {
  constructor(args) {
    this.language = null;
    this.country = null;
    this.carrierCode = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.carrierCode !== undefined && args.carrierCode !== null) {
        this.carrierCode = args.carrierCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.carrierCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getDefaultProducts_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.carrierCode !== null && this.carrierCode !== undefined) {
      output.writeFieldBegin('carrierCode', Thrift.Type.STRING, 6);
      output.writeString(this.carrierCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getDefaultProducts_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getDefaultProducts_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getProductsForCategory_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    this.category = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.category !== undefined && args.category !== null) {
        this.category = args.category;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.category = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getProductsForCategory_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.category !== null && this.category !== undefined) {
      output.writeFieldBegin('category', Thrift.Type.I64, 6);
      output.writeI64(this.category);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getProductsForCategory_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getProductsForCategory_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_notifyDownloaded_args = class {
  constructor(args) {
    this.packageId = null;
    this.language = null;
    if (args) {
      if (args.packageId !== undefined && args.packageId !== null) {
        this.packageId = args.packageId;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.packageId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_notifyDownloaded_args');
    if (this.packageId !== null && this.packageId !== undefined) {
      output.writeFieldBegin('packageId', Thrift.Type.I64, 2);
      output.writeI64(this.packageId);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_notifyDownloaded_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_notifyDownloaded_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getFreePackagesWithoutEvent_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getFreePackagesWithoutEvent_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getFreePackagesWithoutEvent_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getFreePackagesWithoutEvent_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getProduct_args = class {
  constructor(args) {
    this.packageID = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.packageID !== undefined && args.packageID !== null) {
        this.packageID = args.packageID;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.packageID = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getProduct_args');
    if (this.packageID !== null && this.packageID !== undefined) {
      output.writeFieldBegin('packageID', Thrift.Type.I64, 2);
      output.writeI64(this.packageID);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 4);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getProduct_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.Product(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Product();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getProduct_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getEventPackages_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getEventPackages_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getEventPackages_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getEventPackages_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getActivePurchaseVersions_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getActivePurchaseVersions_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getActivePurchaseVersions_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductSimpleList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductSimpleList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getActivePurchaseVersions_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getCoinProductsByPgCode_args = class {
  constructor(args) {
    this.appStoreCode = null;
    this.pgCode = null;
    this.country = null;
    this.language = null;
    if (args) {
      if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
        this.appStoreCode = args.appStoreCode;
      }
      if (args.pgCode !== undefined && args.pgCode !== null) {
        this.pgCode = args.pgCode;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.appStoreCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.pgCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getCoinProductsByPgCode_args');
    if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
      output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 2);
      output.writeI32(this.appStoreCode);
      output.writeFieldEnd();
    }
    if (this.pgCode !== null && this.pgCode !== undefined) {
      output.writeFieldBegin('pgCode', Thrift.Type.I32, 3);
      output.writeI32(this.pgCode);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 4);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 5);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getCoinProductsByPgCode_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.CoinProductItem]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3552 = input.readListBegin();
          const _size551 = _rtmp3552.size || 0;
          for (let _i553 = 0; _i553 < _size551; ++_i553) {
            let elem554 = null;
            elem554 = new ttypes.CoinProductItem();
            elem554.read(input);
            this.success.push(elem554);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getCoinProductsByPgCode_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter555 in this.success) {
        if (this.success.hasOwnProperty(iter555)) {
          iter555 = this.success[iter555];
          iter555.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getNewlyReleasedPackages_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getNewlyReleasedPackages_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getNewlyReleasedPackages_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getNewlyReleasedPackages_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getDownloads_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getDownloads_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getDownloads_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getDownloads_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getCoinProducts_args = class {
  constructor(args) {
    this.appStoreCode = null;
    this.country = null;
    this.language = null;
    if (args) {
      if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
        this.appStoreCode = args.appStoreCode;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.appStoreCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getCoinProducts_args');
    if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
      output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 2);
      output.writeI32(this.appStoreCode);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getCoinProducts_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.CoinProductItem]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3557 = input.readListBegin();
          const _size556 = _rtmp3557.size || 0;
          for (let _i558 = 0; _i558 < _size556; ++_i558) {
            let elem559 = null;
            elem559 = new ttypes.CoinProductItem();
            elem559.read(input);
            this.success.push(elem559);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getCoinProducts_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter560 in this.success) {
        if (this.success.hasOwnProperty(iter560)) {
          iter560 = this.success[iter560];
          iter560.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_searchProducts_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    this.query = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.query !== undefined && args.query !== null) {
        this.query = args.query;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.query = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_searchProducts_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.query !== null && this.query !== undefined) {
      output.writeFieldBegin('query', Thrift.Type.STRING, 6);
      output.writeString(this.query);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_searchProducts_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_searchProducts_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_buyMustbuyProduct_args = class {
  constructor(args) {
    this.receiverMid = null;
    this.productId = null;
    this.messageTemplate = null;
    this.language = null;
    this.country = null;
    this.packageId = null;
    this.serialNumber = null;
    if (args) {
      if (args.receiverMid !== undefined && args.receiverMid !== null) {
        this.receiverMid = args.receiverMid;
      }
      if (args.productId !== undefined && args.productId !== null) {
        this.productId = args.productId;
      }
      if (args.messageTemplate !== undefined && args.messageTemplate !== null) {
        this.messageTemplate = args.messageTemplate;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.packageId !== undefined && args.packageId !== null) {
        this.packageId = args.packageId;
      }
      if (args.serialNumber !== undefined && args.serialNumber !== null) {
        this.serialNumber = args.serialNumber;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.receiverMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.productId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.messageTemplate = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.packageId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.serialNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_buyMustbuyProduct_args');
    if (this.receiverMid !== null && this.receiverMid !== undefined) {
      output.writeFieldBegin('receiverMid', Thrift.Type.STRING, 2);
      output.writeString(this.receiverMid);
      output.writeFieldEnd();
    }
    if (this.productId !== null && this.productId !== undefined) {
      output.writeFieldBegin('productId', Thrift.Type.STRING, 3);
      output.writeString(this.productId);
      output.writeFieldEnd();
    }
    if (this.messageTemplate !== null && this.messageTemplate !== undefined) {
      output.writeFieldBegin('messageTemplate', Thrift.Type.I32, 4);
      output.writeI32(this.messageTemplate);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 5);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 6);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.packageId !== null && this.packageId !== undefined) {
      output.writeFieldBegin('packageId', Thrift.Type.I64, 7);
      output.writeI64(this.packageId);
      output.writeFieldEnd();
    }
    if (this.serialNumber !== null && this.serialNumber !== undefined) {
      output.writeFieldBegin('serialNumber', Thrift.Type.STRING, 8);
      output.writeString(this.serialNumber);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_buyMustbuyProduct_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_buyMustbuyProduct_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getRecommendationsForProduct_args = class {
  constructor(args) {
    this.packageID = null;
    this.offset = null;
    this.limit = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.packageID !== undefined && args.packageID !== null) {
        this.packageID = args.packageID;
      }
      if (args.offset !== undefined && args.offset !== null) {
        this.offset = args.offset;
      }
      if (args.limit !== undefined && args.limit !== null) {
        this.limit = args.limit;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.packageID = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.offset = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.limit = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getRecommendationsForProduct_args');
    if (this.packageID !== null && this.packageID !== undefined) {
      output.writeFieldBegin('packageID', Thrift.Type.I64, 2);
      output.writeI64(this.packageID);
      output.writeFieldEnd();
    }
    if (this.offset !== null && this.offset !== undefined) {
      output.writeFieldBegin('offset', Thrift.Type.I32, 3);
      output.writeI32(this.offset);
      output.writeFieldEnd();
    }
    if (this.limit !== null && this.limit !== undefined) {
      output.writeFieldBegin('limit', Thrift.Type.I32, 4);
      output.writeI32(this.limit);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 5);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 6);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getRecommendationsForProduct_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getRecommendationsForProduct_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getUpdates_args = class {
  constructor(args) {
    this.language = null;
    this.country = null;
    this.localVersion = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.localVersion !== undefined && args.localVersion !== null) {
        this.localVersion = args.localVersion;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.localVersion = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getUpdates_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.localVersion !== null && this.localVersion !== undefined) {
      output.writeFieldBegin('localVersion', Thrift.Type.I64, 4);
      output.writeI64(this.localVersion);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getUpdates_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ShopUpdates(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ShopUpdates();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getUpdates_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getActivePurchases_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getActivePurchases_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getActivePurchases_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getActivePurchases_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getProductWithCarrier_args = class {
  constructor(args) {
    this.packageID = null;
    this.language = null;
    this.country = null;
    this.carrierCode = null;
    if (args) {
      if (args.packageID !== undefined && args.packageID !== null) {
        this.packageID = args.packageID;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.carrierCode !== undefined && args.carrierCode !== null) {
        this.carrierCode = args.carrierCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.packageID = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.carrierCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getProductWithCarrier_args');
    if (this.packageID !== null && this.packageID !== undefined) {
      output.writeFieldBegin('packageID', Thrift.Type.I64, 2);
      output.writeI64(this.packageID);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 3);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 4);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.carrierCode !== null && this.carrierCode !== undefined) {
      output.writeFieldBegin('carrierCode', Thrift.Type.STRING, 5);
      output.writeString(this.carrierCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getProductWithCarrier_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.Product(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Product();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getProductWithCarrier_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_buyCoinProduct_args = class {
  constructor(args) {
    this.paymentReservation = null;
    if (args) {
      if (args.paymentReservation !== undefined && args.paymentReservation !== null) {
        this.paymentReservation = new ttypes.PaymentReservation(args.paymentReservation);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.paymentReservation = new ttypes.PaymentReservation();
          this.paymentReservation.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_buyCoinProduct_args');
    if (this.paymentReservation !== null && this.paymentReservation !== undefined) {
      output.writeFieldBegin('paymentReservation', Thrift.Type.STRUCT, 2);
      this.paymentReservation.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_buyCoinProduct_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_buyCoinProduct_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getPopularPackages_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getPopularPackages_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getPopularPackages_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getPopularPackages_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_reservePayment_args = class {
  constructor(args) {
    this.paymentReservation = null;
    if (args) {
      if (args.paymentReservation !== undefined && args.paymentReservation !== null) {
        this.paymentReservation = new ttypes.PaymentReservation(args.paymentReservation);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.paymentReservation = new ttypes.PaymentReservation();
          this.paymentReservation.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_reservePayment_args');
    if (this.paymentReservation !== null && this.paymentReservation !== undefined) {
      output.writeFieldBegin('paymentReservation', Thrift.Type.STRUCT, 2);
      this.paymentReservation.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_reservePayment_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.PaymentReservationResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PaymentReservationResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_reservePayment_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getPresentsSent_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getPresentsSent_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getPresentsSent_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getPresentsSent_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_checkCanReceivePresent_args = class {
  constructor(args) {
    this.recipientMid = null;
    this.packageId = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.recipientMid !== undefined && args.recipientMid !== null) {
        this.recipientMid = args.recipientMid;
      }
      if (args.packageId !== undefined && args.packageId !== null) {
        this.packageId = args.packageId;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.recipientMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.packageId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_checkCanReceivePresent_args');
    if (this.recipientMid !== null && this.recipientMid !== undefined) {
      output.writeFieldBegin('recipientMid', Thrift.Type.STRING, 2);
      output.writeString(this.recipientMid);
      output.writeFieldEnd();
    }
    if (this.packageId !== null && this.packageId !== undefined) {
      output.writeFieldBegin('packageId', Thrift.Type.I64, 3);
      output.writeI64(this.packageId);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_checkCanReceivePresent_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_checkCanReceivePresent_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getFreePackages_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getFreePackages_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getFreePackages_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getFreePackages_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getPurchaseHistory_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getPurchaseHistory_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getPurchaseHistory_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getPurchaseHistory_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getTotalBalance_args = class {
  constructor(args) {
    this.appStoreCode = null;
    if (args) {
      if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
        this.appStoreCode = args.appStoreCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.appStoreCode = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getTotalBalance_args');
    if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
      output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 2);
      output.writeI32(this.appStoreCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getTotalBalance_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.Coin(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.Coin();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getTotalBalance_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getCoinUseAndRefundHistory_args = class {
  constructor(args) {
    this.request = null;
    if (args) {
      if (args.request !== undefined && args.request !== null) {
        this.request = new ttypes.CoinHistoryCondition(args.request);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.CoinHistoryCondition();
          this.request.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getCoinUseAndRefundHistory_args');
    if (this.request !== null && this.request !== undefined) {
      output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
      this.request.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getCoinUseAndRefundHistory_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.CoinHistoryResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.CoinHistoryResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getCoinUseAndRefundHistory_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getPresentsReceived_args = class {
  constructor(args) {
    this.start = null;
    this.size = null;
    this.language = null;
    this.country = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.size = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getPresentsReceived_args');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I32, 3);
      output.writeI32(this.size);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 4);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 5);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopService_getPresentsReceived_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.ProductList(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ProductList();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShopService_getPresentsReceived_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShopServiceClient = exports.Client = class {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  reserveCoinPurchase (request) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_reserveCoinPurchase(request);
    });
  }

  send_reserveCoinPurchase (request) {
    const output = new this.pClass(this.output);
    const params = {
      request: request
    };
    const args = new ShopService_reserveCoinPurchase_args(params);
    try {
      output.writeMessageBegin('reserveCoinPurchase', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_reserveCoinPurchase (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_reserveCoinPurchase_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('reserveCoinPurchase failed: unknown result');
  }

  getProductCategories (language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getProductCategories(language, country);
    });
  }

  send_getProductCategories (language, country) {
    const output = new this.pClass(this.output);
    const params = {
      language: language,
      country: country
    };
    const args = new ShopService_getProductCategories_args(params);
    try {
      output.writeMessageBegin('getProductCategories', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getProductCategories (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getProductCategories_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getProductCategories failed: unknown result');
  }

  getProductList (productIdList, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getProductList(productIdList, language, country);
    });
  }

  send_getProductList (productIdList, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      productIdList: productIdList,
      language: language,
      country: country
    };
    const args = new ShopService_getProductList_args(params);
    try {
      output.writeMessageBegin('getProductList', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getProductList (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getProductList_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getProductList failed: unknown result');
  }

  getCoinPurchaseHistory (request) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCoinPurchaseHistory(request);
    });
  }

  send_getCoinPurchaseHistory (request) {
    const output = new this.pClass(this.output);
    const params = {
      request: request
    };
    const args = new ShopService_getCoinPurchaseHistory_args(params);
    try {
      output.writeMessageBegin('getCoinPurchaseHistory', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCoinPurchaseHistory (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getCoinPurchaseHistory_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCoinPurchaseHistory failed: unknown result');
  }

  buyFreeProduct (receiverMid, productId, messageTemplate, language, country, packageId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_buyFreeProduct(receiverMid, productId, messageTemplate, language, country, packageId);
    });
  }

  send_buyFreeProduct (receiverMid, productId, messageTemplate, language, country, packageId) {
    const output = new this.pClass(this.output);
    const params = {
      receiverMid: receiverMid,
      productId: productId,
      messageTemplate: messageTemplate,
      language: language,
      country: country,
      packageId: packageId
    };
    const args = new ShopService_buyFreeProduct_args(params);
    try {
      output.writeMessageBegin('buyFreeProduct', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_buyFreeProduct (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_buyFreeProduct_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  getProductListWithCarrier (productIdList, language, country, carrierCode) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getProductListWithCarrier(productIdList, language, country, carrierCode);
    });
  }

  send_getProductListWithCarrier (productIdList, language, country, carrierCode) {
    const output = new this.pClass(this.output);
    const params = {
      productIdList: productIdList,
      language: language,
      country: country,
      carrierCode: carrierCode
    };
    const args = new ShopService_getProductListWithCarrier_args(params);
    try {
      output.writeMessageBegin('getProductListWithCarrier', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getProductListWithCarrier (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getProductListWithCarrier_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getProductListWithCarrier failed: unknown result');
  }

  getDefaultProducts (language, country, carrierCode) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getDefaultProducts(language, country, carrierCode);
    });
  }

  send_getDefaultProducts (language, country, carrierCode) {
    const output = new this.pClass(this.output);
    const params = {
      language: language,
      country: country,
      carrierCode: carrierCode
    };
    const args = new ShopService_getDefaultProducts_args(params);
    try {
      output.writeMessageBegin('getDefaultProducts', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getDefaultProducts (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getDefaultProducts_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getDefaultProducts failed: unknown result');
  }

  getProductsForCategory (start, size, language, country, category) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getProductsForCategory(start, size, language, country, category);
    });
  }

  send_getProductsForCategory (start, size, language, country, category) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country,
      category: category
    };
    const args = new ShopService_getProductsForCategory_args(params);
    try {
      output.writeMessageBegin('getProductsForCategory', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getProductsForCategory (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getProductsForCategory_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getProductsForCategory failed: unknown result');
  }

  notifyDownloaded (packageId, language) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_notifyDownloaded(packageId, language);
    });
  }

  send_notifyDownloaded (packageId, language) {
    const output = new this.pClass(this.output);
    const params = {
      packageId: packageId,
      language: language
    };
    const args = new ShopService_notifyDownloaded_args(params);
    try {
      output.writeMessageBegin('notifyDownloaded', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_notifyDownloaded (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_notifyDownloaded_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('notifyDownloaded failed: unknown result');
  }

  getFreePackagesWithoutEvent (start, size, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getFreePackagesWithoutEvent(start, size, language, country);
    });
  }

  send_getFreePackagesWithoutEvent (start, size, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country
    };
    const args = new ShopService_getFreePackagesWithoutEvent_args(params);
    try {
      output.writeMessageBegin('getFreePackagesWithoutEvent', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getFreePackagesWithoutEvent (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getFreePackagesWithoutEvent_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getFreePackagesWithoutEvent failed: unknown result');
  }

  getProduct (packageID, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getProduct(packageID, language, country);
    });
  }

  send_getProduct (packageID, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      packageID: packageID,
      language: language,
      country: country
    };
    const args = new ShopService_getProduct_args(params);
    try {
      output.writeMessageBegin('getProduct', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getProduct (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getProduct_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getProduct failed: unknown result');
  }

  getEventPackages (start, size, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getEventPackages(start, size, language, country);
    });
  }

  send_getEventPackages (start, size, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country
    };
    const args = new ShopService_getEventPackages_args(params);
    try {
      output.writeMessageBegin('getEventPackages', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getEventPackages (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getEventPackages_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getEventPackages failed: unknown result');
  }

  getActivePurchaseVersions (start, size, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getActivePurchaseVersions(start, size, language, country);
    });
  }

  send_getActivePurchaseVersions (start, size, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country
    };
    const args = new ShopService_getActivePurchaseVersions_args(params);
    try {
      output.writeMessageBegin('getActivePurchaseVersions', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getActivePurchaseVersions (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getActivePurchaseVersions_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getActivePurchaseVersions failed: unknown result');
  }

  getCoinProductsByPgCode (appStoreCode, pgCode, country, language) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCoinProductsByPgCode(appStoreCode, pgCode, country, language);
    });
  }

  send_getCoinProductsByPgCode (appStoreCode, pgCode, country, language) {
    const output = new this.pClass(this.output);
    const params = {
      appStoreCode: appStoreCode,
      pgCode: pgCode,
      country: country,
      language: language
    };
    const args = new ShopService_getCoinProductsByPgCode_args(params);
    try {
      output.writeMessageBegin('getCoinProductsByPgCode', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCoinProductsByPgCode (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getCoinProductsByPgCode_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCoinProductsByPgCode failed: unknown result');
  }

  getNewlyReleasedPackages (start, size, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getNewlyReleasedPackages(start, size, language, country);
    });
  }

  send_getNewlyReleasedPackages (start, size, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country
    };
    const args = new ShopService_getNewlyReleasedPackages_args(params);
    try {
      output.writeMessageBegin('getNewlyReleasedPackages', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getNewlyReleasedPackages (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getNewlyReleasedPackages_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getNewlyReleasedPackages failed: unknown result');
  }

  getDownloads (start, size, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getDownloads(start, size, language, country);
    });
  }

  send_getDownloads (start, size, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country
    };
    const args = new ShopService_getDownloads_args(params);
    try {
      output.writeMessageBegin('getDownloads', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getDownloads (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getDownloads_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getDownloads failed: unknown result');
  }

  getCoinProducts (appStoreCode, country, language) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCoinProducts(appStoreCode, country, language);
    });
  }

  send_getCoinProducts (appStoreCode, country, language) {
    const output = new this.pClass(this.output);
    const params = {
      appStoreCode: appStoreCode,
      country: country,
      language: language
    };
    const args = new ShopService_getCoinProducts_args(params);
    try {
      output.writeMessageBegin('getCoinProducts', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCoinProducts (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getCoinProducts_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCoinProducts failed: unknown result');
  }

  searchProducts (start, size, language, country, query) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_searchProducts(start, size, language, country, query);
    });
  }

  send_searchProducts (start, size, language, country, query) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country,
      query: query
    };
    const args = new ShopService_searchProducts_args(params);
    try {
      output.writeMessageBegin('searchProducts', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_searchProducts (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_searchProducts_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('searchProducts failed: unknown result');
  }

  buyMustbuyProduct (receiverMid, productId, messageTemplate, language, country, packageId, serialNumber) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_buyMustbuyProduct(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber);
    });
  }

  send_buyMustbuyProduct (receiverMid, productId, messageTemplate, language, country, packageId, serialNumber) {
    const output = new this.pClass(this.output);
    const params = {
      receiverMid: receiverMid,
      productId: productId,
      messageTemplate: messageTemplate,
      language: language,
      country: country,
      packageId: packageId,
      serialNumber: serialNumber
    };
    const args = new ShopService_buyMustbuyProduct_args(params);
    try {
      output.writeMessageBegin('buyMustbuyProduct', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_buyMustbuyProduct (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_buyMustbuyProduct_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  getRecommendationsForProduct (packageID, offset, limit, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getRecommendationsForProduct(packageID, offset, limit, language, country);
    });
  }

  send_getRecommendationsForProduct (packageID, offset, limit, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      packageID: packageID,
      offset: offset,
      limit: limit,
      language: language,
      country: country
    };
    const args = new ShopService_getRecommendationsForProduct_args(params);
    try {
      output.writeMessageBegin('getRecommendationsForProduct', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getRecommendationsForProduct (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getRecommendationsForProduct_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getRecommendationsForProduct failed: unknown result');
  }

  getUpdates (language, country, localVersion) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getUpdates(language, country, localVersion);
    });
  }

  send_getUpdates (language, country, localVersion) {
    const output = new this.pClass(this.output);
    const params = {
      language: language,
      country: country,
      localVersion: localVersion
    };
    const args = new ShopService_getUpdates_args(params);
    try {
      output.writeMessageBegin('getUpdates', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getUpdates (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getUpdates_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getUpdates failed: unknown result');
  }

  getActivePurchases (start, size, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getActivePurchases(start, size, language, country);
    });
  }

  send_getActivePurchases (start, size, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country
    };
    const args = new ShopService_getActivePurchases_args(params);
    try {
      output.writeMessageBegin('getActivePurchases', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getActivePurchases (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getActivePurchases_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getActivePurchases failed: unknown result');
  }

  getProductWithCarrier (packageID, language, country, carrierCode) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getProductWithCarrier(packageID, language, country, carrierCode);
    });
  }

  send_getProductWithCarrier (packageID, language, country, carrierCode) {
    const output = new this.pClass(this.output);
    const params = {
      packageID: packageID,
      language: language,
      country: country,
      carrierCode: carrierCode
    };
    const args = new ShopService_getProductWithCarrier_args(params);
    try {
      output.writeMessageBegin('getProductWithCarrier', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getProductWithCarrier (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getProductWithCarrier_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getProductWithCarrier failed: unknown result');
  }

  buyCoinProduct (paymentReservation) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_buyCoinProduct(paymentReservation);
    });
  }

  send_buyCoinProduct (paymentReservation) {
    const output = new this.pClass(this.output);
    const params = {
      paymentReservation: paymentReservation
    };
    const args = new ShopService_buyCoinProduct_args(params);
    try {
      output.writeMessageBegin('buyCoinProduct', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_buyCoinProduct (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_buyCoinProduct_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  getPopularPackages (start, size, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPopularPackages(start, size, language, country);
    });
  }

  send_getPopularPackages (start, size, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country
    };
    const args = new ShopService_getPopularPackages_args(params);
    try {
      output.writeMessageBegin('getPopularPackages', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPopularPackages (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getPopularPackages_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPopularPackages failed: unknown result');
  }

  reservePayment (paymentReservation) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_reservePayment(paymentReservation);
    });
  }

  send_reservePayment (paymentReservation) {
    const output = new this.pClass(this.output);
    const params = {
      paymentReservation: paymentReservation
    };
    const args = new ShopService_reservePayment_args(params);
    try {
      output.writeMessageBegin('reservePayment', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_reservePayment (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_reservePayment_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('reservePayment failed: unknown result');
  }

  getPresentsSent (start, size, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPresentsSent(start, size, language, country);
    });
  }

  send_getPresentsSent (start, size, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country
    };
    const args = new ShopService_getPresentsSent_args(params);
    try {
      output.writeMessageBegin('getPresentsSent', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPresentsSent (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getPresentsSent_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPresentsSent failed: unknown result');
  }

  checkCanReceivePresent (recipientMid, packageId, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_checkCanReceivePresent(recipientMid, packageId, language, country);
    });
  }

  send_checkCanReceivePresent (recipientMid, packageId, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      recipientMid: recipientMid,
      packageId: packageId,
      language: language,
      country: country
    };
    const args = new ShopService_checkCanReceivePresent_args(params);
    try {
      output.writeMessageBegin('checkCanReceivePresent', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_checkCanReceivePresent (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_checkCanReceivePresent_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }

  getFreePackages (start, size, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getFreePackages(start, size, language, country);
    });
  }

  send_getFreePackages (start, size, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country
    };
    const args = new ShopService_getFreePackages_args(params);
    try {
      output.writeMessageBegin('getFreePackages', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getFreePackages (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getFreePackages_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getFreePackages failed: unknown result');
  }

  getPurchaseHistory (start, size, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPurchaseHistory(start, size, language, country);
    });
  }

  send_getPurchaseHistory (start, size, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country
    };
    const args = new ShopService_getPurchaseHistory_args(params);
    try {
      output.writeMessageBegin('getPurchaseHistory', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPurchaseHistory (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getPurchaseHistory_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPurchaseHistory failed: unknown result');
  }

  getTotalBalance (appStoreCode) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getTotalBalance(appStoreCode);
    });
  }

  send_getTotalBalance (appStoreCode) {
    const output = new this.pClass(this.output);
    const params = {
      appStoreCode: appStoreCode
    };
    const args = new ShopService_getTotalBalance_args(params);
    try {
      output.writeMessageBegin('getTotalBalance', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getTotalBalance (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getTotalBalance_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getTotalBalance failed: unknown result');
  }

  getCoinUseAndRefundHistory (request) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCoinUseAndRefundHistory(request);
    });
  }

  send_getCoinUseAndRefundHistory (request) {
    const output = new this.pClass(this.output);
    const params = {
      request: request
    };
    const args = new ShopService_getCoinUseAndRefundHistory_args(params);
    try {
      output.writeMessageBegin('getCoinUseAndRefundHistory', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCoinUseAndRefundHistory (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getCoinUseAndRefundHistory_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCoinUseAndRefundHistory failed: unknown result');
  }

  getPresentsReceived (start, size, language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPresentsReceived(start, size, language, country);
    });
  }

  send_getPresentsReceived (start, size, language, country) {
    const output = new this.pClass(this.output);
    const params = {
      start: start,
      size: size,
      language: language,
      country: country
    };
    const args = new ShopService_getPresentsReceived_args(params);
    try {
      output.writeMessageBegin('getPresentsReceived', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPresentsReceived (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ShopService_getPresentsReceived_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPresentsReceived failed: unknown result');
  }
};
const ShopServiceProcessor = exports.Processor = class {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_reserveCoinPurchase (seqid, input, output) {
    const args = new ShopService_reserveCoinPurchase_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.reserveCoinPurchase.length === 1) {
      Promise.resolve(this._handler.reserveCoinPurchase.bind(this._handler)(
        args.request
      )).then(result => {
        const result_obj = new ShopService_reserveCoinPurchase_result({success: result});
        output.writeMessageBegin("reserveCoinPurchase", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_reserveCoinPurchase_result(err);
          output.writeMessageBegin("reserveCoinPurchase", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reserveCoinPurchase", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.reserveCoinPurchase(args.request, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_reserveCoinPurchase_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("reserveCoinPurchase", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reserveCoinPurchase", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getProductCategories (seqid, input, output) {
    const args = new ShopService_getProductCategories_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getProductCategories.length === 2) {
      Promise.resolve(this._handler.getProductCategories.bind(this._handler)(
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getProductCategories_result({success: result});
        output.writeMessageBegin("getProductCategories", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getProductCategories_result(err);
          output.writeMessageBegin("getProductCategories", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductCategories", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getProductCategories(args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getProductCategories_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getProductCategories", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductCategories", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getProductList (seqid, input, output) {
    const args = new ShopService_getProductList_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getProductList.length === 3) {
      Promise.resolve(this._handler.getProductList.bind(this._handler)(
        args.productIdList,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getProductList_result({success: result});
        output.writeMessageBegin("getProductList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getProductList_result(err);
          output.writeMessageBegin("getProductList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getProductList(args.productIdList, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getProductList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getProductList", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCoinPurchaseHistory (seqid, input, output) {
    const args = new ShopService_getCoinPurchaseHistory_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCoinPurchaseHistory.length === 1) {
      Promise.resolve(this._handler.getCoinPurchaseHistory.bind(this._handler)(
        args.request
      )).then(result => {
        const result_obj = new ShopService_getCoinPurchaseHistory_result({success: result});
        output.writeMessageBegin("getCoinPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getCoinPurchaseHistory_result(err);
          output.writeMessageBegin("getCoinPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCoinPurchaseHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCoinPurchaseHistory(args.request, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getCoinPurchaseHistory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCoinPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCoinPurchaseHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_buyFreeProduct (seqid, input, output) {
    const args = new ShopService_buyFreeProduct_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.buyFreeProduct.length === 6) {
      Promise.resolve(this._handler.buyFreeProduct.bind(this._handler)(
        args.receiverMid,
        args.productId,
        args.messageTemplate,
        args.language,
        args.country,
        args.packageId
      )).then(result => {
        const result_obj = new ShopService_buyFreeProduct_result({success: result});
        output.writeMessageBegin("buyFreeProduct", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_buyFreeProduct_result(err);
          output.writeMessageBegin("buyFreeProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("buyFreeProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.buyFreeProduct(args.receiverMid, args.productId, args.messageTemplate, args.language, args.country, args.packageId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_buyFreeProduct_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("buyFreeProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("buyFreeProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getProductListWithCarrier (seqid, input, output) {
    const args = new ShopService_getProductListWithCarrier_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getProductListWithCarrier.length === 4) {
      Promise.resolve(this._handler.getProductListWithCarrier.bind(this._handler)(
        args.productIdList,
        args.language,
        args.country,
        args.carrierCode
      )).then(result => {
        const result_obj = new ShopService_getProductListWithCarrier_result({success: result});
        output.writeMessageBegin("getProductListWithCarrier", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getProductListWithCarrier_result(err);
          output.writeMessageBegin("getProductListWithCarrier", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductListWithCarrier", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getProductListWithCarrier(args.productIdList, args.language, args.country, args.carrierCode, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getProductListWithCarrier_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getProductListWithCarrier", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductListWithCarrier", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getDefaultProducts (seqid, input, output) {
    const args = new ShopService_getDefaultProducts_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getDefaultProducts.length === 3) {
      Promise.resolve(this._handler.getDefaultProducts.bind(this._handler)(
        args.language,
        args.country,
        args.carrierCode
      )).then(result => {
        const result_obj = new ShopService_getDefaultProducts_result({success: result});
        output.writeMessageBegin("getDefaultProducts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getDefaultProducts_result(err);
          output.writeMessageBegin("getDefaultProducts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDefaultProducts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getDefaultProducts(args.language, args.country, args.carrierCode, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getDefaultProducts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getDefaultProducts", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDefaultProducts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getProductsForCategory (seqid, input, output) {
    const args = new ShopService_getProductsForCategory_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getProductsForCategory.length === 5) {
      Promise.resolve(this._handler.getProductsForCategory.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country,
        args.category
      )).then(result => {
        const result_obj = new ShopService_getProductsForCategory_result({success: result});
        output.writeMessageBegin("getProductsForCategory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getProductsForCategory_result(err);
          output.writeMessageBegin("getProductsForCategory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductsForCategory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getProductsForCategory(args.start, args.size, args.language, args.country, args.category, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getProductsForCategory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getProductsForCategory", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductsForCategory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_notifyDownloaded (seqid, input, output) {
    const args = new ShopService_notifyDownloaded_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.notifyDownloaded.length === 2) {
      Promise.resolve(this._handler.notifyDownloaded.bind(this._handler)(
        args.packageId,
        args.language
      )).then(result => {
        const result_obj = new ShopService_notifyDownloaded_result({success: result});
        output.writeMessageBegin("notifyDownloaded", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_notifyDownloaded_result(err);
          output.writeMessageBegin("notifyDownloaded", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyDownloaded", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.notifyDownloaded(args.packageId, args.language, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_notifyDownloaded_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("notifyDownloaded", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyDownloaded", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getFreePackagesWithoutEvent (seqid, input, output) {
    const args = new ShopService_getFreePackagesWithoutEvent_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getFreePackagesWithoutEvent.length === 4) {
      Promise.resolve(this._handler.getFreePackagesWithoutEvent.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getFreePackagesWithoutEvent_result({success: result});
        output.writeMessageBegin("getFreePackagesWithoutEvent", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getFreePackagesWithoutEvent_result(err);
          output.writeMessageBegin("getFreePackagesWithoutEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFreePackagesWithoutEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getFreePackagesWithoutEvent(args.start, args.size, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getFreePackagesWithoutEvent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getFreePackagesWithoutEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFreePackagesWithoutEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getProduct (seqid, input, output) {
    const args = new ShopService_getProduct_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getProduct.length === 3) {
      Promise.resolve(this._handler.getProduct.bind(this._handler)(
        args.packageID,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getProduct_result({success: result});
        output.writeMessageBegin("getProduct", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getProduct_result(err);
          output.writeMessageBegin("getProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getProduct(args.packageID, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getProduct_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getEventPackages (seqid, input, output) {
    const args = new ShopService_getEventPackages_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getEventPackages.length === 4) {
      Promise.resolve(this._handler.getEventPackages.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getEventPackages_result({success: result});
        output.writeMessageBegin("getEventPackages", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getEventPackages_result(err);
          output.writeMessageBegin("getEventPackages", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getEventPackages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getEventPackages(args.start, args.size, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getEventPackages_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getEventPackages", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getEventPackages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getActivePurchaseVersions (seqid, input, output) {
    const args = new ShopService_getActivePurchaseVersions_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getActivePurchaseVersions.length === 4) {
      Promise.resolve(this._handler.getActivePurchaseVersions.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getActivePurchaseVersions_result({success: result});
        output.writeMessageBegin("getActivePurchaseVersions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getActivePurchaseVersions_result(err);
          output.writeMessageBegin("getActivePurchaseVersions", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActivePurchaseVersions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getActivePurchaseVersions(args.start, args.size, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getActivePurchaseVersions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getActivePurchaseVersions", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActivePurchaseVersions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCoinProductsByPgCode (seqid, input, output) {
    const args = new ShopService_getCoinProductsByPgCode_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCoinProductsByPgCode.length === 4) {
      Promise.resolve(this._handler.getCoinProductsByPgCode.bind(this._handler)(
        args.appStoreCode,
        args.pgCode,
        args.country,
        args.language
      )).then(result => {
        const result_obj = new ShopService_getCoinProductsByPgCode_result({success: result});
        output.writeMessageBegin("getCoinProductsByPgCode", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getCoinProductsByPgCode_result(err);
          output.writeMessageBegin("getCoinProductsByPgCode", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCoinProductsByPgCode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCoinProductsByPgCode(args.appStoreCode, args.pgCode, args.country, args.language, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getCoinProductsByPgCode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCoinProductsByPgCode", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCoinProductsByPgCode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getNewlyReleasedPackages (seqid, input, output) {
    const args = new ShopService_getNewlyReleasedPackages_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getNewlyReleasedPackages.length === 4) {
      Promise.resolve(this._handler.getNewlyReleasedPackages.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getNewlyReleasedPackages_result({success: result});
        output.writeMessageBegin("getNewlyReleasedPackages", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getNewlyReleasedPackages_result(err);
          output.writeMessageBegin("getNewlyReleasedPackages", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNewlyReleasedPackages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getNewlyReleasedPackages(args.start, args.size, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getNewlyReleasedPackages_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getNewlyReleasedPackages", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNewlyReleasedPackages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getDownloads (seqid, input, output) {
    const args = new ShopService_getDownloads_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getDownloads.length === 4) {
      Promise.resolve(this._handler.getDownloads.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getDownloads_result({success: result});
        output.writeMessageBegin("getDownloads", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getDownloads_result(err);
          output.writeMessageBegin("getDownloads", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDownloads", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getDownloads(args.start, args.size, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getDownloads_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getDownloads", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDownloads", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCoinProducts (seqid, input, output) {
    const args = new ShopService_getCoinProducts_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCoinProducts.length === 3) {
      Promise.resolve(this._handler.getCoinProducts.bind(this._handler)(
        args.appStoreCode,
        args.country,
        args.language
      )).then(result => {
        const result_obj = new ShopService_getCoinProducts_result({success: result});
        output.writeMessageBegin("getCoinProducts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getCoinProducts_result(err);
          output.writeMessageBegin("getCoinProducts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCoinProducts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCoinProducts(args.appStoreCode, args.country, args.language, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getCoinProducts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCoinProducts", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCoinProducts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_searchProducts (seqid, input, output) {
    const args = new ShopService_searchProducts_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.searchProducts.length === 5) {
      Promise.resolve(this._handler.searchProducts.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country,
        args.query
      )).then(result => {
        const result_obj = new ShopService_searchProducts_result({success: result});
        output.writeMessageBegin("searchProducts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_searchProducts_result(err);
          output.writeMessageBegin("searchProducts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("searchProducts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.searchProducts(args.start, args.size, args.language, args.country, args.query, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_searchProducts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("searchProducts", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("searchProducts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_buyMustbuyProduct (seqid, input, output) {
    const args = new ShopService_buyMustbuyProduct_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.buyMustbuyProduct.length === 7) {
      Promise.resolve(this._handler.buyMustbuyProduct.bind(this._handler)(
        args.receiverMid,
        args.productId,
        args.messageTemplate,
        args.language,
        args.country,
        args.packageId,
        args.serialNumber
      )).then(result => {
        const result_obj = new ShopService_buyMustbuyProduct_result({success: result});
        output.writeMessageBegin("buyMustbuyProduct", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_buyMustbuyProduct_result(err);
          output.writeMessageBegin("buyMustbuyProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("buyMustbuyProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.buyMustbuyProduct(args.receiverMid, args.productId, args.messageTemplate, args.language, args.country, args.packageId, args.serialNumber, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_buyMustbuyProduct_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("buyMustbuyProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("buyMustbuyProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getRecommendationsForProduct (seqid, input, output) {
    const args = new ShopService_getRecommendationsForProduct_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getRecommendationsForProduct.length === 5) {
      Promise.resolve(this._handler.getRecommendationsForProduct.bind(this._handler)(
        args.packageID,
        args.offset,
        args.limit,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getRecommendationsForProduct_result({success: result});
        output.writeMessageBegin("getRecommendationsForProduct", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getRecommendationsForProduct_result(err);
          output.writeMessageBegin("getRecommendationsForProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRecommendationsForProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getRecommendationsForProduct(args.packageID, args.offset, args.limit, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getRecommendationsForProduct_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getRecommendationsForProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRecommendationsForProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getUpdates (seqid, input, output) {
    const args = new ShopService_getUpdates_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getUpdates.length === 3) {
      Promise.resolve(this._handler.getUpdates.bind(this._handler)(
        args.language,
        args.country,
        args.localVersion
      )).then(result => {
        const result_obj = new ShopService_getUpdates_result({success: result});
        output.writeMessageBegin("getUpdates", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getUpdates_result(err);
          output.writeMessageBegin("getUpdates", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUpdates", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getUpdates(args.language, args.country, args.localVersion, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getUpdates_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getUpdates", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUpdates", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getActivePurchases (seqid, input, output) {
    const args = new ShopService_getActivePurchases_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getActivePurchases.length === 4) {
      Promise.resolve(this._handler.getActivePurchases.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getActivePurchases_result({success: result});
        output.writeMessageBegin("getActivePurchases", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getActivePurchases_result(err);
          output.writeMessageBegin("getActivePurchases", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActivePurchases", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getActivePurchases(args.start, args.size, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getActivePurchases_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getActivePurchases", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActivePurchases", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getProductWithCarrier (seqid, input, output) {
    const args = new ShopService_getProductWithCarrier_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getProductWithCarrier.length === 4) {
      Promise.resolve(this._handler.getProductWithCarrier.bind(this._handler)(
        args.packageID,
        args.language,
        args.country,
        args.carrierCode
      )).then(result => {
        const result_obj = new ShopService_getProductWithCarrier_result({success: result});
        output.writeMessageBegin("getProductWithCarrier", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getProductWithCarrier_result(err);
          output.writeMessageBegin("getProductWithCarrier", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductWithCarrier", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getProductWithCarrier(args.packageID, args.language, args.country, args.carrierCode, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getProductWithCarrier_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getProductWithCarrier", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductWithCarrier", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_buyCoinProduct (seqid, input, output) {
    const args = new ShopService_buyCoinProduct_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.buyCoinProduct.length === 1) {
      Promise.resolve(this._handler.buyCoinProduct.bind(this._handler)(
        args.paymentReservation
      )).then(result => {
        const result_obj = new ShopService_buyCoinProduct_result({success: result});
        output.writeMessageBegin("buyCoinProduct", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_buyCoinProduct_result(err);
          output.writeMessageBegin("buyCoinProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("buyCoinProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.buyCoinProduct(args.paymentReservation, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_buyCoinProduct_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("buyCoinProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("buyCoinProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPopularPackages (seqid, input, output) {
    const args = new ShopService_getPopularPackages_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPopularPackages.length === 4) {
      Promise.resolve(this._handler.getPopularPackages.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getPopularPackages_result({success: result});
        output.writeMessageBegin("getPopularPackages", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getPopularPackages_result(err);
          output.writeMessageBegin("getPopularPackages", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPopularPackages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPopularPackages(args.start, args.size, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getPopularPackages_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPopularPackages", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPopularPackages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_reservePayment (seqid, input, output) {
    const args = new ShopService_reservePayment_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.reservePayment.length === 1) {
      Promise.resolve(this._handler.reservePayment.bind(this._handler)(
        args.paymentReservation
      )).then(result => {
        const result_obj = new ShopService_reservePayment_result({success: result});
        output.writeMessageBegin("reservePayment", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_reservePayment_result(err);
          output.writeMessageBegin("reservePayment", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reservePayment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.reservePayment(args.paymentReservation, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_reservePayment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("reservePayment", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reservePayment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPresentsSent (seqid, input, output) {
    const args = new ShopService_getPresentsSent_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPresentsSent.length === 4) {
      Promise.resolve(this._handler.getPresentsSent.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getPresentsSent_result({success: result});
        output.writeMessageBegin("getPresentsSent", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getPresentsSent_result(err);
          output.writeMessageBegin("getPresentsSent", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPresentsSent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPresentsSent(args.start, args.size, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getPresentsSent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPresentsSent", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPresentsSent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_checkCanReceivePresent (seqid, input, output) {
    const args = new ShopService_checkCanReceivePresent_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.checkCanReceivePresent.length === 4) {
      Promise.resolve(this._handler.checkCanReceivePresent.bind(this._handler)(
        args.recipientMid,
        args.packageId,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_checkCanReceivePresent_result({success: result});
        output.writeMessageBegin("checkCanReceivePresent", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_checkCanReceivePresent_result(err);
          output.writeMessageBegin("checkCanReceivePresent", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkCanReceivePresent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.checkCanReceivePresent(args.recipientMid, args.packageId, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_checkCanReceivePresent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("checkCanReceivePresent", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkCanReceivePresent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getFreePackages (seqid, input, output) {
    const args = new ShopService_getFreePackages_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getFreePackages.length === 4) {
      Promise.resolve(this._handler.getFreePackages.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getFreePackages_result({success: result});
        output.writeMessageBegin("getFreePackages", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getFreePackages_result(err);
          output.writeMessageBegin("getFreePackages", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFreePackages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getFreePackages(args.start, args.size, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getFreePackages_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getFreePackages", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFreePackages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPurchaseHistory (seqid, input, output) {
    const args = new ShopService_getPurchaseHistory_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPurchaseHistory.length === 4) {
      Promise.resolve(this._handler.getPurchaseHistory.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getPurchaseHistory_result({success: result});
        output.writeMessageBegin("getPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getPurchaseHistory_result(err);
          output.writeMessageBegin("getPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPurchaseHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPurchaseHistory(args.start, args.size, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getPurchaseHistory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPurchaseHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getTotalBalance (seqid, input, output) {
    const args = new ShopService_getTotalBalance_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getTotalBalance.length === 1) {
      Promise.resolve(this._handler.getTotalBalance.bind(this._handler)(
        args.appStoreCode
      )).then(result => {
        const result_obj = new ShopService_getTotalBalance_result({success: result});
        output.writeMessageBegin("getTotalBalance", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getTotalBalance_result(err);
          output.writeMessageBegin("getTotalBalance", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getTotalBalance", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getTotalBalance(args.appStoreCode, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getTotalBalance_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getTotalBalance", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getTotalBalance", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCoinUseAndRefundHistory (seqid, input, output) {
    const args = new ShopService_getCoinUseAndRefundHistory_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCoinUseAndRefundHistory.length === 1) {
      Promise.resolve(this._handler.getCoinUseAndRefundHistory.bind(this._handler)(
        args.request
      )).then(result => {
        const result_obj = new ShopService_getCoinUseAndRefundHistory_result({success: result});
        output.writeMessageBegin("getCoinUseAndRefundHistory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getCoinUseAndRefundHistory_result(err);
          output.writeMessageBegin("getCoinUseAndRefundHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCoinUseAndRefundHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCoinUseAndRefundHistory(args.request, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getCoinUseAndRefundHistory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCoinUseAndRefundHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCoinUseAndRefundHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPresentsReceived (seqid, input, output) {
    const args = new ShopService_getPresentsReceived_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPresentsReceived.length === 4) {
      Promise.resolve(this._handler.getPresentsReceived.bind(this._handler)(
        args.start,
        args.size,
        args.language,
        args.country
      )).then(result => {
        const result_obj = new ShopService_getPresentsReceived_result({success: result});
        output.writeMessageBegin("getPresentsReceived", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ShopService_getPresentsReceived_result(err);
          output.writeMessageBegin("getPresentsReceived", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPresentsReceived", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPresentsReceived(args.start, args.size, args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ShopService_getPresentsReceived_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPresentsReceived", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPresentsReceived", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
