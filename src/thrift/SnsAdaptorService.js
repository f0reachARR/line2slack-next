//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = require('./talk_types');
//HELPER FUNCTIONS AND STRUCTURES

const SnsAdaptorService_getSnsFriends_args = class {
  constructor(args) {
    this.snsIdType = null;
    this.snsAccessToken = null;
    this.startIdx = null;
    this.limit = null;
    if (args) {
      if (args.snsIdType !== undefined && args.snsIdType !== null) {
        this.snsIdType = args.snsIdType;
      }
      if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
        this.snsAccessToken = args.snsAccessToken;
      }
      if (args.startIdx !== undefined && args.startIdx !== null) {
        this.startIdx = args.startIdx;
      }
      if (args.limit !== undefined && args.limit !== null) {
        this.limit = args.limit;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.snsIdType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.snsAccessToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.startIdx = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.limit = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SnsAdaptorService_getSnsFriends_args');
    if (this.snsIdType !== null && this.snsIdType !== undefined) {
      output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
      output.writeI32(this.snsIdType);
      output.writeFieldEnd();
    }
    if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
      output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
      output.writeString(this.snsAccessToken);
      output.writeFieldEnd();
    }
    if (this.startIdx !== null && this.startIdx !== undefined) {
      output.writeFieldBegin('startIdx', Thrift.Type.I32, 4);
      output.writeI32(this.startIdx);
      output.writeFieldEnd();
    }
    if (this.limit !== null && this.limit !== undefined) {
      output.writeFieldBegin('limit', Thrift.Type.I32, 5);
      output.writeI32(this.limit);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SnsAdaptorService_getSnsFriends_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SnsFriends(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SnsFriends();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SnsAdaptorService_getSnsFriends_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SnsAdaptorService_getSnsMyProfile_args = class {
  constructor(args) {
    this.snsIdType = null;
    this.snsAccessToken = null;
    if (args) {
      if (args.snsIdType !== undefined && args.snsIdType !== null) {
        this.snsIdType = args.snsIdType;
      }
      if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
        this.snsAccessToken = args.snsAccessToken;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.snsIdType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.snsAccessToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SnsAdaptorService_getSnsMyProfile_args');
    if (this.snsIdType !== null && this.snsIdType !== undefined) {
      output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
      output.writeI32(this.snsIdType);
      output.writeFieldEnd();
    }
    if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
      output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
      output.writeString(this.snsAccessToken);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SnsAdaptorService_getSnsMyProfile_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SnsProfile(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SnsProfile();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SnsAdaptorService_getSnsMyProfile_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SnsAdaptorService_postSnsInvitationMessage_args = class {
  constructor(args) {
    this.snsIdType = null;
    this.snsAccessToken = null;
    this.toSnsUserId = null;
    if (args) {
      if (args.snsIdType !== undefined && args.snsIdType !== null) {
        this.snsIdType = args.snsIdType;
      }
      if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
        this.snsAccessToken = args.snsAccessToken;
      }
      if (args.toSnsUserId !== undefined && args.toSnsUserId !== null) {
        this.toSnsUserId = args.toSnsUserId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.snsIdType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.snsAccessToken = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.toSnsUserId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SnsAdaptorService_postSnsInvitationMessage_args');
    if (this.snsIdType !== null && this.snsIdType !== undefined) {
      output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
      output.writeI32(this.snsIdType);
      output.writeFieldEnd();
    }
    if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
      output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
      output.writeString(this.snsAccessToken);
      output.writeFieldEnd();
    }
    if (this.toSnsUserId !== null && this.toSnsUserId !== undefined) {
      output.writeFieldBegin('toSnsUserId', Thrift.Type.STRING, 4);
      output.writeString(this.toSnsUserId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SnsAdaptorService_postSnsInvitationMessage_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SnsAdaptorService_postSnsInvitationMessage_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SnsAdaptorServiceClient = exports.Client = class {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  getSnsFriends (snsIdType, snsAccessToken, startIdx, limit) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getSnsFriends(snsIdType, snsAccessToken, startIdx, limit);
    });
  }

  send_getSnsFriends (snsIdType, snsAccessToken, startIdx, limit) {
    const output = new this.pClass(this.output);
    const params = {
      snsIdType: snsIdType,
      snsAccessToken: snsAccessToken,
      startIdx: startIdx,
      limit: limit
    };
    const args = new SnsAdaptorService_getSnsFriends_args(params);
    try {
      output.writeMessageBegin('getSnsFriends', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getSnsFriends (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new SnsAdaptorService_getSnsFriends_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getSnsFriends failed: unknown result');
  }

  getSnsMyProfile (snsIdType, snsAccessToken) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getSnsMyProfile(snsIdType, snsAccessToken);
    });
  }

  send_getSnsMyProfile (snsIdType, snsAccessToken) {
    const output = new this.pClass(this.output);
    const params = {
      snsIdType: snsIdType,
      snsAccessToken: snsAccessToken
    };
    const args = new SnsAdaptorService_getSnsMyProfile_args(params);
    try {
      output.writeMessageBegin('getSnsMyProfile', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getSnsMyProfile (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new SnsAdaptorService_getSnsMyProfile_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getSnsMyProfile failed: unknown result');
  }

  postSnsInvitationMessage (snsIdType, snsAccessToken, toSnsUserId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId);
    });
  }

  send_postSnsInvitationMessage (snsIdType, snsAccessToken, toSnsUserId) {
    const output = new this.pClass(this.output);
    const params = {
      snsIdType: snsIdType,
      snsAccessToken: snsAccessToken,
      toSnsUserId: toSnsUserId
    };
    const args = new SnsAdaptorService_postSnsInvitationMessage_args(params);
    try {
      output.writeMessageBegin('postSnsInvitationMessage', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_postSnsInvitationMessage (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new SnsAdaptorService_postSnsInvitationMessage_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    callback(null);
  }
};
const SnsAdaptorServiceProcessor = exports.Processor = class {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_getSnsFriends (seqid, input, output) {
    const args = new SnsAdaptorService_getSnsFriends_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getSnsFriends.length === 4) {
      Promise.resolve(this._handler.getSnsFriends.bind(this._handler)(
        args.snsIdType,
        args.snsAccessToken,
        args.startIdx,
        args.limit
      )).then(result => {
        const result_obj = new SnsAdaptorService_getSnsFriends_result({success: result});
        output.writeMessageBegin("getSnsFriends", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new SnsAdaptorService_getSnsFriends_result(err);
          output.writeMessageBegin("getSnsFriends", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSnsFriends", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getSnsFriends(args.snsIdType, args.snsAccessToken, args.startIdx, args.limit, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new SnsAdaptorService_getSnsFriends_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getSnsFriends", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSnsFriends", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getSnsMyProfile (seqid, input, output) {
    const args = new SnsAdaptorService_getSnsMyProfile_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getSnsMyProfile.length === 2) {
      Promise.resolve(this._handler.getSnsMyProfile.bind(this._handler)(
        args.snsIdType,
        args.snsAccessToken
      )).then(result => {
        const result_obj = new SnsAdaptorService_getSnsMyProfile_result({success: result});
        output.writeMessageBegin("getSnsMyProfile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new SnsAdaptorService_getSnsMyProfile_result(err);
          output.writeMessageBegin("getSnsMyProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSnsMyProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getSnsMyProfile(args.snsIdType, args.snsAccessToken, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new SnsAdaptorService_getSnsMyProfile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getSnsMyProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSnsMyProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_postSnsInvitationMessage (seqid, input, output) {
    const args = new SnsAdaptorService_postSnsInvitationMessage_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.postSnsInvitationMessage.length === 3) {
      Promise.resolve(this._handler.postSnsInvitationMessage.bind(this._handler)(
        args.snsIdType,
        args.snsAccessToken,
        args.toSnsUserId
      )).then(result => {
        const result_obj = new SnsAdaptorService_postSnsInvitationMessage_result({success: result});
        output.writeMessageBegin("postSnsInvitationMessage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new SnsAdaptorService_postSnsInvitationMessage_result(err);
          output.writeMessageBegin("postSnsInvitationMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("postSnsInvitationMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.postSnsInvitationMessage(args.snsIdType, args.snsAccessToken, args.toSnsUserId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new SnsAdaptorService_postSnsInvitationMessage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("postSnsInvitationMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("postSnsInvitationMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
