//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./talk_types');
import AccountMigrationCheckType = ttypes.AccountMigrationCheckType
import AccountMigrationPincodeType = ttypes.AccountMigrationPincodeType
import ApplicationType = ttypes.ApplicationType
import AsymmetricKeyAlgorithm = ttypes.AsymmetricKeyAlgorithm
import BeaconNotificationType = ttypes.BeaconNotificationType
import BotType = ttypes.BotType
import BuddyBannerLinkType = ttypes.BuddyBannerLinkType
import BuddyCollectionType = ttypes.BuddyCollectionType
import BuddyOnAirLabel = ttypes.BuddyOnAirLabel
import BuddyOnAirType = ttypes.BuddyOnAirType
import BuddyProfilePopupType = ttypes.BuddyProfilePopupType
import BuddyResultState = ttypes.BuddyResultState
import BuddySearchRequestSource = ttypes.BuddySearchRequestSource
import BuddyStatusBarDisplayType = ttypes.BuddyStatusBarDisplayType
import CarrierCode = ttypes.CarrierCode
import ChannelConfiguration = ttypes.ChannelConfiguration
import ChannelErrorCode = ttypes.ChannelErrorCode
import ChannelPermission = ttypes.ChannelPermission
import ChannelSyncTarget = ttypes.ChannelSyncTarget
import ChannelSyncType = ttypes.ChannelSyncType
import CommitMessageResultCode = ttypes.CommitMessageResultCode
import ContactAttribute = ttypes.ContactAttribute
import ContactCategory = ttypes.ContactCategory
import ContactRelation = ttypes.ContactRelation
import ContactSetting = ttypes.ContactSetting
import ContactStatus = ttypes.ContactStatus
import ContactType = ttypes.ContactType
import ContentType = ttypes.ContentType
import CustomMode = ttypes.CustomMode
import DeviceBooleanStateKey = ttypes.DeviceBooleanStateKey
import DeviceStringStateKey = ttypes.DeviceStringStateKey
import Diff = ttypes.Diff
import EmailConfirmationStatus = ttypes.EmailConfirmationStatus
import EmailConfirmationType = ttypes.EmailConfirmationType
import ErrorCode = ttypes.ErrorCode
import ExtendedProfileAttribute = ttypes.ExtendedProfileAttribute
import FeatureType = ttypes.FeatureType
import FriendRequestDirection = ttypes.FriendRequestDirection
import FriendRequestMethod = ttypes.FriendRequestMethod
import FriendRequestStatus = ttypes.FriendRequestStatus
import GroupAttribute = ttypes.GroupAttribute
import GroupCallMediaType = ttypes.GroupCallMediaType
import GroupPreferenceAttribute = ttypes.GroupPreferenceAttribute
import IdentityProvider = ttypes.IdentityProvider
import LoginResultType = ttypes.LoginResultType
import LoginType = ttypes.LoginType
import MessageRelationType = ttypes.MessageRelationType
import MIDType = ttypes.MIDType
import ModificationType = ttypes.ModificationType
import NotificationItemFetchMode = ttypes.NotificationItemFetchMode
import NotificationStatus = ttypes.NotificationStatus
import NotificationType = ttypes.NotificationType
import OpStatus = ttypes.OpStatus
import OpType = ttypes.OpType
import PaidCallerIdStatus = ttypes.PaidCallerIdStatus
import PaidCallProductType = ttypes.PaidCallProductType
import PaidCallType = ttypes.PaidCallType
import PayloadType = ttypes.PayloadType
import PaymentPgType = ttypes.PaymentPgType
import PaymentType = ttypes.PaymentType
import PersonalInfo = ttypes.PersonalInfo
import PlaceSearchProvider = ttypes.PlaceSearchProvider
import PointErrorCode = ttypes.PointErrorCode
import PrivacyLevelType = ttypes.PrivacyLevelType
import ProductBannerLinkType = ttypes.ProductBannerLinkType
import ProductEventType = ttypes.ProductEventType
import ProfileAttribute = ttypes.ProfileAttribute
import PublicKeychainStatus = ttypes.PublicKeychainStatus
import PublicType = ttypes.PublicType
import RedirectType = ttypes.RedirectType
import RegistrationType = ttypes.RegistrationType
import ReportCategory = ttypes.ReportCategory
import ReservedMessageSessionId = ttypes.ReservedMessageSessionId
import RoomAttribute = ttypes.RoomAttribute
import SecurityCenterSettingsType = ttypes.SecurityCenterSettingsType
import ServiceCode = ttypes.ServiceCode
import SettingsAttribute = ttypes.SettingsAttribute
import SettingsAttributeEx = ttypes.SettingsAttributeEx
import SnsIdType = ttypes.SnsIdType
import SpammerReason = ttypes.SpammerReason
import SpotCategory = ttypes.SpotCategory
import StickerResourceType = ttypes.StickerResourceType
import SuggestDictionaryIncrementStatus = ttypes.SuggestDictionaryIncrementStatus
import SyncActionType = ttypes.SyncActionType
import SyncCategory = ttypes.SyncCategory
import SyncTriggerReason = ttypes.SyncTriggerReason
import TMessageBoxStatus = ttypes.TMessageBoxStatus
import TrackingType = ttypes.TrackingType
import UnregistrationReason = ttypes.UnregistrationReason
import UserAgeType = ttypes.UserAgeType
import UserStatus = ttypes.UserStatus
import VerificationMethod = ttypes.VerificationMethod
import VerificationResult = ttypes.VerificationResult
import WapInvitationType = ttypes.WapInvitationType
import LoginQrCode_ErrorCode = ttypes.LoginQrCode_ErrorCode
import ChannelException = ttypes.ChannelException
import PointException = ttypes.PointException
import ShouldSyncException = ttypes.ShouldSyncException
import TalkException = ttypes.TalkException
import SecondaryQrCodeException = ttypes.SecondaryQrCodeException
import AgeCheckDocomoResult = ttypes.AgeCheckDocomoResult
import AgeCheckRequestResult = ttypes.AgeCheckRequestResult
import AnalyticsInfo = ttypes.AnalyticsInfo
import Announcement = ttypes.Announcement
import ApprovedChannelInfo = ttypes.ApprovedChannelInfo
import ApprovedChannelInfos = ttypes.ApprovedChannelInfos
import AuthQrcode = ttypes.AuthQrcode
import Balance = ttypes.Balance
import BanPage = ttypes.BanPage
import BeaconBackgroundNotification = ttypes.BeaconBackgroundNotification
import BeaconCondition = ttypes.BeaconCondition
import BeaconLayerInfoAndActions = ttypes.BeaconLayerInfoAndActions
import BeaconQueryResponse = ttypes.BeaconQueryResponse
import BeaconTouchActions = ttypes.BeaconTouchActions
import BotUseInfo = ttypes.BotUseInfo
import BuddyBanner = ttypes.BuddyBanner
import BuddyCategoryEntry = ttypes.BuddyCategoryEntry
import BuddyCategoryView = ttypes.BuddyCategoryView
import BuddyChatBar = ttypes.BuddyChatBar
import BuddyChatBarItem = ttypes.BuddyChatBarItem
import BuddyCollection = ttypes.BuddyCollection
import BuddyCollectionEntry = ttypes.BuddyCollectionEntry
import BuddyDetail = ttypes.BuddyDetail
import BuddyList = ttypes.BuddyList
import BuddyMessageRequest = ttypes.BuddyMessageRequest
import BuddyNewsEntry = ttypes.BuddyNewsEntry
import BuddyNewsView = ttypes.BuddyNewsView
import BuddyOnAir = ttypes.BuddyOnAir
import BuddyOnAirUrls = ttypes.BuddyOnAirUrls
import BuddyProfile = ttypes.BuddyProfile
import BuddyProfilePopup = ttypes.BuddyProfilePopup
import BuddyRichMenuChatBarItem = ttypes.BuddyRichMenuChatBarItem
import BuddyRichMenuContents = ttypes.BuddyRichMenuContents
import BuddySearchResult = ttypes.BuddySearchResult
import BuddyStatusBar = ttypes.BuddyStatusBar
import BuddyTopView = ttypes.BuddyTopView
import BuddyWebChatBarItem = ttypes.BuddyWebChatBarItem
import BuddyWidget = ttypes.BuddyWidget
import BuddyWidgetListCharBarItem = ttypes.BuddyWidgetListCharBarItem
import CallHost = ttypes.CallHost
import ChannelDomain = ttypes.ChannelDomain
import ChannelDomains = ttypes.ChannelDomains
import ChannelIdWithLastUpdated = ttypes.ChannelIdWithLastUpdated
import ChannelInfo = ttypes.ChannelInfo
import ChannelInfos = ttypes.ChannelInfos
import ChannelNotificationSetting = ttypes.ChannelNotificationSetting
import ChannelProvider = ttypes.ChannelProvider
import ChannelSettings = ttypes.ChannelSettings
import ChannelSyncDatas = ttypes.ChannelSyncDatas
import ChannelToken = ttypes.ChannelToken
import ClientLastStatus = ttypes.ClientLastStatus
import Coin = ttypes.Coin
import CoinHistory = ttypes.CoinHistory
import CoinHistoryCondition = ttypes.CoinHistoryCondition
import CoinHistoryResult = ttypes.CoinHistoryResult
import CoinPayLoad = ttypes.CoinPayLoad
import CoinProductItem = ttypes.CoinProductItem
import CoinPurchaseConfirm = ttypes.CoinPurchaseConfirm
import CoinPurchaseReservation = ttypes.CoinPurchaseReservation
import CoinUseReservation = ttypes.CoinUseReservation
import CoinUseReservationItem = ttypes.CoinUseReservationItem
import CommitMessageResult = ttypes.CommitMessageResult
import CommitSendMessagesToMidRequest = ttypes.CommitSendMessagesToMidRequest
import CommitSendMessagesToMidResponse = ttypes.CommitSendMessagesToMidResponse
import CompactContact = ttypes.CompactContact
import Configurations = ttypes.Configurations
import Contact = ttypes.Contact
import ContactModification = ttypes.ContactModification
import ContactRegistration = ttypes.ContactRegistration
import ContactReport = ttypes.ContactReport
import ContactReportResult = ttypes.ContactReportResult
import ContactTransition = ttypes.ContactTransition
import DeviceInfo = ttypes.DeviceInfo
import E2EEGroupSharedKey = ttypes.E2EEGroupSharedKey
import E2EEKey = ttypes.E2EEKey
import E2EEKeyChain = ttypes.E2EEKeyChain
import E2EENegotiationResult = ttypes.E2EENegotiationResult
import E2EEPublicKey = ttypes.E2EEPublicKey
import EmailConfirmation = ttypes.EmailConfirmation
import EmailConfirmationResult = ttypes.EmailConfirmationResult
import EmailConfirmationSession = ttypes.EmailConfirmationSession
import ExtendedProfile = ttypes.ExtendedProfile
import ExtendedProfileBirthday = ttypes.ExtendedProfileBirthday
import FriendChannelMatricesResponse = ttypes.FriendChannelMatricesResponse
import FriendChannelMatrix = ttypes.FriendChannelMatrix
import FriendRequest = ttypes.FriendRequest
import FriendRequestsInfo = ttypes.FriendRequestsInfo
import Geolocation = ttypes.Geolocation
import GetBalanceRequest = ttypes.GetBalanceRequest
import GetBalanceResponse = ttypes.GetBalanceResponse
import GetCoinHistoryRequest = ttypes.GetCoinHistoryRequest
import GetCoinHistoryResponse = ttypes.GetCoinHistoryResponse
import GetCoinProductsRequest = ttypes.GetCoinProductsRequest
import GetCoinProductsResponse = ttypes.GetCoinProductsResponse
import GetTotalCoinBalanceRequest = ttypes.GetTotalCoinBalanceRequest
import GetTotalCoinBalanceResponse = ttypes.GetTotalCoinBalanceResponse
import Group = ttypes.Group
import GroupCall = ttypes.GroupCall
import GroupCallRoute = ttypes.GroupCallRoute
import GroupPreference = ttypes.GroupPreference
import IdentityCredential = ttypes.IdentityCredential
import Location = ttypes.Location
import LoginRequest = ttypes.LoginRequest
import LoginResult = ttypes.LoginResult
import LoginSession = ttypes.LoginSession
import Message = ttypes.Message
import MessageBoxV2MessageId = ttypes.MessageBoxV2MessageId
import MessageCommitResult = ttypes.MessageCommitResult
import MessageStoreResult = ttypes.MessageStoreResult
import MetaProfile = ttypes.MetaProfile
import MoretabRecommend = ttypes.MoretabRecommend
import MoretabRecommendAccount = ttypes.MoretabRecommendAccount
import NearbyEntry = ttypes.NearbyEntry
import NotiCenterEventData = ttypes.NotiCenterEventData
import NotificationFetchResult = ttypes.NotificationFetchResult
import NotificationItem = ttypes.NotificationItem
import Operation = ttypes.Operation
import OTPResult = ttypes.OTPResult
import PaidCallAdCountry = ttypes.PaidCallAdCountry
import PaidCallAdResult = ttypes.PaidCallAdResult
import PaidCallBalance = ttypes.PaidCallBalance
import PaidCallCurrencyExchangeRate = ttypes.PaidCallCurrencyExchangeRate
import PaidCallDialing = ttypes.PaidCallDialing
import PaidCallHistory = ttypes.PaidCallHistory
import PaidCallHistoryResult = ttypes.PaidCallHistoryResult
import PaidCallMetadataResult = ttypes.PaidCallMetadataResult
import PaidCallRedeemResult = ttypes.PaidCallRedeemResult
import PaidCallResponse = ttypes.PaidCallResponse
import PaidCallUserRate = ttypes.PaidCallUserRate
import PaymentReservation = ttypes.PaymentReservation
import PaymentReservationResult = ttypes.PaymentReservationResult
import PhoneInfoForChannel = ttypes.PhoneInfoForChannel
import PhoneVerificationResult = ttypes.PhoneVerificationResult
import PlaceSearchInfo = ttypes.PlaceSearchInfo
import PrivateBotMessage = ttypes.PrivateBotMessage
import Product = ttypes.Product
import ProductCategory = ttypes.ProductCategory
import ProductList = ttypes.ProductList
import ProductSimple = ttypes.ProductSimple
import ProductSimpleList = ttypes.ProductSimpleList
import Profile = ttypes.Profile
import ProximityMatchCandidateEntry = ttypes.ProximityMatchCandidateEntry
import ProximityMatchCandidateResult = ttypes.ProximityMatchCandidateResult
import PublicKey = ttypes.PublicKey
import PublicKeychain = ttypes.PublicKeychain
import QueueingPolicy = ttypes.QueueingPolicy
import RegisterWithPhoneNumberResult = ttypes.RegisterWithPhoneNumberResult
import RegisterWithSnsIdResult = ttypes.RegisterWithSnsIdResult
import RequestTokenResponse = ttypes.RequestTokenResponse
import RingbackTone = ttypes.RingbackTone
import Room = ttypes.Room
import RSAKey = ttypes.RSAKey
import SecurityCenterResult = ttypes.SecurityCenterResult
import SendBuddyMessageResult = ttypes.SendBuddyMessageResult
import SendPostbackRequest = ttypes.SendPostbackRequest
import SetBuddyOnAirResult = ttypes.SetBuddyOnAirResult
import Settings = ttypes.Settings
import ShopUpdates = ttypes.ShopUpdates
import SIMInfo = ttypes.SIMInfo
import SimpleChannelClient = ttypes.SimpleChannelClient
import SimpleChannelContact = ttypes.SimpleChannelContact
import SnsFriend = ttypes.SnsFriend
import SnsFriendContactRegistration = ttypes.SnsFriendContactRegistration
import SnsFriendModification = ttypes.SnsFriendModification
import SnsFriends = ttypes.SnsFriends
import SnsIdUserStatus = ttypes.SnsIdUserStatus
import SnsProfile = ttypes.SnsProfile
import SpotItem = ttypes.SpotItem
import SpotNearbyItem = ttypes.SpotNearbyItem
import SpotNearbyResponse = ttypes.SpotNearbyResponse
import SpotPhoneNumberResponse = ttypes.SpotPhoneNumberResponse
import StickerIdRange = ttypes.StickerIdRange
import SuggestDictionary = ttypes.SuggestDictionary
import SuggestDictionaryIncrements = ttypes.SuggestDictionaryIncrements
import SuggestDictionaryRevisions = ttypes.SuggestDictionaryRevisions
import SuggestDictionarySettings = ttypes.SuggestDictionarySettings
import SuggestItemDictionaryIncrement = ttypes.SuggestItemDictionaryIncrement
import SuggestItemDictionaryRevision = ttypes.SuggestItemDictionaryRevision
import SuggestTagDictionaryIncrement = ttypes.SuggestTagDictionaryIncrement
import SuggestTagDictionaryRevision = ttypes.SuggestTagDictionaryRevision
import SyncParamContact = ttypes.SyncParamContact
import SyncParamMid = ttypes.SyncParamMid
import SyncRelations = ttypes.SyncRelations
import SyncScope = ttypes.SyncScope
import SystemConfiguration = ttypes.SystemConfiguration
import Ticket = ttypes.Ticket
import TMessageBox = ttypes.TMessageBox
import TMessageBoxWrapUp = ttypes.TMessageBoxWrapUp
import TMessageBoxWrapUpResponse = ttypes.TMessageBoxWrapUpResponse
import TMessageReadRange = ttypes.TMessageReadRange
import TMessageReadRangeEntry = ttypes.TMessageReadRangeEntry
import UnregisterBuddyResult = ttypes.UnregisterBuddyResult
import UpdateBuddyProfileResult = ttypes.UpdateBuddyProfileResult
import UserAuthStatus = ttypes.UserAuthStatus
import UserTicketResponse = ttypes.UserTicketResponse
import ValidateContactsResult = ttypes.ValidateContactsResult
import VerificationSessionData = ttypes.VerificationSessionData
import WapInvitation = ttypes.WapInvitation
import LoginQrCode_CreateQrSessionResponse = ttypes.LoginQrCode_CreateQrSessionResponse
import LoginQrCode_CreateQrCodeRequest = ttypes.LoginQrCode_CreateQrCodeRequest
import LoginQrCode_CreateQrCodeResponse = ttypes.LoginQrCode_CreateQrCodeResponse
import LoginQrCode_VerifyCertificateRequest = ttypes.LoginQrCode_VerifyCertificateRequest
import LoginQrCode_CreatePinCodeRequest = ttypes.LoginQrCode_CreatePinCodeRequest
import LoginQrCode_CreatePinCodeResponse = ttypes.LoginQrCode_CreatePinCodeResponse
import LoginQrCode_QrCodeLoginRequest = ttypes.LoginQrCode_QrCodeLoginRequest
import LoginQrCode_QrCodeLoginResponse = ttypes.LoginQrCode_QrCodeLoginResponse
import LoginQrCode_CheckQrCodeVerifiedRequest = ttypes.LoginQrCode_CheckQrCodeVerifiedRequest
import LoginQrCode_CheckPinCodeVerifiedRequest = ttypes.LoginQrCode_CheckPinCodeVerifiedRequest

declare class Client {
    private output: thrift.TTransport;
    private pClass: thrift.TProtocol;
    private _seqid: number;

    constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

    reportDeviceState(booleanState: { [k: number /*DeviceBooleanStateKey*/]: boolean; }, stringState: { [k: number /*DeviceStringStateKey*/]: string; }): Promise<void>;

    reportDeviceState(booleanState: { [k: number /*DeviceBooleanStateKey*/]: boolean; }, stringState: { [k: number /*DeviceStringStateKey*/]: string; }, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    notifySleepV2(lastStatusMap: { [k: number /*ServiceCode*/]: ClientLastStatus; }): Promise<void>;

    notifySleepV2(lastStatusMap: { [k: number /*ServiceCode*/]: ClientLastStatus; }, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    updateNotificationToken(token: string, type: NotificationType): Promise<void>;

    updateNotificationToken(token: string, type: NotificationType, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    updateGroup(reqSeq: number, group: Group): Promise<void>;

    updateGroup(reqSeq: number, group: Group, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    verifyAccountMigrationPincode(migrationPincodeSessionId: string, accountMigrationPincode: string): Promise<void>;

    verifyAccountMigrationPincode(migrationPincodeSessionId: string, accountMigrationPincode: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    registerWithExistingSnsIdAndIdentityCredential(identityCredential: IdentityCredential, region: string, udidHash: string, deviceInfo: DeviceInfo, migrationPincodeSessionId: string): Promise<string>;

    registerWithExistingSnsIdAndIdentityCredential(identityCredential: IdentityCredential, region: string, udidHash: string, deviceInfo: DeviceInfo, migrationPincodeSessionId: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    registerDeviceWithoutPhoneNumber(region: string, udidHash: string, deviceInfo: DeviceInfo): Promise<string>;

    registerDeviceWithoutPhoneNumber(region: string, udidHash: string, deviceInfo: DeviceInfo, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    changeVerificationMethod(sessionId: string, method: VerificationMethod): Promise<VerificationSessionData>;

    changeVerificationMethod(sessionId: string, method: VerificationMethod, callback?: (error: ttypes.TalkException, response: VerificationSessionData)=>void): void;

    setBuddyLocation(mid: string, index: number, location: Geolocation): Promise<void>;

    setBuddyLocation(mid: string, index: number, location: Geolocation, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getFriendRequests(direction: FriendRequestDirection, lastSeenSeqId: Int64): Promise<FriendRequest[]>;

    getFriendRequests(direction: FriendRequestDirection, lastSeenSeqId: Int64, callback?: (error: ttypes.TalkException, response: FriendRequest[])=>void): void;

    kickoutFromGroup(reqSeq: number, groupId: string, contactIds: string[]): Promise<void>;

    kickoutFromGroup(reqSeq: number, groupId: string, contactIds: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    verifyIdentityCredentialWithResult(identityCredential: IdentityCredential, migrationPincodeSessionId: string): Promise<UserAuthStatus>;

    verifyIdentityCredentialWithResult(identityCredential: IdentityCredential, migrationPincodeSessionId: string, callback?: (error: ttypes.TalkException, response: UserAuthStatus)=>void): void;

    sendEchoPush(text: string): Promise<void>;

    sendEchoPush(text: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    createSession(): Promise<string>;

    createSession(callback?: (error: ttypes.TalkException, response: string)=>void): void;

    reissueDeviceCredential(): Promise<string>;

    reissueDeviceCredential(callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getRecommendationIds(): Promise<string[]>;

    getRecommendationIds(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    inviteViaEmail(reqSeq: number, email: string, name: string): Promise<void>;

    inviteViaEmail(reqSeq: number, email: string, name: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getRoomsV2(roomIds: string[]): Promise<Room[]>;

    getRoomsV2(roomIds: string[], callback?: (error: ttypes.TalkException, response: Room[])=>void): void;

    getReadMessageOps(chatId: string): Promise<Operation[]>;

    getReadMessageOps(chatId: string, callback?: (error: ttypes.TalkException, response: Operation[])=>void): void;

    getSettingsAttributes(attrBitset: number): Promise<Settings>;

    getSettingsAttributes(attrBitset: number, callback?: (error: ttypes.TalkException, response: Settings)=>void): void;

    requestIdentityUnbind(identifier: string, provider: IdentityProvider): Promise<void>;

    requestIdentityUnbind(identifier: string, provider: IdentityProvider, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getMessagesBySequenceNumber(channelId: string, messageBoxId: string, startSeq: Int64, endSeq: Int64): Promise<Message[]>;

    getMessagesBySequenceNumber(channelId: string, messageBoxId: string, startSeq: Int64, endSeq: Int64, callback?: (error: ttypes.TalkException, response: Message[])=>void): void;

    inviteIntoRoom(reqSeq: number, roomId: string, contactIds: string[]): Promise<void>;

    inviteIntoRoom(reqSeq: number, roomId: string, contactIds: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    sendChatChecked(seq: number, consumer: string, lastMessageId: string, sessionId: any): Promise<void>;

    sendChatChecked(seq: number, consumer: string, lastMessageId: string, sessionId: any, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    removeSnsId(snsIdType: SnsIdType): Promise<string>;

    removeSnsId(snsIdType: SnsIdType, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    reportSpammer(spammerMid: string, spammerReasons: SpammerReason[], spamMessageIds: string[], spamMessages: string[]): Promise<void>;

    reportSpammer(spammerMid: string, spammerReasons: SpammerReason[], spamMessageIds: string[], spamMessages: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    findAndAddContactsByEmail(reqSeq: number, emails: string[]): Promise<{ [k: string]: Contact; }>;

    findAndAddContactsByEmail(reqSeq: number, emails: string[], callback?: (error: ttypes.TalkException, response: { [k: string]: Contact; })=>void): void;

    getCompactGroups(groupIds: string[]): Promise<Group[]>;

    getCompactGroups(groupIds: string[], callback?: (error: ttypes.TalkException, response: Group[])=>void): void;

    sendMessage(seq: number, message: Message): Promise<Message>;

    sendMessage(seq: number, message: Message, callback?: (error: ttypes.TalkException, response: Message)=>void): void;

    getRooms(roomIds: string[]): Promise<Room[]>;

    getRooms(roomIds: string[], callback?: (error: ttypes.TalkException, response: Room[])=>void): void;

    updateC2DMRegistrationId(registrationId: string): Promise<void>;

    updateC2DMRegistrationId(registrationId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    sendPostback(request: SendPostbackRequest): Promise<void>;

    sendPostback(request: SendPostbackRequest, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getReadMessageOpsInBulk(chatIds: string[]): Promise<Operation[]>;

    getReadMessageOpsInBulk(chatIds: string[], callback?: (error: ttypes.TalkException, response: Operation[])=>void): void;

    sendMessageIgnored(seq: number, consumer: string, messageIds: string[]): Promise<void>;

    sendMessageIgnored(seq: number, consumer: string, messageIds: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getMessageBoxWrapUpListV2(messageBoxOffset: number, messageBoxCount: number): Promise<TMessageBoxWrapUpResponse>;

    getMessageBoxWrapUpListV2(messageBoxOffset: number, messageBoxCount: number, callback?: (error: ttypes.TalkException, response: TMessageBoxWrapUpResponse)=>void): void;

    getOldReadMessageOpsWithRange(startRev: Int64, endRev: Int64): Promise<Operation[]>;

    getOldReadMessageOpsWithRange(startRev: Int64, endRev: Int64, callback?: (error: ttypes.TalkException, response: Operation[])=>void): void;

    getRSAKeyInfo(provider: IdentityProvider): Promise<RSAKey>;

    getRSAKeyInfo(provider: IdentityProvider, callback?: (error: ttypes.TalkException, response: RSAKey)=>void): void;

    updateProfileAttribute(reqSeq: number, attr: ProfileAttribute, value: string): Promise<void>;

    updateProfileAttribute(reqSeq: number, attr: ProfileAttribute, value: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    createAccountMigrationPincodeSession(): Promise<string>;

    createAccountMigrationPincodeSession(callback?: (error: ttypes.TalkException, response: string)=>void): void;

    notifiedRedirect(paramMap: { [k: string]: string; }): Promise<void>;

    notifiedRedirect(paramMap: { [k: string]: string; }, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    notifyIndividualEvent(notificationStatus: NotificationStatus, receiverMids: string[]): Promise<void>;

    notifyIndividualEvent(notificationStatus: NotificationStatus, receiverMids: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    updateApnsDeviceToken(apnsDeviceToken: string): Promise<void>;

    updateApnsDeviceToken(apnsDeviceToken: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getMessageBoxCompactWrapUpListV2(messageBoxOffset: number, messageBoxCount: number): Promise<TMessageBoxWrapUpResponse>;

    getMessageBoxCompactWrapUpListV2(messageBoxOffset: number, messageBoxCount: number, callback?: (error: ttypes.TalkException, response: TMessageBoxWrapUpResponse)=>void): void;

    requestEmailConfirmation(emailConfirmation: EmailConfirmation): Promise<EmailConfirmationSession>;

    requestEmailConfirmation(emailConfirmation: EmailConfirmation, callback?: (error: ttypes.TalkException, response: EmailConfirmationSession)=>void): void;

    registerWithSnsIdAndIdentityCredential(snsIdType: SnsIdType, snsAccessToken: string, identityCredential: IdentityCredential, region: string, udidHash: string, deviceInfo: DeviceInfo, migrationPincodeSessionId: string): Promise<string>;

    registerWithSnsIdAndIdentityCredential(snsIdType: SnsIdType, snsAccessToken: string, identityCredential: IdentityCredential, region: string, udidHash: string, deviceInfo: DeviceInfo, migrationPincodeSessionId: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getMessageBoxCompactWrapUp(mid: string): Promise<TMessageBoxWrapUp>;

    getMessageBoxCompactWrapUp(mid: string, callback?: (error: ttypes.TalkException, response: TMessageBoxWrapUp)=>void): void;

    findContactByUserTicket(ticketIdWithTag: string): Promise<Contact>;

    findContactByUserTicket(ticketIdWithTag: string, callback?: (error: ttypes.TalkException, response: Contact)=>void): void;

    updateAccountMigrationPincode(accountMigrationPincode: string): Promise<void>;

    updateAccountMigrationPincode(accountMigrationPincode: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    registerBuddyUser(buddyId: string, registrarPassword: string): Promise<string>;

    registerBuddyUser(buddyId: string, registrarPassword: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    updateSettings2(reqSeq: number, settings: Settings): Promise<number>;

    updateSettings2(reqSeq: number, settings: Settings, callback?: (error: ttypes.TalkException, response: number)=>void): void;

    getUserTicket(): Promise<Ticket>;

    getUserTicket(callback?: (error: ttypes.TalkException, response: Ticket)=>void): void;

    fetchOps(localRev: Int64, count: number, globalRev: Int64, individualRev: Int64): Promise<Operation[]>;

    fetchOps(localRev: Int64, count: number, globalRev: Int64, individualRev: Int64, callback?: (error: ttypes.ShouldSyncException, response: Operation[])=>void): void;

    commitSendMessagesToMid(request: CommitSendMessagesToMidRequest): Promise<CommitSendMessagesToMidResponse>;

    commitSendMessagesToMid(request: CommitSendMessagesToMidRequest, callback?: (error: ttypes.TalkException, response: CommitSendMessagesToMidResponse)=>void): void;

    getMessageBoxV2(messageBoxId: string, lastMessagesCount: number): Promise<TMessageBox>;

    getMessageBoxV2(messageBoxId: string, lastMessagesCount: number, callback?: (error: ttypes.TalkException, response: TMessageBox)=>void): void;

    requestResendMessage(reqSeq: number, senderMid: string, messageId: string): Promise<void>;

    requestResendMessage(reqSeq: number, senderMid: string, messageId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getGroupWithoutMembers(groupId: string): Promise<Group>;

    getGroupWithoutMembers(groupId: string, callback?: (error: ttypes.TalkException, response: Group)=>void): void;

    removeAllMessages(seq: number, lastMessageId: string): Promise<void>;

    removeAllMessages(seq: number, lastMessageId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    verifyAccountMigration(migrationSessionId: string): Promise<void>;

    verifyAccountMigration(migrationSessionId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    reissueGroupTicket(groupMid: string): Promise<string>;

    reissueGroupTicket(groupMid: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    logoutSession(tokenKey: string): Promise<void>;

    logoutSession(tokenKey: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getBuddyLocation(mid: string, index: number): Promise<Geolocation>;

    getBuddyLocation(mid: string, index: number, callback?: (error: ttypes.TalkException, response: Geolocation)=>void): void;

    getWapInvitation(invitationHash: string): Promise<WapInvitation>;

    getWapInvitation(invitationHash: string, callback?: (error: ttypes.TalkException, response: WapInvitation)=>void): void;

    registerDevice(sessionId: string, migrationPincodeSessionId: string): Promise<string>;

    registerDevice(sessionId: string, migrationPincodeSessionId: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    clearMessageBox(channelId: string, messageBoxId: string): Promise<void>;

    clearMessageBox(channelId: string, messageBoxId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    loginWithIdentityCredentialForCertificate(identifier: string, password: string, keepLoggedIn: boolean, accessLocation: string, systemName: string, identityProvider: IdentityProvider, certificate: string): Promise<LoginResult>;

    loginWithIdentityCredentialForCertificate(identifier: string, password: string, keepLoggedIn: boolean, accessLocation: string, systemName: string, identityProvider: IdentityProvider, certificate: string, callback?: (error: ttypes.TalkException, response: LoginResult)=>void): void;

    getSuggestSettings(locale: string): Promise<SuggestDictionarySettings>;

    getSuggestSettings(locale: string, callback?: (error: ttypes.TalkException, response: SuggestDictionarySettings)=>void): void;

    updateAndGetNearby(latitude: number, longitude: number): Promise<NearbyEntry[]>;

    updateAndGetNearby(latitude: number, longitude: number, callback?: (error: ttypes.TalkException, response: NearbyEntry[])=>void): void;

    syncContactBySnsIds(reqSeq: number, modifications: SnsFriendModification[]): Promise<SnsFriendContactRegistration[]>;

    syncContactBySnsIds(reqSeq: number, modifications: SnsFriendModification[], callback?: (error: ttypes.TalkException, response: SnsFriendContactRegistration[])=>void): void;

    getContacts(ids: string[]): Promise<Contact[]>;

    getContacts(ids: string[], callback?: (error: ttypes.TalkException, response: Contact[])=>void): void;

    getMessageBoxCompactWrapUpList(start: number, messageBoxCount: number): Promise<TMessageBoxWrapUpResponse>;

    getMessageBoxCompactWrapUpList(start: number, messageBoxCount: number, callback?: (error: ttypes.TalkException, response: TMessageBoxWrapUpResponse)=>void): void;

    getProximityMatchCandidates(sessionId: string): Promise<Contact[]>;

    getProximityMatchCandidates(sessionId: string, callback?: (error: ttypes.TalkException, response: Contact[])=>void): void;

    updateExtendedProfileAttribute(reqSeq: number, attr: ExtendedProfileAttribute, extendedProfile: ExtendedProfile): Promise<void>;

    updateExtendedProfileAttribute(reqSeq: number, attr: ExtendedProfileAttribute, extendedProfile: ExtendedProfile, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    resendPinCode(sessionId: string): Promise<void>;

    resendPinCode(sessionId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    reportSettings(syncOpRevision: Int64, settings: Settings): Promise<void>;

    reportSettings(syncOpRevision: Int64, settings: Settings, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    registerBuddyUserid(seq: number, userid: string): Promise<void>;

    registerBuddyUserid(seq: number, userid: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    findGroupByTicket(ticketId: string): Promise<Group>;

    findGroupByTicket(ticketId: string, callback?: (error: ttypes.TalkException, response: Group)=>void): void;

    registerDeviceWithIdentityCredential(sessionId: string, identifier: string, verifier: string, provider: IdentityProvider, migrationPincodeSessionId: string): Promise<string>;

    registerDeviceWithIdentityCredential(sessionId: string, identifier: string, verifier: string, provider: IdentityProvider, migrationPincodeSessionId: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    invalidateUserTicket(): Promise<void>;

    invalidateUserTicket(callback?: (error: ttypes.TalkException, response: void)=>void): void;

    sendEvent(seq: number, message: Message): Promise<Message>;

    sendEvent(seq: number, message: Message, callback?: (error: ttypes.TalkException, response: Message)=>void): void;

    sendMessageToMyHome(seq: number, message: Message): Promise<Message>;

    sendMessageToMyHome(seq: number, message: Message, callback?: (error: ttypes.TalkException, response: Message)=>void): void;

    sendContentPreviewUpdated(esq: number, messageId: string, receiverMids: string[]): Promise<{ [k: string]: string; }>;

    sendContentPreviewUpdated(esq: number, messageId: string, receiverMids: string[], callback?: (error: ttypes.TalkException, response: { [k: string]: string; })=>void): void;

    loginWithVerifier(verifier: string): Promise<string>;

    loginWithVerifier(verifier: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    removeBuddySubscriptionAndNotifyBuddyUnregistered(subscriberMids: string[]): Promise<void>;

    removeBuddySubscriptionAndNotifyBuddyUnregistered(subscriberMids: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    unblockContact(reqSeq: number, id: string, reference: string): Promise<void>;

    unblockContact(reqSeq: number, id: string, reference: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    removeBuddyLocation(mid: string, index: number): Promise<void>;

    removeBuddyLocation(mid: string, index: number, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getRingbackTone(): Promise<RingbackTone>;

    getRingbackTone(callback?: (error: ttypes.TalkException, response: RingbackTone)=>void): void;

    getConfigurations(revision: Int64, regionOfUsim: string, regionOfTelephone: string, regionOfLocale: string, carrier: string): Promise<Configurations>;

    getConfigurations(revision: Int64, regionOfUsim: string, regionOfTelephone: string, regionOfLocale: string, carrier: string, callback?: (error: ttypes.TalkException, response: Configurations)=>void): void;

    getProximityMatchCandidateList(sessionId: string): Promise<ProximityMatchCandidateResult>;

    getProximityMatchCandidateList(sessionId: string, callback?: (error: ttypes.TalkException, response: ProximityMatchCandidateResult)=>void): void;

    requestAccountPasswordReset(identifier: string, provider: IdentityProvider, locale: string): Promise<void>;

    requestAccountPasswordReset(identifier: string, provider: IdentityProvider, locale: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getNextMessages(messageBoxId: string, startSeq: Int64, messagesCount: number): Promise<Message[]>;

    getNextMessages(messageBoxId: string, startSeq: Int64, messagesCount: number, callback?: (error: ttypes.TalkException, response: Message[])=>void): void;

    reportProfile(syncOpRevision: Int64, profile: Profile): Promise<void>;

    reportProfile(syncOpRevision: Int64, profile: Profile, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getCompactRoom(roomId: string): Promise<Room>;

    getCompactRoom(roomId: string, callback?: (error: ttypes.TalkException, response: Room)=>void): void;

    getLastOpRevision(): Promise<Int64>;

    getLastOpRevision(callback?: (error: ttypes.TalkException, response: Int64)=>void): void;

    getPreviousMessagesV2(messageBoxId: string, endMessageId: MessageBoxV2MessageId, messagesCount: number): Promise<Message[]>;

    getPreviousMessagesV2(messageBoxId: string, endMessageId: MessageBoxV2MessageId, messagesCount: number, callback?: (error: ttypes.TalkException, response: Message[])=>void): void;

    fetchAnnouncements(lastFetchedIndex: number): Promise<Announcement[]>;

    fetchAnnouncements(lastFetchedIndex: number, callback?: (error: ttypes.TalkException, response: Announcement[])=>void): void;

    acquireCallRoute(to: string): Promise<string[]>;

    acquireCallRoute(to: string, callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    updateSettingsAttribute(reqSeq: number, attr: SettingsAttribute, value: string): Promise<void>;

    updateSettingsAttribute(reqSeq: number, attr: SettingsAttribute, value: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    createGroupV2(seq: number, name: string, contactIds: string[]): Promise<Group>;

    createGroupV2(seq: number, name: string, contactIds: string[], callback?: (error: ttypes.TalkException, response: Group)=>void): void;

    isIdentityIdentifierAvailable(identifier: string, provider: IdentityProvider): Promise<boolean>;

    isIdentityIdentifierAvailable(identifier: string, provider: IdentityProvider, callback?: (error: ttypes.TalkException, response: boolean)=>void): void;

    blockContact(reqSeq: number, id: string): Promise<void>;

    blockContact(reqSeq: number, id: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    commitUpdateProfile(seq: number, attrs: ProfileAttribute[], receiverMids: string[]): Promise<{ [k: string]: string; }>;

    commitUpdateProfile(seq: number, attrs: ProfileAttribute[], receiverMids: string[], callback?: (error: ttypes.TalkException, response: { [k: string]: string; })=>void): void;

    registerWithSnsId(snsIdType: SnsIdType, snsAccessToken: string, region: string, udidHash: string, deviceInfo: DeviceInfo, mid: string, migrationPincodeSessionId: string): Promise<RegisterWithSnsIdResult>;

    registerWithSnsId(snsIdType: SnsIdType, snsAccessToken: string, region: string, udidHash: string, deviceInfo: DeviceInfo, mid: string, migrationPincodeSessionId: string, callback?: (error: ttypes.TalkException, response: RegisterWithSnsIdResult)=>void): void;

    updatePublicKeychain(publicKeychain: PublicKeychain): Promise<PublicKeychain>;

    updatePublicKeychain(publicKeychain: PublicKeychain, callback?: (error: ttypes.TalkException, response: PublicKeychain)=>void): void;

    loginWithVerifierForCerificate(verifier: string): Promise<LoginResult>;

    loginWithVerifierForCerificate(verifier: string, callback?: (error: ttypes.TalkException, response: LoginResult)=>void): void;

    tryFriendRequest(midOrEMid: string, method: FriendRequestMethod, friendRequestParams: string): Promise<void>;

    tryFriendRequest(midOrEMid: string, method: FriendRequestMethod, friendRequestParams: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getBlockedRecommendationIds(): Promise<string[]>;

    getBlockedRecommendationIds(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    getGroupIdsInvited(): Promise<string[]>;

    getGroupIdsInvited(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    getSuggestIncrements(revisions: SuggestDictionaryRevisions): Promise<SuggestDictionaryIncrements>;

    getSuggestIncrements(revisions: SuggestDictionaryRevisions, callback?: (error: ttypes.TalkException, response: SuggestDictionaryIncrements)=>void): void;

    resendPinCodeBySMS(sessionId: string): Promise<void>;

    resendPinCodeBySMS(sessionId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    registerWithPhoneNumber(sessionId: string, migrationPincodeSessionId: string): Promise<RegisterWithPhoneNumberResult>;

    registerWithPhoneNumber(sessionId: string, migrationPincodeSessionId: string, callback?: (error: ttypes.TalkException, response: RegisterWithPhoneNumberResult)=>void): void;

    getActiveBuddySubscriberIds(): Promise<string[]>;

    getActiveBuddySubscriberIds(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    createRoom(reqSeq: number, contactIds: string[]): Promise<Room>;

    createRoom(reqSeq: number, contactIds: string[], callback?: (error: ttypes.TalkException, response: Room)=>void): void;

    verifyPhoneNumberForLogin(verifierFromPhone: string, pinCodeForPhone: string, verifierFromLogin: string): Promise<string>;

    verifyPhoneNumberForLogin(verifierFromPhone: string, pinCodeForPhone: string, verifierFromLogin: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    addSnsId(snsIdType: SnsIdType, snsAccessToken: string): Promise<string>;

    addSnsId(snsIdType: SnsIdType, snsAccessToken: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    finishUpdateVerification(sessionId: string): Promise<void>;

    finishUpdateVerification(sessionId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    validateContactsOnBot(contacts: string[]): Promise<{ [k: string]: string; }>;

    validateContactsOnBot(contacts: string[], callback?: (error: ttypes.TalkException, response: { [k: string]: string; })=>void): void;

    getRoom(roomId: string): Promise<Room>;

    getRoom(roomId: string, callback?: (error: ttypes.TalkException, response: Room)=>void): void;

    closeProximityMatch(sessionId: string): Promise<void>;

    closeProximityMatch(sessionId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getCompactGroup(groupId: string): Promise<Group>;

    getCompactGroup(groupId: string, callback?: (error: ttypes.TalkException, response: Group)=>void): void;

    getBlockedContactIdsByRange(start: number, count: number): Promise<string[]>;

    getBlockedContactIdsByRange(start: number, count: number, callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    getRecentMessagesV2(messageBoxId: string, messagesCount: number): Promise<Message[]>;

    getRecentMessagesV2(messageBoxId: string, messagesCount: number, callback?: (error: ttypes.TalkException, response: Message[])=>void): void;

    reissueUserTicket(expirationTime: Int64, maxUseCount: number): Promise<string>;

    reissueUserTicket(expirationTime: Int64, maxUseCount: number, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getMessageReadRange(chatIds: string[]): Promise<TMessageReadRange[]>;

    getMessageReadRange(chatIds: string[], callback?: (error: ttypes.TalkException, response: TMessageReadRange[])=>void): void;

    clearRingbackTone(): Promise<void>;

    clearRingbackTone(callback?: (error: ttypes.TalkException, response: void)=>void): void;

    setIdentityCredential(identifier: string, verifier: string, provider: IdentityProvider): Promise<void>;

    setIdentityCredential(identifier: string, verifier: string, provider: IdentityProvider, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getMessageBoxCompactWrapUpV2(messageBoxId: string): Promise<TMessageBoxWrapUp>;

    getMessageBoxCompactWrapUpV2(messageBoxId: string, callback?: (error: ttypes.TalkException, response: TMessageBoxWrapUp)=>void): void;

    getServerTime(): Promise<Int64>;

    getServerTime(callback?: (error: ttypes.TalkException, response: Int64)=>void): void;

    trySendMessage(seq: number, message: Message): Promise<Message>;

    trySendMessage(seq: number, message: Message, callback?: (error: ttypes.TalkException, response: Message)=>void): void;

    getNextMessagesV2(messageBoxId: string, startMessageId: MessageBoxV2MessageId, messagesCount: number): Promise<Message[]>;

    getNextMessagesV2(messageBoxId: string, startMessageId: MessageBoxV2MessageId, messagesCount: number, callback?: (error: ttypes.TalkException, response: Message[])=>void): void;

    notifySleep(lastRev: Int64, badge: number): Promise<void>;

    notifySleep(lastRev: Int64, badge: number, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getBuddyBlockerIds(): Promise<string[]>;

    getBuddyBlockerIds(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    removeE2EEPublicKey(publicKey: E2EEPublicKey): Promise<void>;

    removeE2EEPublicKey(publicKey: E2EEPublicKey, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    reissueTrackingTicket(type: TrackingType): Promise<string>;

    reissueTrackingTicket(type: TrackingType, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    cancelGroupInvitation(reqSeq: number, groupId: string, contactIds: string[]): Promise<void>;

    cancelGroupInvitation(reqSeq: number, groupId: string, contactIds: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    removeMessage(messageId: string): Promise<boolean>;

    removeMessage(messageId: string, callback?: (error: ttypes.TalkException, response: boolean)=>void): void;

    getAllReadMessageOps(): Promise<Operation[]>;

    getAllReadMessageOps(callback?: (error: ttypes.TalkException, response: Operation[])=>void): void;

    unregisterUserAndDevice(): Promise<string>;

    unregisterUserAndDevice(callback?: (error: ttypes.TalkException, response: string)=>void): void;

    acceptGroupInvitation(reqSeq: number, groupId: string): Promise<void>;

    acceptGroupInvitation(reqSeq: number, groupId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getCompactContactsModifiedSince(timestamp: Int64): Promise<CompactContact[]>;

    getCompactContactsModifiedSince(timestamp: Int64, callback?: (error: ttypes.TalkException, response: CompactContact[])=>void): void;

    releaseSession(): Promise<void>;

    releaseSession(callback?: (error: ttypes.TalkException, response: void)=>void): void;

    findContactsByPhone(phones: string[]): Promise<{ [k: string]: Contact; }>;

    findContactsByPhone(phones: string[], callback?: (error: ttypes.TalkException, response: { [k: string]: Contact; })=>void): void;

    getHiddenContactMids(): Promise<string[]>;

    getHiddenContactMids(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    getEncryptedIdentity(): Promise<string>;

    getEncryptedIdentity(callback?: (error: ttypes.TalkException, response: string)=>void): void;

    updateProfile(reqSeq: number, profile: Profile): Promise<void>;

    updateProfile(reqSeq: number, profile: Profile, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    reportSpam(chatMid: string, memberMids: string[], spammerReasons: SpammerReason[], senderMids: string[], spamMessageIds: string[], spamMessages: string[]): Promise<void>;

    reportSpam(chatMid: string, memberMids: string[], spammerReasons: SpammerReason[], senderMids: string[], spamMessageIds: string[], spamMessages: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getSuggestRevisions(): Promise<SuggestDictionaryRevisions>;

    getSuggestRevisions(callback?: (error: ttypes.TalkException, response: SuggestDictionaryRevisions)=>void): void;

    getPreviousMessagesV2WithReadCount(messageBoxId: string, endMessageId: MessageBoxV2MessageId, messagesCount: number): Promise<Message[]>;

    getPreviousMessagesV2WithReadCount(messageBoxId: string, endMessageId: MessageBoxV2MessageId, messagesCount: number, callback?: (error: ttypes.TalkException, response: Message[])=>void): void;

    fetchOperations(localRev: Int64, count: number): Promise<Operation[]>;

    fetchOperations(localRev: Int64, count: number, callback?: (error: ttypes.ShouldSyncException, response: Operation[])=>void): void;

    registerWapDevice(invitationHash: string, guidHash: string, email: string, deviceInfo: DeviceInfo): Promise<string>;

    registerWapDevice(invitationHash: string, guidHash: string, email: string, deviceInfo: DeviceInfo, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getRecentFriendRequests(): Promise<FriendRequestsInfo>;

    getRecentFriendRequests(callback?: (error: ttypes.TalkException, response: FriendRequestsInfo)=>void): void;

    notifyBuddyOnAir(seq: number, receiverMids: string[]): Promise<{ [k: string]: string; }>;

    notifyBuddyOnAir(seq: number, receiverMids: string[], callback?: (error: ttypes.TalkException, response: { [k: string]: string; })=>void): void;

    getLastAnnouncementIndex(): Promise<number>;

    getLastAnnouncementIndex(callback?: (error: ttypes.TalkException, response: number)=>void): void;

    sendMessageAwaitCommit(seq: number, message: Message): Promise<CommitMessageResult>;

    sendMessageAwaitCommit(seq: number, message: Message, callback?: (error: ttypes.TalkException, response: CommitMessageResult)=>void): void;

    negotiateE2EEPublicKey(mid: string): Promise<E2EENegotiationResult>;

    negotiateE2EEPublicKey(mid: string, callback?: (error: ttypes.TalkException, response: E2EENegotiationResult)=>void): void;

    registerE2EEGroupKey(version: number, chatMid: string, members: string[], keyIds: number[], encryptedSharedKeys: string[]): Promise<E2EEGroupSharedKey>;

    registerE2EEGroupKey(version: number, chatMid: string, members: string[], keyIds: number[], encryptedSharedKeys: string[], callback?: (error: ttypes.TalkException, response: E2EEGroupSharedKey)=>void): void;

    findSnsIdUserStatus(snsIdType: SnsIdType, snsAccessToken: string, udidHash: string, migrationPincodeSessionId: string, oldUdidHash: string): Promise<SnsIdUserStatus>;

    findSnsIdUserStatus(snsIdType: SnsIdType, snsAccessToken: string, udidHash: string, migrationPincodeSessionId: string, oldUdidHash: string, callback?: (error: ttypes.TalkException, response: SnsIdUserStatus)=>void): void;

    notifyUpdated(lastRev: Int64, deviceInfo: DeviceInfo, udidHash: string, oldUdidHash: string): Promise<void>;

    notifyUpdated(lastRev: Int64, deviceInfo: DeviceInfo, udidHash: string, oldUdidHash: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    reportGroups(syncOpRevision: Int64, groups: Group[]): Promise<void>;

    reportGroups(syncOpRevision: Int64, groups: Group[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getNotificationPolicy(carrier: CarrierCode): Promise<NotificationType[]>;

    getNotificationPolicy(carrier: CarrierCode, callback?: (error: ttypes.TalkException, response: NotificationType[])=>void): void;

    findAndAddContactsByUserid(reqSeq: number, userid: string): Promise<{ [k: string]: Contact; }>;

    findAndAddContactsByUserid(reqSeq: number, userid: string, callback?: (error: ttypes.TalkException, response: { [k: string]: Contact; })=>void): void;

    getLastE2EEGroupSharedKey(version: number, chatMid: string): Promise<E2EEGroupSharedKey>;

    getLastE2EEGroupSharedKey(version: number, chatMid: string, callback?: (error: ttypes.TalkException, response: E2EEGroupSharedKey)=>void): void;

    notifyUpdatePublicKeychain(mid: string): Promise<void>;

    notifyUpdatePublicKeychain(mid: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    report(syncOpRevision: Int64, category: SyncCategory, report: string): Promise<void>;

    report(syncOpRevision: Int64, category: SyncCategory, report: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    acceptGroupInvitationByTicket(reqSeq: number, groupMid: string, ticketId: string): Promise<void>;

    acceptGroupInvitationByTicket(reqSeq: number, groupMid: string, ticketId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getContactRegistration(id: string, type: ContactType): Promise<ContactRegistration>;

    getContactRegistration(id: string, type: ContactType, callback?: (error: ttypes.TalkException, response: ContactRegistration)=>void): void;

    updateContactSetting(reqSeq: number, mid: string, flag: ContactSetting, value: string): Promise<void>;

    updateContactSetting(reqSeq: number, mid: string, flag: ContactSetting, value: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getContactWithFriendRequestStatus(id: string): Promise<Contact>;

    getContactWithFriendRequestStatus(id: string, callback?: (error: ttypes.TalkException, response: Contact)=>void): void;

    getMessageBoxListByStatus(channelId: string, lastMessagesCount: number, status: number): Promise<TMessageBox[]>;

    getMessageBoxListByStatus(channelId: string, lastMessagesCount: number, status: number, callback?: (error: ttypes.TalkException, response: TMessageBox[])=>void): void;

    openProximityMatch(location: Location): Promise<string>;

    openProximityMatch(location: Location, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    logout(): Promise<void>;

    logout(callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getE2EEPublicKey(mid: string, version: number, keyId: number): Promise<E2EEPublicKey>;

    getE2EEPublicKey(mid: string, version: number, keyId: number, callback?: (error: ttypes.TalkException, response: E2EEPublicKey)=>void): void;

    registerUserid(reqSeq: number, userid: string): Promise<boolean>;

    registerUserid(reqSeq: number, userid: string, callback?: (error: ttypes.TalkException, response: boolean)=>void): void;

    reportContacts(syncOpRevision: Int64, category: SyncCategory, contactReports: ContactReport[], actionType: SyncActionType): Promise<ContactReportResult[]>;

    reportContacts(syncOpRevision: Int64, category: SyncCategory, contactReports: ContactReport[], actionType: SyncActionType, callback?: (error: ttypes.TalkException, response: ContactReportResult[])=>void): void;

    getPublicKeychain(mid: string): Promise<PublicKeychain>;

    getPublicKeychain(mid: string, callback?: (error: ttypes.TalkException, response: PublicKeychain)=>void): void;

    sendContentReceipt(seq: number, consumer: string, messageId: string): Promise<void>;

    sendContentReceipt(seq: number, consumer: string, messageId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    respondResendMessage(reqSeq: number, receiverMid: string, originalMessageId: string, resendMessage: Message, errorCode: ErrorCode): Promise<void>;

    respondResendMessage(reqSeq: number, receiverMid: string, originalMessageId: string, resendMessage: Message, errorCode: ErrorCode, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getAllRoomIds(): Promise<string[]>;

    getAllRoomIds(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    requestE2EEKeyExchange(reqSeq: number, temporalPublicKey: string, publicKey: E2EEPublicKey, verifier: string): Promise<void>;

    requestE2EEKeyExchange(reqSeq: number, temporalPublicKey: string, publicKey: E2EEPublicKey, verifier: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    disableNearby(): Promise<void>;

    disableNearby(callback?: (error: ttypes.TalkException, response: void)=>void): void;

    createQrcodeBase64Image(url: string, characterSet: string, imageSize: number, x: number, y: number, width: number, height: number): Promise<string>;

    createQrcodeBase64Image(url: string, characterSet: string, imageSize: number, x: number, y: number, width: number, height: number, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getMessageBoxList(channelId: string, lastMessagesCount: number): Promise<TMessageBox[]>;

    getMessageBoxList(channelId: string, lastMessagesCount: number, callback?: (error: ttypes.TalkException, response: TMessageBox[])=>void): void;

    respondE2EEKeyExchange(reqSeq: number, encryptedKeyChain: string, hashKeyChain: string): Promise<void>;

    respondE2EEKeyExchange(reqSeq: number, encryptedKeyChain: string, hashKeyChain: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    verifyQrcode(verifier: string, pinCode: string): Promise<string>;

    verifyQrcode(verifier: string, pinCode: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    updateNotificationTokenWithBytes(token: string, type: NotificationType): Promise<void>;

    updateNotificationTokenWithBytes(token: string, type: NotificationType, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getPreviousMessages(messageBoxId: string, endSeq: Int64, messagesCount: number): Promise<Message[]>;

    getPreviousMessages(messageBoxId: string, endSeq: Int64, messagesCount: number, callback?: (error: ttypes.TalkException, response: Message[])=>void): void;

    getSettings(): Promise<Settings>;

    getSettings(callback?: (error: ttypes.TalkException, response: Settings)=>void): void;

    getLastE2EEPublicKeys(chatMid: string): Promise<{ [k: string]: E2EEPublicKey; }>;

    getLastE2EEPublicKeys(chatMid: string, callback?: (error: ttypes.TalkException, response: { [k: string]: E2EEPublicKey; })=>void): void;

    registerE2EEPublicKey(reqSeq: number, publicKey: E2EEPublicKey): Promise<E2EEPublicKey>;

    registerE2EEPublicKey(reqSeq: number, publicKey: E2EEPublicKey, callback?: (error: ttypes.TalkException, response: E2EEPublicKey)=>void): void;

    acquireCallTicket(to: string): Promise<string>;

    acquireCallTicket(to: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    inviteIntoGroup(reqSeq: number, groupId: string, contactIds: string[]): Promise<void>;

    inviteIntoGroup(reqSeq: number, groupId: string, contactIds: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    makeUserAddMyselfAsContact(contactOwnerMid: string): Promise<ContactTransition>;

    makeUserAddMyselfAsContact(contactOwnerMid: string, callback?: (error: ttypes.TalkException, response: ContactTransition)=>void): void;

    removeMessageFromMyHome(messageId: string): Promise<boolean>;

    removeMessageFromMyHome(messageId: string, callback?: (error: ttypes.TalkException, response: boolean)=>void): void;

    commitSendMessages(seq: number, messageIds: string[], receiverMids: string[], onlyToFollowers: boolean): Promise<{ [k: string]: string; }>;

    commitSendMessages(seq: number, messageIds: string[], receiverMids: string[], onlyToFollowers: boolean, callback?: (error: ttypes.TalkException, response: { [k: string]: string; })=>void): void;

    registerWithPhoneNumberAndPassword(sessionId: string, keynm: string, encrypted: string): Promise<RegisterWithPhoneNumberResult>;

    registerWithPhoneNumberAndPassword(sessionId: string, keynm: string, encrypted: string, callback?: (error: ttypes.TalkException, response: RegisterWithPhoneNumberResult)=>void): void;

    leaveGroup(reqSeq: number, groupId: string): Promise<void>;

    leaveGroup(reqSeq: number, groupId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getAnalyticsInfo(): Promise<AnalyticsInfo>;

    getAnalyticsInfo(callback?: (error: ttypes.TalkException, response: AnalyticsInfo)=>void): void;

    reportClientStatistics(reqSeq: number, category: ReportCategory, count: number): Promise<void>;

    reportClientStatistics(reqSeq: number, category: ReportCategory, count: number, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    acceptProximityMatches(sessionId: string, ids: string[]): Promise<void>;

    acceptProximityMatches(sessionId: string, ids: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getGroup(groupId: string): Promise<Group>;

    getGroup(groupId: string, callback?: (error: ttypes.TalkException, response: Group)=>void): void;

    clearIdentityCredential(): Promise<void>;

    clearIdentityCredential(callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getUpdatedMessageBoxIds(startMessageId: MessageBoxV2MessageId, startMessageBoxId: string, messageBoxCount: number): Promise<string[]>;

    getUpdatedMessageBoxIds(startMessageId: MessageBoxV2MessageId, startMessageBoxId: string, messageBoxCount: number, callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    getGroups(groupIds: string[]): Promise<Group[]>;

    getGroups(groupIds: string[], callback?: (error: ttypes.TalkException, response: Group[])=>void): void;

    sendMessageReceipt(seq: number, consumer: string, messageIds: string[]): Promise<void>;

    sendMessageReceipt(seq: number, consumer: string, messageIds: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    findContactByMetaTag(userid: string, reference: string): Promise<Contact>;

    findContactByMetaTag(userid: string, reference: string, callback?: (error: ttypes.TalkException, response: Contact)=>void): void;

    destroyMessage(seq: number, chatId: string, messageId: string, sessionId: any): Promise<void>;

    destroyMessage(seq: number, chatId: string, messageId: string, sessionId: any, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    generateUserTicket(expirationTime: Int64, maxUseCount: number): Promise<Ticket>;

    generateUserTicket(expirationTime: Int64, maxUseCount: number, callback?: (error: ttypes.TalkException, response: Ticket)=>void): void;

    registerDeviceWithoutPhoneNumberWithIdentityCredential(region: string, udidHash: string, deviceInfo: DeviceInfo, provider: IdentityProvider, identifier: string, verifier: string, mid: string, migrationPincodeSessionId: string): Promise<string>;

    registerDeviceWithoutPhoneNumberWithIdentityCredential(region: string, udidHash: string, deviceInfo: DeviceInfo, provider: IdentityProvider, identifier: string, verifier: string, mid: string, migrationPincodeSessionId: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getFavoriteMids(): Promise<string[]>;

    getFavoriteMids(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    getAcceptedProximityMatches(sessionId: string): Promise<string[]>;

    getAcceptedProximityMatches(sessionId: string, callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    notifyInstalled(udidHash: string, applicationTypeWithExtensions: string): Promise<void>;

    notifyInstalled(udidHash: string, applicationTypeWithExtensions: string, callback?: (error: void, response: void)=>void): void;

    getCountryWithRequestIp(): Promise<string>;

    getCountryWithRequestIp(callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getGroupsV2(groupIds: string[]): Promise<Group[]>;

    getGroupsV2(groupIds: string[], callback?: (error: ttypes.TalkException, response: Group[])=>void): void;

    loginWithIdentityCredential(identifier: string, password: string, keepLoggedIn: boolean, accessLocation: string, systemName: string, identityProvider: IdentityProvider, certificate: string): Promise<string>;

    loginWithIdentityCredential(identifier: string, password: string, keepLoggedIn: boolean, accessLocation: string, systemName: string, identityProvider: IdentityProvider, certificate: string, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    startUpdateVerification(region: string, carrier: CarrierCode, phone: string, udidHash: string, deviceInfo: DeviceInfo, networkCode: string, locale: string, simInfo: SIMInfo): Promise<VerificationSessionData>;

    startUpdateVerification(region: string, carrier: CarrierCode, phone: string, udidHash: string, deviceInfo: DeviceInfo, networkCode: string, locale: string, simInfo: SIMInfo, callback?: (error: ttypes.TalkException, response: VerificationSessionData)=>void): void;

    getSessions(): Promise<LoginSession[]>;

    getSessions(callback?: (error: ttypes.TalkException, response: LoginSession[])=>void): void;

    updateSettings(reqSeq: number, settings: Settings): Promise<void>;

    updateSettings(reqSeq: number, settings: Settings, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getContact(id: string): Promise<Contact>;

    getContact(id: string, callback?: (error: ttypes.TalkException, response: Contact)=>void): void;

    getBlockedContactIds(): Promise<string[]>;

    getBlockedContactIds(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    loginWithVerifierForCertificate(verifier: string): Promise<LoginResult>;

    loginWithVerifierForCertificate(verifier: string, callback?: (error: ttypes.TalkException, response: LoginResult)=>void): void;

    getProfile(): Promise<Profile>;

    getProfile(callback?: (error: ttypes.TalkException, response: Profile)=>void): void;

    findContactsByEmail(emails: string[]): Promise<{ [k: string]: Contact; }>;

    findContactsByEmail(emails: string[], callback?: (error: ttypes.TalkException, response: { [k: string]: Contact; })=>void): void;

    getSystemConfiguration(): Promise<SystemConfiguration>;

    getSystemConfiguration(callback?: (error: ttypes.TalkException, response: SystemConfiguration)=>void): void;

    getRecentMessages(messageBoxId: string, messagesCount: number): Promise<Message[]>;

    getRecentMessages(messageBoxId: string, messagesCount: number, callback?: (error: ttypes.TalkException, response: Message[])=>void): void;

    verifyPhone(sessionId: string, pinCode: string, udidHash: string): Promise<VerificationResult>;

    verifyPhone(sessionId: string, pinCode: string, udidHash: string, callback?: (error: ttypes.TalkException, response: VerificationResult)=>void): void;

    createGroup(seq: number, name: string, contactIds: string[]): Promise<Group>;

    createGroup(seq: number, name: string, contactIds: string[], callback?: (error: ttypes.TalkException, response: Group)=>void): void;

    updateBuddySetting(key: string, value: string): Promise<void>;

    updateBuddySetting(key: string, value: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    updateRegion(region: string): Promise<void>;

    updateRegion(region: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    verifyIdentityCredential(identifier: string, password: string, identityProvider: IdentityProvider): Promise<void>;

    verifyIdentityCredential(identifier: string, password: string, identityProvider: IdentityProvider, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    sendChatRemoved(seq: number, consumer: string, lastMessageId: string, sessionId: any): Promise<void>;

    sendChatRemoved(seq: number, consumer: string, lastMessageId: string, sessionId: any, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getGroupIdsJoined(): Promise<string[]>;

    getGroupIdsJoined(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    findContactByUserid(userid: string): Promise<Contact>;

    findContactByUserid(userid: string, callback?: (error: ttypes.TalkException, response: Contact)=>void): void;

    getE2EEPublicKeys(): Promise<E2EEPublicKey[]>;

    getE2EEPublicKeys(callback?: (error: ttypes.TalkException, response: E2EEPublicKey[])=>void): void;

    getMessageBoxWrapUpList(start: number, messageBoxCount: number): Promise<TMessageBoxWrapUpResponse>;

    getMessageBoxWrapUpList(start: number, messageBoxCount: number, callback?: (error: ttypes.TalkException, response: TMessageBoxWrapUpResponse)=>void): void;

    leaveRoom(reqSeq: number, roomId: string): Promise<void>;

    leaveRoom(reqSeq: number, roomId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    unblockRecommendation(reqSeq: number, id: string): Promise<void>;

    unblockRecommendation(reqSeq: number, id: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    findAndAddContactsByPhone(reqSeq: number, phones: string[]): Promise<{ [k: string]: Contact; }>;

    findAndAddContactsByPhone(reqSeq: number, phones: string[], callback?: (error: ttypes.TalkException, response: { [k: string]: Contact; })=>void): void;

    getAuthQrcode(keepLoggedIn: boolean, systemName: string, returnCallbackUrl: boolean): Promise<AuthQrcode>;

    getAuthQrcode(keepLoggedIn: boolean, systemName: string, returnCallbackUrl: boolean, callback?: (error: ttypes.TalkException, response: AuthQrcode)=>void): void;

    getE2EEGroupSharedKey(version: number, chatMid: string, groupKeyId: number): Promise<E2EEGroupSharedKey>;

    getE2EEGroupSharedKey(version: number, chatMid: string, groupKeyId: number, callback?: (error: ttypes.TalkException, response: E2EEGroupSharedKey)=>void): void;

    getMessageBoxWrapUp(mid: string): Promise<TMessageBoxWrapUp>;

    getMessageBoxWrapUp(mid: string, callback?: (error: ttypes.TalkException, response: TMessageBoxWrapUp)=>void): void;

    updateSettingsAttributes(reqSeq: number, attrBitset: number, settings: Settings): Promise<number>;

    updateSettingsAttributes(reqSeq: number, attrBitset: number, settings: Settings, callback?: (error: ttypes.TalkException, response: number)=>void): void;

    startVerification(region: string, carrier: CarrierCode, phone: string, udidHash: string, deviceInfo: DeviceInfo, networkCode: string, mid: string, locale: string, simInfo: SIMInfo, oldUdidHash: string): Promise<VerificationSessionData>;

    startVerification(region: string, carrier: CarrierCode, phone: string, udidHash: string, deviceInfo: DeviceInfo, networkCode: string, mid: string, locale: string, simInfo: SIMInfo, oldUdidHash: string, callback?: (error: ttypes.TalkException, response: VerificationSessionData)=>void): void;

    reportRooms(syncOpRevision: Int64, rooms: Room[]): Promise<void>;

    reportRooms(syncOpRevision: Int64, rooms: Room[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    updateGroupPreferenceAttribute(reqSeq: number, groupMid: string, updatedAttrs: { [k: number /*GroupPreferenceAttribute*/]: string; }): Promise<void>;

    updateGroupPreferenceAttribute(reqSeq: number, groupMid: string, updatedAttrs: { [k: number /*GroupPreferenceAttribute*/]: string; }, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getMessageBoxWrapUpV2(messageBoxId: string): Promise<TMessageBoxWrapUp>;

    getMessageBoxWrapUpV2(messageBoxId: string, callback?: (error: ttypes.TalkException, response: TMessageBoxWrapUp)=>void): void;

    getCompactRooms(roomIds: string[]): Promise<Room[]>;

    getCompactRooms(roomIds: string[], callback?: (error: ttypes.TalkException, response: Room[])=>void): void;

    findAndAddContactByMetaTag(reqSeq: number, userid: string, reference: string): Promise<Contact>;

    findAndAddContactByMetaTag(reqSeq: number, userid: string, reference: string, callback?: (error: ttypes.TalkException, response: Contact)=>void): void;

    storeUpdateProfileAttribute(seq: number, profileAttribute: ProfileAttribute, value: string): Promise<void>;

    storeUpdateProfileAttribute(seq: number, profileAttribute: ProfileAttribute, value: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    resendEmailConfirmation(verifier: string): Promise<EmailConfirmationSession>;

    resendEmailConfirmation(verifier: string, callback?: (error: ttypes.TalkException, response: EmailConfirmationSession)=>void): void;

    confirmEmail(verifier: string, pinCode: string): Promise<EmailConfirmationResult>;

    confirmEmail(verifier: string, pinCode: string, callback?: (error: ttypes.TalkException, response: EmailConfirmationResult)=>void): void;

    getExtendedProfile(): Promise<ExtendedProfile>;

    getExtendedProfile(callback?: (error: ttypes.TalkException, response: ExtendedProfile)=>void): void;

    isUseridAvailable(userid: string): Promise<boolean>;

    isUseridAvailable(userid: string, callback?: (error: ttypes.TalkException, response: boolean)=>void): void;

    notifyRegistrationComplete(udidHash: string, applicationTypeWithExtensions: string): Promise<void>;

    notifyRegistrationComplete(udidHash: string, applicationTypeWithExtensions: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    updateDeviceInfo(deviceUid: string, deviceInfo: DeviceInfo): Promise<void>;

    updateDeviceInfo(deviceUid: string, deviceInfo: DeviceInfo, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    blockRecommendation(reqSeq: number, id: string): Promise<void>;

    blockRecommendation(reqSeq: number, id: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    rejectGroupInvitation(reqSeq: number, groupId: string): Promise<void>;

    rejectGroupInvitation(reqSeq: number, groupId: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    updateCustomModeSettings(customMode: CustomMode, paramMap: { [k: string]: string; }): Promise<void>;

    updateCustomModeSettings(customMode: CustomMode, paramMap: { [k: string]: string; }, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    createRoomV2(reqSeq: number, contactIds: string[]): Promise<Room>;

    createRoomV2(reqSeq: number, contactIds: string[], callback?: (error: ttypes.TalkException, response: Room)=>void): void;

    noop(): Promise<void>;

    noop(callback?: (error: ttypes.TalkException, response: void)=>void): void;

    acquireEncryptedAccessToken(featureType: FeatureType): Promise<string>;

    acquireEncryptedAccessToken(featureType: FeatureType, callback?: (error: ttypes.TalkException, response: string)=>void): void;

    getE2EEPublicKeysEx(ignoreE2EEStatus: boolean): Promise<E2EEPublicKey[]>;

    getE2EEPublicKeysEx(ignoreE2EEStatus: boolean, callback?: (error: ttypes.TalkException, response: E2EEPublicKey[])=>void): void;

    syncContacts(reqSeq: number, localContacts: ContactModification[]): Promise<{ [k: string]: ContactRegistration; }>;

    syncContacts(reqSeq: number, localContacts: ContactModification[], callback?: (error: ttypes.TalkException, response: { [k: string]: ContactRegistration; })=>void): void;

    findAndAddContactsByMid(reqSeq: number, mid: string, type: ContactType, reference: string): Promise<{ [k: string]: Contact; }>;

    findAndAddContactsByMid(reqSeq: number, mid: string, type: ContactType, reference: string, callback?: (error: ttypes.TalkException, response: { [k: string]: Contact; })=>void): void;

    findGroupByTicketV2(ticketId: string): Promise<Group>;

    findGroupByTicketV2(ticketId: string, callback?: (error: ttypes.TalkException, response: Group)=>void): void;

    removeFriendRequest(direction: FriendRequestDirection, midOrEMid: string): Promise<void>;

    removeFriendRequest(direction: FriendRequestDirection, midOrEMid: string, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    verifyPhoneNumber(sessionId: string, pinCode: string, udidHash: string, migrationPincodeSessionId: string, oldUdidHash: string): Promise<PhoneVerificationResult>;

    verifyPhoneNumber(sessionId: string, pinCode: string, udidHash: string, migrationPincodeSessionId: string, oldUdidHash: string, callback?: (error: ttypes.TalkException, response: PhoneVerificationResult)=>void): void;

    setNotificationsEnabled(reqSeq: number, type: MIDType, target: string, enablement: boolean): Promise<void>;

    setNotificationsEnabled(reqSeq: number, type: MIDType, target: string, enablement: boolean, callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getAllContactIds(): Promise<string[]>;

    getAllContactIds(callback?: (error: ttypes.TalkException, response: string[])=>void): void;

    getIdentityIdentifier(): Promise<string>;

    getIdentityIdentifier(callback?: (error: ttypes.TalkException, response: string)=>void): void;

    sendDummyPush(): Promise<void>;

    sendDummyPush(callback?: (error: ttypes.TalkException, response: void)=>void): void;

    inviteFriendsBySms(phoneNumberList: string[]): Promise<void>;

    inviteFriendsBySms(phoneNumberList: string[], callback?: (error: ttypes.TalkException, response: void)=>void): void;

    getMessageBox(channelId: string, messageBoxId: string, lastMessagesCount: number): Promise<TMessageBox>;

    getMessageBox(channelId: string, messageBoxId: string, lastMessagesCount: number, callback?: (error: ttypes.TalkException, response: TMessageBox)=>void): void;
  }

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reportDeviceState(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifySleepV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateNotificationToken(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_verifyAccountMigrationPincode(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerWithExistingSnsIdAndIdentityCredential(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerDeviceWithoutPhoneNumber(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_changeVerificationMethod(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_setBuddyLocation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getFriendRequests(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_kickoutFromGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_verifyIdentityCredentialWithResult(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendEchoPush(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_createSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reissueDeviceCredential(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getRecommendationIds(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_inviteViaEmail(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getRoomsV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getReadMessageOps(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getSettingsAttributes(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_requestIdentityUnbind(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessagesBySequenceNumber(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_inviteIntoRoom(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendChatChecked(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_removeSnsId(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reportSpammer(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findAndAddContactsByEmail(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getCompactGroups(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendMessage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getRooms(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateC2DMRegistrationId(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendPostback(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getReadMessageOpsInBulk(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendMessageIgnored(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageBoxWrapUpListV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getOldReadMessageOpsWithRange(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getRSAKeyInfo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateProfileAttribute(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_createAccountMigrationPincodeSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifiedRedirect(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifyIndividualEvent(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateApnsDeviceToken(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageBoxCompactWrapUpListV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_requestEmailConfirmation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerWithSnsIdAndIdentityCredential(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageBoxCompactWrapUp(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findContactByUserTicket(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateAccountMigrationPincode(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerBuddyUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateSettings2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getUserTicket(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_fetchOps(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitSendMessagesToMid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageBoxV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_requestResendMessage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getGroupWithoutMembers(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_removeAllMessages(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_verifyAccountMigration(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reissueGroupTicket(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_logoutSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getBuddyLocation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getWapInvitation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerDevice(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_clearMessageBox(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_loginWithIdentityCredentialForCertificate(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getSuggestSettings(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateAndGetNearby(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_syncContactBySnsIds(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getContacts(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageBoxCompactWrapUpList(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getProximityMatchCandidates(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateExtendedProfileAttribute(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_resendPinCode(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reportSettings(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerBuddyUserid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findGroupByTicket(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerDeviceWithIdentityCredential(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_invalidateUserTicket(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendEvent(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendMessageToMyHome(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendContentPreviewUpdated(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_loginWithVerifier(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_removeBuddySubscriptionAndNotifyBuddyUnregistered(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_unblockContact(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_removeBuddyLocation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getRingbackTone(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getConfigurations(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getProximityMatchCandidateList(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_requestAccountPasswordReset(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getNextMessages(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reportProfile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getCompactRoom(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getLastOpRevision(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getPreviousMessagesV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_fetchAnnouncements(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_acquireCallRoute(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateSettingsAttribute(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_createGroupV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_isIdentityIdentifierAvailable(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_blockContact(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitUpdateProfile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerWithSnsId(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updatePublicKeychain(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_loginWithVerifierForCerificate(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_tryFriendRequest(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getBlockedRecommendationIds(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getGroupIdsInvited(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getSuggestIncrements(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_resendPinCodeBySMS(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerWithPhoneNumber(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getActiveBuddySubscriberIds(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_createRoom(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_verifyPhoneNumberForLogin(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_addSnsId(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_finishUpdateVerification(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_validateContactsOnBot(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getRoom(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_closeProximityMatch(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getCompactGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getBlockedContactIdsByRange(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getRecentMessagesV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reissueUserTicket(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageReadRange(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_clearRingbackTone(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_setIdentityCredential(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageBoxCompactWrapUpV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getServerTime(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_trySendMessage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getNextMessagesV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifySleep(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getBuddyBlockerIds(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_removeE2EEPublicKey(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reissueTrackingTicket(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_cancelGroupInvitation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_removeMessage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getAllReadMessageOps(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_unregisterUserAndDevice(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_acceptGroupInvitation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getCompactContactsModifiedSince(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_releaseSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findContactsByPhone(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getHiddenContactMids(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getEncryptedIdentity(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateProfile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reportSpam(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getSuggestRevisions(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getPreviousMessagesV2WithReadCount(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_fetchOperations(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerWapDevice(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getRecentFriendRequests(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifyBuddyOnAir(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getLastAnnouncementIndex(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendMessageAwaitCommit(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_negotiateE2EEPublicKey(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerE2EEGroupKey(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findSnsIdUserStatus(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifyUpdated(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reportGroups(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getNotificationPolicy(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findAndAddContactsByUserid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getLastE2EEGroupSharedKey(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifyUpdatePublicKeychain(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_report(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_acceptGroupInvitationByTicket(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getContactRegistration(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateContactSetting(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getContactWithFriendRequestStatus(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageBoxListByStatus(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_openProximityMatch(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_logout(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getE2EEPublicKey(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerUserid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reportContacts(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getPublicKeychain(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendContentReceipt(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_respondResendMessage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getAllRoomIds(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_requestE2EEKeyExchange(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_disableNearby(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_createQrcodeBase64Image(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageBoxList(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_respondE2EEKeyExchange(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_verifyQrcode(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateNotificationTokenWithBytes(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getPreviousMessages(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getSettings(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getLastE2EEPublicKeys(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerE2EEPublicKey(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_acquireCallTicket(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_inviteIntoGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_makeUserAddMyselfAsContact(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_removeMessageFromMyHome(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_commitSendMessages(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerWithPhoneNumberAndPassword(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_leaveGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getAnalyticsInfo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reportClientStatistics(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_acceptProximityMatches(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_clearIdentityCredential(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getUpdatedMessageBoxIds(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getGroups(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendMessageReceipt(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findContactByMetaTag(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_destroyMessage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_generateUserTicket(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_registerDeviceWithoutPhoneNumberWithIdentityCredential(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getFavoriteMids(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getAcceptedProximityMatches(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifyInstalled(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getCountryWithRequestIp(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getGroupsV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_loginWithIdentityCredential(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_startUpdateVerification(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getSessions(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateSettings(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getContact(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getBlockedContactIds(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_loginWithVerifierForCertificate(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getProfile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findContactsByEmail(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getSystemConfiguration(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getRecentMessages(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_verifyPhone(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_createGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateBuddySetting(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateRegion(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_verifyIdentityCredential(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendChatRemoved(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getGroupIdsJoined(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findContactByUserid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getE2EEPublicKeys(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageBoxWrapUpList(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_leaveRoom(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_unblockRecommendation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findAndAddContactsByPhone(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getAuthQrcode(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getE2EEGroupSharedKey(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageBoxWrapUp(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateSettingsAttributes(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_startVerification(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_reportRooms(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateGroupPreferenceAttribute(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageBoxWrapUpV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getCompactRooms(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findAndAddContactByMetaTag(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_storeUpdateProfileAttribute(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_resendEmailConfirmation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_confirmEmail(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getExtendedProfile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_isUseridAvailable(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_notifyRegistrationComplete(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateDeviceInfo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_blockRecommendation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_rejectGroupInvitation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_updateCustomModeSettings(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_createRoomV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_noop(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_acquireEncryptedAccessToken(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getE2EEPublicKeysEx(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_syncContacts(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findAndAddContactsByMid(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_findGroupByTicketV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_removeFriendRequest(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_verifyPhoneNumber(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_setNotificationsEnabled(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getAllContactIds(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getIdentityIdentifier(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_sendDummyPush(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_inviteFriendsBySms(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_getMessageBox(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
