//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = require('./talk_types');
//HELPER FUNCTIONS AND STRUCTURES

const AgeCheckService_checkUserAge_args = class {
  constructor(args) {
    this.carrier = null;
    this.sessionId = null;
    this.verifier = null;
    this.standardAge = null;
    if (args) {
      if (args.carrier !== undefined && args.carrier !== null) {
        this.carrier = args.carrier;
      }
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = args.sessionId;
      }
      if (args.verifier !== undefined && args.verifier !== null) {
        this.verifier = args.verifier;
      }
      if (args.standardAge !== undefined && args.standardAge !== null) {
        this.standardAge = args.standardAge;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.carrier = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.sessionId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.verifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.standardAge = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AgeCheckService_checkUserAge_args');
    if (this.carrier !== null && this.carrier !== undefined) {
      output.writeFieldBegin('carrier', Thrift.Type.I32, 2);
      output.writeI32(this.carrier);
      output.writeFieldEnd();
    }
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRING, 3);
      output.writeString(this.sessionId);
      output.writeFieldEnd();
    }
    if (this.verifier !== null && this.verifier !== undefined) {
      output.writeFieldBegin('verifier', Thrift.Type.STRING, 4);
      output.writeString(this.verifier);
      output.writeFieldEnd();
    }
    if (this.standardAge !== null && this.standardAge !== undefined) {
      output.writeFieldBegin('standardAge', Thrift.Type.I32, 5);
      output.writeI32(this.standardAge);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AgeCheckService_checkUserAge_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AgeCheckService_checkUserAge_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I32, 0);
      output.writeI32(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AgeCheckService_checkUserAgeWithDocomo_args = class {
  constructor(args) {
    this.openIdRedirectUrl = null;
    this.standardAge = null;
    this.verifier = null;
    if (args) {
      if (args.openIdRedirectUrl !== undefined && args.openIdRedirectUrl !== null) {
        this.openIdRedirectUrl = args.openIdRedirectUrl;
      }
      if (args.standardAge !== undefined && args.standardAge !== null) {
        this.standardAge = args.standardAge;
      }
      if (args.verifier !== undefined && args.verifier !== null) {
        this.verifier = args.verifier;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.openIdRedirectUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.standardAge = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.verifier = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AgeCheckService_checkUserAgeWithDocomo_args');
    if (this.openIdRedirectUrl !== null && this.openIdRedirectUrl !== undefined) {
      output.writeFieldBegin('openIdRedirectUrl', Thrift.Type.STRING, 2);
      output.writeString(this.openIdRedirectUrl);
      output.writeFieldEnd();
    }
    if (this.standardAge !== null && this.standardAge !== undefined) {
      output.writeFieldBegin('standardAge', Thrift.Type.I32, 3);
      output.writeI32(this.standardAge);
      output.writeFieldEnd();
    }
    if (this.verifier !== null && this.verifier !== undefined) {
      output.writeFieldBegin('verifier', Thrift.Type.STRING, 4);
      output.writeString(this.verifier);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AgeCheckService_checkUserAgeWithDocomo_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.AgeCheckDocomoResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.AgeCheckDocomoResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AgeCheckService_checkUserAgeWithDocomo_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AgeCheckService_retrieveRequestToken_args = class {
  constructor(args) {
    this.carrier = null;
    if (args) {
      if (args.carrier !== undefined && args.carrier !== null) {
        this.carrier = args.carrier;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.carrier = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AgeCheckService_retrieveRequestToken_args');
    if (this.carrier !== null && this.carrier !== undefined) {
      output.writeFieldBegin('carrier', Thrift.Type.I32, 2);
      output.writeI32(this.carrier);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AgeCheckService_retrieveRequestToken_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.AgeCheckRequestResult(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.AgeCheckRequestResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AgeCheckService_retrieveRequestToken_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AgeCheckServiceClient = exports.Client = class {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  checkUserAge (carrier, sessionId, verifier, standardAge) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_checkUserAge(carrier, sessionId, verifier, standardAge);
    });
  }

  send_checkUserAge (carrier, sessionId, verifier, standardAge) {
    const output = new this.pClass(this.output);
    const params = {
      carrier: carrier,
      sessionId: sessionId,
      verifier: verifier,
      standardAge: standardAge
    };
    const args = new AgeCheckService_checkUserAge_args(params);
    try {
      output.writeMessageBegin('checkUserAge', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_checkUserAge (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AgeCheckService_checkUserAge_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('checkUserAge failed: unknown result');
  }

  checkUserAgeWithDocomo (openIdRedirectUrl, standardAge, verifier) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_checkUserAgeWithDocomo(openIdRedirectUrl, standardAge, verifier);
    });
  }

  send_checkUserAgeWithDocomo (openIdRedirectUrl, standardAge, verifier) {
    const output = new this.pClass(this.output);
    const params = {
      openIdRedirectUrl: openIdRedirectUrl,
      standardAge: standardAge,
      verifier: verifier
    };
    const args = new AgeCheckService_checkUserAgeWithDocomo_args(params);
    try {
      output.writeMessageBegin('checkUserAgeWithDocomo', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_checkUserAgeWithDocomo (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AgeCheckService_checkUserAgeWithDocomo_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('checkUserAgeWithDocomo failed: unknown result');
  }

  retrieveOpenIdAuthUrlWithDocomo () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_retrieveOpenIdAuthUrlWithDocomo();
    });
  }

  send_retrieveOpenIdAuthUrlWithDocomo () {
    const output = new this.pClass(this.output);
    const args = new AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_args();
    try {
      output.writeMessageBegin('retrieveOpenIdAuthUrlWithDocomo', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_retrieveOpenIdAuthUrlWithDocomo (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('retrieveOpenIdAuthUrlWithDocomo failed: unknown result');
  }

  retrieveRequestToken (carrier) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_retrieveRequestToken(carrier);
    });
  }

  send_retrieveRequestToken (carrier) {
    const output = new this.pClass(this.output);
    const params = {
      carrier: carrier
    };
    const args = new AgeCheckService_retrieveRequestToken_args(params);
    try {
      output.writeMessageBegin('retrieveRequestToken', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_retrieveRequestToken (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AgeCheckService_retrieveRequestToken_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('retrieveRequestToken failed: unknown result');
  }
};
const AgeCheckServiceProcessor = exports.Processor = class {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_checkUserAge (seqid, input, output) {
    const args = new AgeCheckService_checkUserAge_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.checkUserAge.length === 4) {
      Promise.resolve(this._handler.checkUserAge.bind(this._handler)(
        args.carrier,
        args.sessionId,
        args.verifier,
        args.standardAge
      )).then(result => {
        const result_obj = new AgeCheckService_checkUserAge_result({success: result});
        output.writeMessageBegin("checkUserAge", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AgeCheckService_checkUserAge_result(err);
          output.writeMessageBegin("checkUserAge", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkUserAge", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.checkUserAge(args.carrier, args.sessionId, args.verifier, args.standardAge, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AgeCheckService_checkUserAge_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("checkUserAge", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkUserAge", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_checkUserAgeWithDocomo (seqid, input, output) {
    const args = new AgeCheckService_checkUserAgeWithDocomo_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.checkUserAgeWithDocomo.length === 3) {
      Promise.resolve(this._handler.checkUserAgeWithDocomo.bind(this._handler)(
        args.openIdRedirectUrl,
        args.standardAge,
        args.verifier
      )).then(result => {
        const result_obj = new AgeCheckService_checkUserAgeWithDocomo_result({success: result});
        output.writeMessageBegin("checkUserAgeWithDocomo", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AgeCheckService_checkUserAgeWithDocomo_result(err);
          output.writeMessageBegin("checkUserAgeWithDocomo", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkUserAgeWithDocomo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.checkUserAgeWithDocomo(args.openIdRedirectUrl, args.standardAge, args.verifier, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AgeCheckService_checkUserAgeWithDocomo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("checkUserAgeWithDocomo", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkUserAgeWithDocomo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_retrieveOpenIdAuthUrlWithDocomo (seqid, input, output) {
    const args = new AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.retrieveOpenIdAuthUrlWithDocomo.length === 0) {
      Promise.resolve(this._handler.retrieveOpenIdAuthUrlWithDocomo.bind(this._handler)(
      )).then(result => {
        const result_obj = new AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_result({success: result});
        output.writeMessageBegin("retrieveOpenIdAuthUrlWithDocomo", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_result(err);
          output.writeMessageBegin("retrieveOpenIdAuthUrlWithDocomo", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("retrieveOpenIdAuthUrlWithDocomo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.retrieveOpenIdAuthUrlWithDocomo((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AgeCheckService_retrieveOpenIdAuthUrlWithDocomo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("retrieveOpenIdAuthUrlWithDocomo", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("retrieveOpenIdAuthUrlWithDocomo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_retrieveRequestToken (seqid, input, output) {
    const args = new AgeCheckService_retrieveRequestToken_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.retrieveRequestToken.length === 1) {
      Promise.resolve(this._handler.retrieveRequestToken.bind(this._handler)(
        args.carrier
      )).then(result => {
        const result_obj = new AgeCheckService_retrieveRequestToken_result({success: result});
        output.writeMessageBegin("retrieveRequestToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new AgeCheckService_retrieveRequestToken_result(err);
          output.writeMessageBegin("retrieveRequestToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("retrieveRequestToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.retrieveRequestToken(args.carrier, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new AgeCheckService_retrieveRequestToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("retrieveRequestToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("retrieveRequestToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
