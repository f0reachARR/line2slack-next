//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = require('./talk_types');
//HELPER FUNCTIONS AND STRUCTURES

const SpotService_lookupByPhoneNumber_args = class {
  constructor(args) {
    this.countryAreaCode = null;
    this.phoneNumber = null;
    if (args) {
      if (args.countryAreaCode !== undefined && args.countryAreaCode !== null) {
        this.countryAreaCode = args.countryAreaCode;
      }
      if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
        this.phoneNumber = args.phoneNumber;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.countryAreaCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.phoneNumber = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SpotService_lookupByPhoneNumber_args');
    if (this.countryAreaCode !== null && this.countryAreaCode !== undefined) {
      output.writeFieldBegin('countryAreaCode', Thrift.Type.STRING, 2);
      output.writeString(this.countryAreaCode);
      output.writeFieldEnd();
    }
    if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
      output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 3);
      output.writeString(this.phoneNumber);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SpotService_lookupByPhoneNumber_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SpotPhoneNumberResponse(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SpotPhoneNumberResponse();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SpotService_lookupByPhoneNumber_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SpotService_lookupNearby_args = class {
  constructor(args) {
    this.location = null;
    this.category = null;
    this.query = null;
    this.countryAreaCode = null;
    if (args) {
      if (args.location !== undefined && args.location !== null) {
        this.location = new ttypes.Location(args.location);
      }
      if (args.category !== undefined && args.category !== null) {
        this.category = args.category;
      }
      if (args.query !== undefined && args.query !== null) {
        this.query = args.query;
      }
      if (args.countryAreaCode !== undefined && args.countryAreaCode !== null) {
        this.countryAreaCode = args.countryAreaCode;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.location = new ttypes.Location();
          this.location.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.category = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.query = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.countryAreaCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SpotService_lookupNearby_args');
    if (this.location !== null && this.location !== undefined) {
      output.writeFieldBegin('location', Thrift.Type.STRUCT, 2);
      this.location.write(output);
      output.writeFieldEnd();
    }
    if (this.category !== null && this.category !== undefined) {
      output.writeFieldBegin('category', Thrift.Type.I32, 3);
      output.writeI32(this.category);
      output.writeFieldEnd();
    }
    if (this.query !== null && this.query !== undefined) {
      output.writeFieldBegin('query', Thrift.Type.STRING, 4);
      output.writeString(this.query);
      output.writeFieldEnd();
    }
    if (this.countryAreaCode !== null && this.countryAreaCode !== undefined) {
      output.writeFieldBegin('countryAreaCode', Thrift.Type.STRING, 5);
      output.writeString(this.countryAreaCode);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SpotService_lookupNearby_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SpotNearbyResponse(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SpotNearbyResponse();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SpotService_lookupNearby_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SpotServiceClient = exports.Client = class {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  lookupByPhoneNumber (countryAreaCode, phoneNumber) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_lookupByPhoneNumber(countryAreaCode, phoneNumber);
    });
  }

  send_lookupByPhoneNumber (countryAreaCode, phoneNumber) {
    const output = new this.pClass(this.output);
    const params = {
      countryAreaCode: countryAreaCode,
      phoneNumber: phoneNumber
    };
    const args = new SpotService_lookupByPhoneNumber_args(params);
    try {
      output.writeMessageBegin('lookupByPhoneNumber', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_lookupByPhoneNumber (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new SpotService_lookupByPhoneNumber_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('lookupByPhoneNumber failed: unknown result');
  }

  lookupNearby (location, category, query, countryAreaCode) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_lookupNearby(location, category, query, countryAreaCode);
    });
  }

  send_lookupNearby (location, category, query, countryAreaCode) {
    const output = new this.pClass(this.output);
    const params = {
      location: location,
      category: category,
      query: query,
      countryAreaCode: countryAreaCode
    };
    const args = new SpotService_lookupNearby_args(params);
    try {
      output.writeMessageBegin('lookupNearby', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_lookupNearby (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new SpotService_lookupNearby_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('lookupNearby failed: unknown result');
  }
};
const SpotServiceProcessor = exports.Processor = class {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_lookupByPhoneNumber (seqid, input, output) {
    const args = new SpotService_lookupByPhoneNumber_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.lookupByPhoneNumber.length === 2) {
      Promise.resolve(this._handler.lookupByPhoneNumber.bind(this._handler)(
        args.countryAreaCode,
        args.phoneNumber
      )).then(result => {
        const result_obj = new SpotService_lookupByPhoneNumber_result({success: result});
        output.writeMessageBegin("lookupByPhoneNumber", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new SpotService_lookupByPhoneNumber_result(err);
          output.writeMessageBegin("lookupByPhoneNumber", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookupByPhoneNumber", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.lookupByPhoneNumber(args.countryAreaCode, args.phoneNumber, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new SpotService_lookupByPhoneNumber_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("lookupByPhoneNumber", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookupByPhoneNumber", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_lookupNearby (seqid, input, output) {
    const args = new SpotService_lookupNearby_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.lookupNearby.length === 4) {
      Promise.resolve(this._handler.lookupNearby.bind(this._handler)(
        args.location,
        args.category,
        args.query,
        args.countryAreaCode
      )).then(result => {
        const result_obj = new SpotService_lookupNearby_result({success: result});
        output.writeMessageBegin("lookupNearby", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new SpotService_lookupNearby_result(err);
          output.writeMessageBegin("lookupNearby", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookupNearby", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.lookupNearby(args.location, args.category, args.query, args.countryAreaCode, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new SpotService_lookupNearby_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("lookupNearby", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookupNearby", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
