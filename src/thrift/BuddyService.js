//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = require('./talk_types');
//HELPER FUNCTIONS AND STRUCTURES

const BuddyService_getBuddyStatusBar_args = class {
  constructor(args) {
    this.buddyMid = null;
    this.revision = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyStatusBar_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 2);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyStatusBar_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyStatusBar(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyStatusBar();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyStatusBar_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getRichMenuContents_args = class {
  constructor(args) {
    this.buddyMid = null;
    this.revision = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getRichMenuContents_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 2);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getRichMenuContents_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyRichMenuContents(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyRichMenuContents();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getRichMenuContents_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyProfilePopup_args = class {
  constructor(args) {
    this.buddyMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyProfilePopup_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 4);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyProfilePopup_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyProfilePopup(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyProfilePopup();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyProfilePopup_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getPopularBuddyBanner_args = class {
  constructor(args) {
    this.language = null;
    this.country = null;
    this.applicationType = null;
    this.resourceSpecification = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.applicationType !== undefined && args.applicationType !== null) {
        this.applicationType = args.applicationType;
      }
      if (args.resourceSpecification !== undefined && args.resourceSpecification !== null) {
        this.resourceSpecification = args.resourceSpecification;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.applicationType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.resourceSpecification = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getPopularBuddyBanner_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.applicationType !== null && this.applicationType !== undefined) {
      output.writeFieldBegin('applicationType', Thrift.Type.I32, 4);
      output.writeI32(this.applicationType);
      output.writeFieldEnd();
    }
    if (this.resourceSpecification !== null && this.resourceSpecification !== undefined) {
      output.writeFieldBegin('resourceSpecification', Thrift.Type.STRING, 5);
      output.writeString(this.resourceSpecification);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getPopularBuddyBanner_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyBanner(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyBanner();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getPopularBuddyBanner_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getPopularBuddyLists_args = class {
  constructor(args) {
    this.language = null;
    this.country = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getPopularBuddyLists_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getPopularBuddyLists_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.BuddyList]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp31624 = input.readListBegin();
          const _size1623 = _rtmp31624.size || 0;
          for (let _i1625 = 0; _i1625 < _size1623; ++_i1625) {
            let elem1626 = null;
            elem1626 = new ttypes.BuddyList();
            elem1626.read(input);
            this.success.push(elem1626);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getPopularBuddyLists_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter1627 in this.success) {
        if (this.success.hasOwnProperty(iter1627)) {
          iter1627 = this.success[iter1627];
          iter1627.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_findBuddyContactsByQuery_args = class {
  constructor(args) {
    this.language = null;
    this.country = null;
    this.query = null;
    this.fromIndex = null;
    this.count = null;
    this.requestSource = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.query !== undefined && args.query !== null) {
        this.query = args.query;
      }
      if (args.fromIndex !== undefined && args.fromIndex !== null) {
        this.fromIndex = args.fromIndex;
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
      if (args.requestSource !== undefined && args.requestSource !== null) {
        this.requestSource = args.requestSource;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.query = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.fromIndex = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.requestSource = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_findBuddyContactsByQuery_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.query !== null && this.query !== undefined) {
      output.writeFieldBegin('query', Thrift.Type.STRING, 4);
      output.writeString(this.query);
      output.writeFieldEnd();
    }
    if (this.fromIndex !== null && this.fromIndex !== undefined) {
      output.writeFieldBegin('fromIndex', Thrift.Type.I32, 5);
      output.writeI32(this.fromIndex);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 6);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    if (this.requestSource !== null && this.requestSource !== undefined) {
      output.writeFieldBegin('requestSource', Thrift.Type.I32, 7);
      output.writeI32(this.requestSource);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_findBuddyContactsByQuery_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.BuddySearchResult]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp31629 = input.readListBegin();
          const _size1628 = _rtmp31629.size || 0;
          for (let _i1630 = 0; _i1630 < _size1628; ++_i1630) {
            let elem1631 = null;
            elem1631 = new ttypes.BuddySearchResult();
            elem1631.read(input);
            this.success.push(elem1631);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_findBuddyContactsByQuery_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter1632 in this.success) {
        if (this.success.hasOwnProperty(iter1632)) {
          iter1632 = this.success[iter1632];
          iter1632.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyNewsView_args = class {
  constructor(args) {
    this.language = null;
    this.country = null;
    this.offset = null;
    this.limit = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.offset !== undefined && args.offset !== null) {
        this.offset = args.offset;
      }
      if (args.limit !== undefined && args.limit !== null) {
        this.limit = args.limit;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.offset = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.limit = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyNewsView_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.offset !== null && this.offset !== undefined) {
      output.writeFieldBegin('offset', Thrift.Type.I64, 4);
      output.writeI64(this.offset);
      output.writeFieldEnd();
    }
    if (this.limit !== null && this.limit !== undefined) {
      output.writeFieldBegin('limit', Thrift.Type.I32, 5);
      output.writeI32(this.limit);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyNewsView_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyNewsView(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyNewsView();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyNewsView_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyContacts_args = class {
  constructor(args) {
    this.language = null;
    this.country = null;
    this.classification = null;
    this.fromIndex = null;
    this.count = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.classification !== undefined && args.classification !== null) {
        this.classification = args.classification;
      }
      if (args.fromIndex !== undefined && args.fromIndex !== null) {
        this.fromIndex = args.fromIndex;
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.classification = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.fromIndex = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyContacts_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.classification !== null && this.classification !== undefined) {
      output.writeFieldBegin('classification', Thrift.Type.STRING, 4);
      output.writeString(this.classification);
      output.writeFieldEnd();
    }
    if (this.fromIndex !== null && this.fromIndex !== undefined) {
      output.writeFieldBegin('fromIndex', Thrift.Type.I32, 5);
      output.writeI32(this.fromIndex);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 6);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyContacts_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.Contact]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp31634 = input.readListBegin();
          const _size1633 = _rtmp31634.size || 0;
          for (let _i1635 = 0; _i1635 < _size1633; ++_i1635) {
            let elem1636 = null;
            elem1636 = new ttypes.Contact();
            elem1636.read(input);
            this.success.push(elem1636);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyContacts_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter1637 in this.success) {
        if (this.success.hasOwnProperty(iter1637)) {
          iter1637 = this.success[iter1637];
          iter1637.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyCollectionEntries_args = class {
  constructor(args) {
    this.language = null;
    this.country = null;
    this.collection = null;
    this.offset = null;
    this.limit = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
      if (args.collection !== undefined && args.collection !== null) {
        this.collection = args.collection;
      }
      if (args.offset !== undefined && args.offset !== null) {
        this.offset = args.offset;
      }
      if (args.limit !== undefined && args.limit !== null) {
        this.limit = args.limit;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.collection = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.offset = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.limit = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyCollectionEntries_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    if (this.collection !== null && this.collection !== undefined) {
      output.writeFieldBegin('collection', Thrift.Type.I32, 4);
      output.writeI32(this.collection);
      output.writeFieldEnd();
    }
    if (this.offset !== null && this.offset !== undefined) {
      output.writeFieldBegin('offset', Thrift.Type.I32, 5);
      output.writeI32(this.offset);
      output.writeFieldEnd();
    }
    if (this.limit !== null && this.limit !== undefined) {
      output.writeFieldBegin('limit', Thrift.Type.I32, 6);
      output.writeI32(this.limit);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyCollectionEntries_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.BuddyCollectionEntry]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp31639 = input.readListBegin();
          const _size1638 = _rtmp31639.size || 0;
          for (let _i1640 = 0; _i1640 < _size1638; ++_i1640) {
            let elem1641 = null;
            elem1641 = new ttypes.BuddyCollectionEntry();
            elem1641.read(input);
            this.success.push(elem1641);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyCollectionEntries_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter1642 in this.success) {
        if (this.success.hasOwnProperty(iter1642)) {
          iter1642 = this.success[iter1642];
          iter1642.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getLatestBuddyNewsTimestamp_args = class {
  constructor(args) {
    this.country = null;
    if (args) {
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getLatestBuddyNewsTimestamp_args');
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getLatestBuddyNewsTimestamp_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getLatestBuddyNewsTimestamp_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyChatBar_args = class {
  constructor(args) {
    this.buddyMid = null;
    this.revision = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
      if (args.revision !== undefined && args.revision !== null) {
        this.revision = args.revision;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.revision = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyChatBar_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    if (this.revision !== null && this.revision !== undefined) {
      output.writeFieldBegin('revision', Thrift.Type.I64, 2);
      output.writeI64(this.revision);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyChatBar_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyChatBar(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyChatBar();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyChatBar_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getCountriesServingOfficialAccountPromotionV2_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getCountriesServingOfficialAccountPromotionV2_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getCountriesServingOfficialAccountPromotionV2_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.SET) {
          this.success = [];
          const _rtmp31644 = input.readSetBegin();
          const _size1643 = _rtmp31644.size || 0;
          for (let _i1645 = 0; _i1645 < _size1643; ++_i1645) {
            let elem1646 = null;
            elem1646 = input.readString();
            this.success.push(elem1646);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getCountriesServingOfficialAccountPromotionV2_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (let iter1647 in this.success) {
        if (this.success.hasOwnProperty(iter1647)) {
          iter1647 = this.success[iter1647];
          output.writeString(iter1647);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyDetail_args = class {
  constructor(args) {
    this.buddyMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyDetail_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 4);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyDetail_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyDetail(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyDetail();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyDetail_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyOnAir_args = class {
  constructor(args) {
    this.buddyMid = null;
    if (args) {
      if (args.buddyMid !== undefined && args.buddyMid !== null) {
        this.buddyMid = args.buddyMid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.buddyMid = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyOnAir_args');
    if (this.buddyMid !== null && this.buddyMid !== undefined) {
      output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 4);
      output.writeString(this.buddyMid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyOnAir_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyOnAir(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyOnAir();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyOnAir_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getNewlyReleasedBuddyIds_args = class {
  constructor(args) {
    this.country = null;
    if (args) {
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getNewlyReleasedBuddyIds_args');
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getNewlyReleasedBuddyIds_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyMap(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          this.success = {};
          const _rtmp31649 = input.readMapBegin();
          const _size1648 = _rtmp31649.size || 0;
          for (let _i1650 = 0; _i1650 < _size1648; ++_i1650) {
            let key1651 = null;
            let val1652 = null;
            key1651 = input.readString();
            val1652 = input.readI64();
            this.success[key1651] = val1652;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getNewlyReleasedBuddyIds_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
      for (let kiter1653 in this.success) {
        if (this.success.hasOwnProperty(kiter1653)) {
          let viter1654 = this.success[kiter1653];
          output.writeString(kiter1653);
          output.writeI64(viter1654);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyCategoryView_args = class {
  constructor(args) {
    this.language = null;
    this.country = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyCategoryView_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyCategoryView_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyCategoryView(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyCategoryView();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyCategoryView_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getCountriesHavingBuddy_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getCountriesHavingBuddy_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getCountriesHavingBuddy_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp31656 = input.readListBegin();
          const _size1655 = _rtmp31656.size || 0;
          for (let _i1657 = 0; _i1657 < _size1655; ++_i1657) {
            let elem1658 = null;
            elem1658 = input.readString();
            this.success.push(elem1658);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getCountriesHavingBuddy_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter1659 in this.success) {
        if (this.success.hasOwnProperty(iter1659)) {
          iter1659 = this.success[iter1659];
          output.writeString(iter1659);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getPromotedBuddyContacts_args = class {
  constructor(args) {
    this.language = null;
    this.country = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getPromotedBuddyContacts_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getPromotedBuddyContacts_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.Contact]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp31661 = input.readListBegin();
          const _size1660 = _rtmp31661.size || 0;
          for (let _i1662 = 0; _i1662 < _size1660; ++_i1662) {
            let elem1663 = null;
            elem1663 = new ttypes.Contact();
            elem1663.read(input);
            this.success.push(elem1663);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getPromotedBuddyContacts_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter1664 in this.success) {
        if (this.success.hasOwnProperty(iter1664)) {
          iter1664 = this.success[iter1664];
          iter1664.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyTopView_args = class {
  constructor(args) {
    this.language = null;
    this.country = null;
    if (args) {
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.country !== undefined && args.country !== null) {
        this.country = args.country;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.country = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyTopView_args');
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.country !== null && this.country !== undefined) {
      output.writeFieldBegin('country', Thrift.Type.STRING, 3);
      output.writeString(this.country);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyService_getBuddyTopView_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.BuddyTopView(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.BuddyTopView();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('BuddyService_getBuddyTopView_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const BuddyServiceClient = exports.Client = class {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  getBuddyStatusBar (buddyMid, revision) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyStatusBar(buddyMid, revision);
    });
  }

  send_getBuddyStatusBar (buddyMid, revision) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid,
      revision: revision
    };
    const args = new BuddyService_getBuddyStatusBar_args(params);
    try {
      output.writeMessageBegin('getBuddyStatusBar', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyStatusBar (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getBuddyStatusBar_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyStatusBar failed: unknown result');
  }

  getRichMenuContents (buddyMid, revision) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getRichMenuContents(buddyMid, revision);
    });
  }

  send_getRichMenuContents (buddyMid, revision) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid,
      revision: revision
    };
    const args = new BuddyService_getRichMenuContents_args(params);
    try {
      output.writeMessageBegin('getRichMenuContents', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getRichMenuContents (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getRichMenuContents_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getRichMenuContents failed: unknown result');
  }

  getBuddyProfilePopup (buddyMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyProfilePopup(buddyMid);
    });
  }

  send_getBuddyProfilePopup (buddyMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid
    };
    const args = new BuddyService_getBuddyProfilePopup_args(params);
    try {
      output.writeMessageBegin('getBuddyProfilePopup', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyProfilePopup (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getBuddyProfilePopup_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyProfilePopup failed: unknown result');
  }

  getPopularBuddyBanner (language, country, applicationType, resourceSpecification) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPopularBuddyBanner(language, country, applicationType, resourceSpecification);
    });
  }

  send_getPopularBuddyBanner (language, country, applicationType, resourceSpecification) {
    const output = new this.pClass(this.output);
    const params = {
      language: language,
      country: country,
      applicationType: applicationType,
      resourceSpecification: resourceSpecification
    };
    const args = new BuddyService_getPopularBuddyBanner_args(params);
    try {
      output.writeMessageBegin('getPopularBuddyBanner', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPopularBuddyBanner (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getPopularBuddyBanner_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPopularBuddyBanner failed: unknown result');
  }

  getPopularBuddyLists (language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPopularBuddyLists(language, country);
    });
  }

  send_getPopularBuddyLists (language, country) {
    const output = new this.pClass(this.output);
    const params = {
      language: language,
      country: country
    };
    const args = new BuddyService_getPopularBuddyLists_args(params);
    try {
      output.writeMessageBegin('getPopularBuddyLists', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPopularBuddyLists (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getPopularBuddyLists_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPopularBuddyLists failed: unknown result');
  }

  findBuddyContactsByQuery (language, country, query, fromIndex, count, requestSource) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource);
    });
  }

  send_findBuddyContactsByQuery (language, country, query, fromIndex, count, requestSource) {
    const output = new this.pClass(this.output);
    const params = {
      language: language,
      country: country,
      query: query,
      fromIndex: fromIndex,
      count: count,
      requestSource: requestSource
    };
    const args = new BuddyService_findBuddyContactsByQuery_args(params);
    try {
      output.writeMessageBegin('findBuddyContactsByQuery', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_findBuddyContactsByQuery (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_findBuddyContactsByQuery_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findBuddyContactsByQuery failed: unknown result');
  }

  getBuddyNewsView (language, country, offset, limit) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyNewsView(language, country, offset, limit);
    });
  }

  send_getBuddyNewsView (language, country, offset, limit) {
    const output = new this.pClass(this.output);
    const params = {
      language: language,
      country: country,
      offset: offset,
      limit: limit
    };
    const args = new BuddyService_getBuddyNewsView_args(params);
    try {
      output.writeMessageBegin('getBuddyNewsView', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyNewsView (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getBuddyNewsView_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyNewsView failed: unknown result');
  }

  getBuddyContacts (language, country, classification, fromIndex, count) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyContacts(language, country, classification, fromIndex, count);
    });
  }

  send_getBuddyContacts (language, country, classification, fromIndex, count) {
    const output = new this.pClass(this.output);
    const params = {
      language: language,
      country: country,
      classification: classification,
      fromIndex: fromIndex,
      count: count
    };
    const args = new BuddyService_getBuddyContacts_args(params);
    try {
      output.writeMessageBegin('getBuddyContacts', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyContacts (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getBuddyContacts_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyContacts failed: unknown result');
  }

  getBuddyCollectionEntries (language, country, collection, offset, limit) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyCollectionEntries(language, country, collection, offset, limit);
    });
  }

  send_getBuddyCollectionEntries (language, country, collection, offset, limit) {
    const output = new this.pClass(this.output);
    const params = {
      language: language,
      country: country,
      collection: collection,
      offset: offset,
      limit: limit
    };
    const args = new BuddyService_getBuddyCollectionEntries_args(params);
    try {
      output.writeMessageBegin('getBuddyCollectionEntries', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyCollectionEntries (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getBuddyCollectionEntries_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyCollectionEntries failed: unknown result');
  }

  getLatestBuddyNewsTimestamp (country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getLatestBuddyNewsTimestamp(country);
    });
  }

  send_getLatestBuddyNewsTimestamp (country) {
    const output = new this.pClass(this.output);
    const params = {
      country: country
    };
    const args = new BuddyService_getLatestBuddyNewsTimestamp_args(params);
    try {
      output.writeMessageBegin('getLatestBuddyNewsTimestamp', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getLatestBuddyNewsTimestamp (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getLatestBuddyNewsTimestamp_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getLatestBuddyNewsTimestamp failed: unknown result');
  }

  getBuddyChatBar (buddyMid, revision) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyChatBar(buddyMid, revision);
    });
  }

  send_getBuddyChatBar (buddyMid, revision) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid,
      revision: revision
    };
    const args = new BuddyService_getBuddyChatBar_args(params);
    try {
      output.writeMessageBegin('getBuddyChatBar', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyChatBar (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getBuddyChatBar_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyChatBar failed: unknown result');
  }

  getCountriesServingOfficialAccountPromotionV2 () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCountriesServingOfficialAccountPromotionV2();
    });
  }

  send_getCountriesServingOfficialAccountPromotionV2 () {
    const output = new this.pClass(this.output);
    const args = new BuddyService_getCountriesServingOfficialAccountPromotionV2_args();
    try {
      output.writeMessageBegin('getCountriesServingOfficialAccountPromotionV2', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCountriesServingOfficialAccountPromotionV2 (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getCountriesServingOfficialAccountPromotionV2_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCountriesServingOfficialAccountPromotionV2 failed: unknown result');
  }

  getBuddyDetail (buddyMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyDetail(buddyMid);
    });
  }

  send_getBuddyDetail (buddyMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid
    };
    const args = new BuddyService_getBuddyDetail_args(params);
    try {
      output.writeMessageBegin('getBuddyDetail', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyDetail (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getBuddyDetail_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyDetail failed: unknown result');
  }

  getBuddyOnAir (buddyMid) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyOnAir(buddyMid);
    });
  }

  send_getBuddyOnAir (buddyMid) {
    const output = new this.pClass(this.output);
    const params = {
      buddyMid: buddyMid
    };
    const args = new BuddyService_getBuddyOnAir_args(params);
    try {
      output.writeMessageBegin('getBuddyOnAir', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyOnAir (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getBuddyOnAir_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyOnAir failed: unknown result');
  }

  getNewlyReleasedBuddyIds (country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getNewlyReleasedBuddyIds(country);
    });
  }

  send_getNewlyReleasedBuddyIds (country) {
    const output = new this.pClass(this.output);
    const params = {
      country: country
    };
    const args = new BuddyService_getNewlyReleasedBuddyIds_args(params);
    try {
      output.writeMessageBegin('getNewlyReleasedBuddyIds', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getNewlyReleasedBuddyIds (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getNewlyReleasedBuddyIds_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getNewlyReleasedBuddyIds failed: unknown result');
  }

  getBuddyCategoryView (language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyCategoryView(language, country);
    });
  }

  send_getBuddyCategoryView (language, country) {
    const output = new this.pClass(this.output);
    const params = {
      language: language,
      country: country
    };
    const args = new BuddyService_getBuddyCategoryView_args(params);
    try {
      output.writeMessageBegin('getBuddyCategoryView', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyCategoryView (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getBuddyCategoryView_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyCategoryView failed: unknown result');
  }

  getCountriesHavingBuddy () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCountriesHavingBuddy();
    });
  }

  send_getCountriesHavingBuddy () {
    const output = new this.pClass(this.output);
    const args = new BuddyService_getCountriesHavingBuddy_args();
    try {
      output.writeMessageBegin('getCountriesHavingBuddy', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCountriesHavingBuddy (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getCountriesHavingBuddy_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCountriesHavingBuddy failed: unknown result');
  }

  getPromotedBuddyContacts (language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPromotedBuddyContacts(language, country);
    });
  }

  send_getPromotedBuddyContacts (language, country) {
    const output = new this.pClass(this.output);
    const params = {
      language: language,
      country: country
    };
    const args = new BuddyService_getPromotedBuddyContacts_args(params);
    try {
      output.writeMessageBegin('getPromotedBuddyContacts', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPromotedBuddyContacts (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getPromotedBuddyContacts_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPromotedBuddyContacts failed: unknown result');
  }

  getBuddyTopView (language, country) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getBuddyTopView(language, country);
    });
  }

  send_getBuddyTopView (language, country) {
    const output = new this.pClass(this.output);
    const params = {
      language: language,
      country: country
    };
    const args = new BuddyService_getBuddyTopView_args(params);
    try {
      output.writeMessageBegin('getBuddyTopView', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getBuddyTopView (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new BuddyService_getBuddyTopView_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getBuddyTopView failed: unknown result');
  }
};
const BuddyServiceProcessor = exports.Processor = class {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_getBuddyStatusBar (seqid, input, output) {
    const args = new BuddyService_getBuddyStatusBar_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyStatusBar.length === 2) {
      Promise.resolve(this._handler.getBuddyStatusBar.bind(this._handler)(
        args.buddyMid,
        args.revision
      )).then(result => {
        const result_obj = new BuddyService_getBuddyStatusBar_result({success: result});
        output.writeMessageBegin("getBuddyStatusBar", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getBuddyStatusBar_result(err);
          output.writeMessageBegin("getBuddyStatusBar", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyStatusBar", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyStatusBar(args.buddyMid, args.revision, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getBuddyStatusBar_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyStatusBar", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyStatusBar", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getRichMenuContents (seqid, input, output) {
    const args = new BuddyService_getRichMenuContents_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getRichMenuContents.length === 2) {
      Promise.resolve(this._handler.getRichMenuContents.bind(this._handler)(
        args.buddyMid,
        args.revision
      )).then(result => {
        const result_obj = new BuddyService_getRichMenuContents_result({success: result});
        output.writeMessageBegin("getRichMenuContents", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getRichMenuContents_result(err);
          output.writeMessageBegin("getRichMenuContents", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRichMenuContents", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getRichMenuContents(args.buddyMid, args.revision, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getRichMenuContents_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getRichMenuContents", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRichMenuContents", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBuddyProfilePopup (seqid, input, output) {
    const args = new BuddyService_getBuddyProfilePopup_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyProfilePopup.length === 1) {
      Promise.resolve(this._handler.getBuddyProfilePopup.bind(this._handler)(
        args.buddyMid
      )).then(result => {
        const result_obj = new BuddyService_getBuddyProfilePopup_result({success: result});
        output.writeMessageBegin("getBuddyProfilePopup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getBuddyProfilePopup_result(err);
          output.writeMessageBegin("getBuddyProfilePopup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyProfilePopup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyProfilePopup(args.buddyMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getBuddyProfilePopup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyProfilePopup", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyProfilePopup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPopularBuddyBanner (seqid, input, output) {
    const args = new BuddyService_getPopularBuddyBanner_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPopularBuddyBanner.length === 4) {
      Promise.resolve(this._handler.getPopularBuddyBanner.bind(this._handler)(
        args.language,
        args.country,
        args.applicationType,
        args.resourceSpecification
      )).then(result => {
        const result_obj = new BuddyService_getPopularBuddyBanner_result({success: result});
        output.writeMessageBegin("getPopularBuddyBanner", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getPopularBuddyBanner_result(err);
          output.writeMessageBegin("getPopularBuddyBanner", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPopularBuddyBanner", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPopularBuddyBanner(args.language, args.country, args.applicationType, args.resourceSpecification, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getPopularBuddyBanner_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPopularBuddyBanner", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPopularBuddyBanner", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPopularBuddyLists (seqid, input, output) {
    const args = new BuddyService_getPopularBuddyLists_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPopularBuddyLists.length === 2) {
      Promise.resolve(this._handler.getPopularBuddyLists.bind(this._handler)(
        args.language,
        args.country
      )).then(result => {
        const result_obj = new BuddyService_getPopularBuddyLists_result({success: result});
        output.writeMessageBegin("getPopularBuddyLists", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getPopularBuddyLists_result(err);
          output.writeMessageBegin("getPopularBuddyLists", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPopularBuddyLists", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPopularBuddyLists(args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getPopularBuddyLists_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPopularBuddyLists", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPopularBuddyLists", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_findBuddyContactsByQuery (seqid, input, output) {
    const args = new BuddyService_findBuddyContactsByQuery_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findBuddyContactsByQuery.length === 6) {
      Promise.resolve(this._handler.findBuddyContactsByQuery.bind(this._handler)(
        args.language,
        args.country,
        args.query,
        args.fromIndex,
        args.count,
        args.requestSource
      )).then(result => {
        const result_obj = new BuddyService_findBuddyContactsByQuery_result({success: result});
        output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_findBuddyContactsByQuery_result(err);
          output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.findBuddyContactsByQuery(args.language, args.country, args.query, args.fromIndex, args.count, args.requestSource, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_findBuddyContactsByQuery_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBuddyNewsView (seqid, input, output) {
    const args = new BuddyService_getBuddyNewsView_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyNewsView.length === 4) {
      Promise.resolve(this._handler.getBuddyNewsView.bind(this._handler)(
        args.language,
        args.country,
        args.offset,
        args.limit
      )).then(result => {
        const result_obj = new BuddyService_getBuddyNewsView_result({success: result});
        output.writeMessageBegin("getBuddyNewsView", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getBuddyNewsView_result(err);
          output.writeMessageBegin("getBuddyNewsView", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyNewsView", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyNewsView(args.language, args.country, args.offset, args.limit, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getBuddyNewsView_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyNewsView", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyNewsView", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBuddyContacts (seqid, input, output) {
    const args = new BuddyService_getBuddyContacts_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyContacts.length === 5) {
      Promise.resolve(this._handler.getBuddyContacts.bind(this._handler)(
        args.language,
        args.country,
        args.classification,
        args.fromIndex,
        args.count
      )).then(result => {
        const result_obj = new BuddyService_getBuddyContacts_result({success: result});
        output.writeMessageBegin("getBuddyContacts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getBuddyContacts_result(err);
          output.writeMessageBegin("getBuddyContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyContacts(args.language, args.country, args.classification, args.fromIndex, args.count, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getBuddyContacts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBuddyCollectionEntries (seqid, input, output) {
    const args = new BuddyService_getBuddyCollectionEntries_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyCollectionEntries.length === 5) {
      Promise.resolve(this._handler.getBuddyCollectionEntries.bind(this._handler)(
        args.language,
        args.country,
        args.collection,
        args.offset,
        args.limit
      )).then(result => {
        const result_obj = new BuddyService_getBuddyCollectionEntries_result({success: result});
        output.writeMessageBegin("getBuddyCollectionEntries", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getBuddyCollectionEntries_result(err);
          output.writeMessageBegin("getBuddyCollectionEntries", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyCollectionEntries", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyCollectionEntries(args.language, args.country, args.collection, args.offset, args.limit, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getBuddyCollectionEntries_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyCollectionEntries", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyCollectionEntries", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getLatestBuddyNewsTimestamp (seqid, input, output) {
    const args = new BuddyService_getLatestBuddyNewsTimestamp_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getLatestBuddyNewsTimestamp.length === 1) {
      Promise.resolve(this._handler.getLatestBuddyNewsTimestamp.bind(this._handler)(
        args.country
      )).then(result => {
        const result_obj = new BuddyService_getLatestBuddyNewsTimestamp_result({success: result});
        output.writeMessageBegin("getLatestBuddyNewsTimestamp", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getLatestBuddyNewsTimestamp_result(err);
          output.writeMessageBegin("getLatestBuddyNewsTimestamp", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLatestBuddyNewsTimestamp", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getLatestBuddyNewsTimestamp(args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getLatestBuddyNewsTimestamp_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getLatestBuddyNewsTimestamp", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLatestBuddyNewsTimestamp", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBuddyChatBar (seqid, input, output) {
    const args = new BuddyService_getBuddyChatBar_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyChatBar.length === 2) {
      Promise.resolve(this._handler.getBuddyChatBar.bind(this._handler)(
        args.buddyMid,
        args.revision
      )).then(result => {
        const result_obj = new BuddyService_getBuddyChatBar_result({success: result});
        output.writeMessageBegin("getBuddyChatBar", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getBuddyChatBar_result(err);
          output.writeMessageBegin("getBuddyChatBar", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyChatBar", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyChatBar(args.buddyMid, args.revision, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getBuddyChatBar_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyChatBar", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyChatBar", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCountriesServingOfficialAccountPromotionV2 (seqid, input, output) {
    const args = new BuddyService_getCountriesServingOfficialAccountPromotionV2_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCountriesServingOfficialAccountPromotionV2.length === 0) {
      Promise.resolve(this._handler.getCountriesServingOfficialAccountPromotionV2.bind(this._handler)(
      )).then(result => {
        const result_obj = new BuddyService_getCountriesServingOfficialAccountPromotionV2_result({success: result});
        output.writeMessageBegin("getCountriesServingOfficialAccountPromotionV2", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getCountriesServingOfficialAccountPromotionV2_result(err);
          output.writeMessageBegin("getCountriesServingOfficialAccountPromotionV2", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCountriesServingOfficialAccountPromotionV2", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCountriesServingOfficialAccountPromotionV2((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getCountriesServingOfficialAccountPromotionV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCountriesServingOfficialAccountPromotionV2", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCountriesServingOfficialAccountPromotionV2", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBuddyDetail (seqid, input, output) {
    const args = new BuddyService_getBuddyDetail_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyDetail.length === 1) {
      Promise.resolve(this._handler.getBuddyDetail.bind(this._handler)(
        args.buddyMid
      )).then(result => {
        const result_obj = new BuddyService_getBuddyDetail_result({success: result});
        output.writeMessageBegin("getBuddyDetail", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getBuddyDetail_result(err);
          output.writeMessageBegin("getBuddyDetail", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyDetail", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyDetail(args.buddyMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getBuddyDetail_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyDetail", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyDetail", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBuddyOnAir (seqid, input, output) {
    const args = new BuddyService_getBuddyOnAir_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyOnAir.length === 1) {
      Promise.resolve(this._handler.getBuddyOnAir.bind(this._handler)(
        args.buddyMid
      )).then(result => {
        const result_obj = new BuddyService_getBuddyOnAir_result({success: result});
        output.writeMessageBegin("getBuddyOnAir", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getBuddyOnAir_result(err);
          output.writeMessageBegin("getBuddyOnAir", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyOnAir", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyOnAir(args.buddyMid, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getBuddyOnAir_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyOnAir", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyOnAir", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getNewlyReleasedBuddyIds (seqid, input, output) {
    const args = new BuddyService_getNewlyReleasedBuddyIds_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getNewlyReleasedBuddyIds.length === 1) {
      Promise.resolve(this._handler.getNewlyReleasedBuddyIds.bind(this._handler)(
        args.country
      )).then(result => {
        const result_obj = new BuddyService_getNewlyReleasedBuddyIds_result({success: result});
        output.writeMessageBegin("getNewlyReleasedBuddyIds", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getNewlyReleasedBuddyIds_result(err);
          output.writeMessageBegin("getNewlyReleasedBuddyIds", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNewlyReleasedBuddyIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getNewlyReleasedBuddyIds(args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getNewlyReleasedBuddyIds_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getNewlyReleasedBuddyIds", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNewlyReleasedBuddyIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBuddyCategoryView (seqid, input, output) {
    const args = new BuddyService_getBuddyCategoryView_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyCategoryView.length === 2) {
      Promise.resolve(this._handler.getBuddyCategoryView.bind(this._handler)(
        args.language,
        args.country
      )).then(result => {
        const result_obj = new BuddyService_getBuddyCategoryView_result({success: result});
        output.writeMessageBegin("getBuddyCategoryView", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getBuddyCategoryView_result(err);
          output.writeMessageBegin("getBuddyCategoryView", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyCategoryView", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyCategoryView(args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getBuddyCategoryView_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyCategoryView", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyCategoryView", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCountriesHavingBuddy (seqid, input, output) {
    const args = new BuddyService_getCountriesHavingBuddy_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCountriesHavingBuddy.length === 0) {
      Promise.resolve(this._handler.getCountriesHavingBuddy.bind(this._handler)(
      )).then(result => {
        const result_obj = new BuddyService_getCountriesHavingBuddy_result({success: result});
        output.writeMessageBegin("getCountriesHavingBuddy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getCountriesHavingBuddy_result(err);
          output.writeMessageBegin("getCountriesHavingBuddy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCountriesHavingBuddy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCountriesHavingBuddy((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getCountriesHavingBuddy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCountriesHavingBuddy", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCountriesHavingBuddy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getPromotedBuddyContacts (seqid, input, output) {
    const args = new BuddyService_getPromotedBuddyContacts_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPromotedBuddyContacts.length === 2) {
      Promise.resolve(this._handler.getPromotedBuddyContacts.bind(this._handler)(
        args.language,
        args.country
      )).then(result => {
        const result_obj = new BuddyService_getPromotedBuddyContacts_result({success: result});
        output.writeMessageBegin("getPromotedBuddyContacts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getPromotedBuddyContacts_result(err);
          output.writeMessageBegin("getPromotedBuddyContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPromotedBuddyContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPromotedBuddyContacts(args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getPromotedBuddyContacts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPromotedBuddyContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPromotedBuddyContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getBuddyTopView (seqid, input, output) {
    const args = new BuddyService_getBuddyTopView_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getBuddyTopView.length === 2) {
      Promise.resolve(this._handler.getBuddyTopView.bind(this._handler)(
        args.language,
        args.country
      )).then(result => {
        const result_obj = new BuddyService_getBuddyTopView_result({success: result});
        output.writeMessageBegin("getBuddyTopView", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new BuddyService_getBuddyTopView_result(err);
          output.writeMessageBegin("getBuddyTopView", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyTopView", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getBuddyTopView(args.language, args.country, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new BuddyService_getBuddyTopView_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getBuddyTopView", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyTopView", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
