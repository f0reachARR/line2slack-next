//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = require('./talk_types');
//HELPER FUNCTIONS AND STRUCTURES

const ExternalInterlockService_getPlaceSearchInfo_args = class {
  constructor(args) {
    this.provider = null;
    this.keyword = null;
    this.clientLocale = null;
    this.latitude = null;
    this.longitude = null;
    this.radius = null;
    if (args) {
      if (args.provider !== undefined && args.provider !== null) {
        this.provider = args.provider;
      }
      if (args.keyword !== undefined && args.keyword !== null) {
        this.keyword = args.keyword;
      }
      if (args.clientLocale !== undefined && args.clientLocale !== null) {
        this.clientLocale = args.clientLocale;
      }
      if (args.latitude !== undefined && args.latitude !== null) {
        this.latitude = args.latitude;
      }
      if (args.longitude !== undefined && args.longitude !== null) {
        this.longitude = args.longitude;
      }
      if (args.radius !== undefined && args.radius !== null) {
        this.radius = args.radius;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.provider = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.keyword = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.clientLocale = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.DOUBLE) {
          this.latitude = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.DOUBLE) {
          this.longitude = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.radius = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ExternalInterlockService_getPlaceSearchInfo_args');
    if (this.provider !== null && this.provider !== undefined) {
      output.writeFieldBegin('provider', Thrift.Type.I32, 2);
      output.writeI32(this.provider);
      output.writeFieldEnd();
    }
    if (this.keyword !== null && this.keyword !== undefined) {
      output.writeFieldBegin('keyword', Thrift.Type.STRING, 3);
      output.writeString(this.keyword);
      output.writeFieldEnd();
    }
    if (this.clientLocale !== null && this.clientLocale !== undefined) {
      output.writeFieldBegin('clientLocale', Thrift.Type.STRING, 4);
      output.writeString(this.clientLocale);
      output.writeFieldEnd();
    }
    if (this.latitude !== null && this.latitude !== undefined) {
      output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 5);
      output.writeDouble(this.latitude);
      output.writeFieldEnd();
    }
    if (this.longitude !== null && this.longitude !== undefined) {
      output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 6);
      output.writeDouble(this.longitude);
      output.writeFieldEnd();
    }
    if (this.radius !== null && this.radius !== undefined) {
      output.writeFieldBegin('radius', Thrift.Type.I32, 7);
      output.writeI32(this.radius);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ExternalInterlockService_getPlaceSearchInfo_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof ttypes.TalkException) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.PlaceSearchInfo]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3562 = input.readListBegin();
          const _size561 = _rtmp3562.size || 0;
          for (let _i563 = 0; _i563 < _size561; ++_i563) {
            let elem564 = null;
            elem564 = new ttypes.PlaceSearchInfo();
            elem564.read(input);
            this.success.push(elem564);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new ttypes.TalkException();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ExternalInterlockService_getPlaceSearchInfo_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter565 in this.success) {
        if (this.success.hasOwnProperty(iter565)) {
          iter565 = this.success[iter565];
          iter565.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ExternalInterlockServiceClient = exports.Client = class {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  getPlaceSearchInfo (provider, keyword, clientLocale, latitude, longitude, radius) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getPlaceSearchInfo(provider, keyword, clientLocale, latitude, longitude, radius);
    });
  }

  send_getPlaceSearchInfo (provider, keyword, clientLocale, latitude, longitude, radius) {
    const output = new this.pClass(this.output);
    const params = {
      provider: provider,
      keyword: keyword,
      clientLocale: clientLocale,
      latitude: latitude,
      longitude: longitude,
      radius: radius
    };
    const args = new ExternalInterlockService_getPlaceSearchInfo_args(params);
    try {
      output.writeMessageBegin('getPlaceSearchInfo', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getPlaceSearchInfo (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ExternalInterlockService_getPlaceSearchInfo_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.e) {
      return callback(result.e);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getPlaceSearchInfo failed: unknown result');
  }
};
const ExternalInterlockServiceProcessor = exports.Processor = class {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_getPlaceSearchInfo (seqid, input, output) {
    const args = new ExternalInterlockService_getPlaceSearchInfo_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getPlaceSearchInfo.length === 6) {
      Promise.resolve(this._handler.getPlaceSearchInfo.bind(this._handler)(
        args.provider,
        args.keyword,
        args.clientLocale,
        args.latitude,
        args.longitude,
        args.radius
      )).then(result => {
        const result_obj = new ExternalInterlockService_getPlaceSearchInfo_result({success: result});
        output.writeMessageBegin("getPlaceSearchInfo", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ttypes.TalkException) {
          result = new ExternalInterlockService_getPlaceSearchInfo_result(err);
          output.writeMessageBegin("getPlaceSearchInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPlaceSearchInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getPlaceSearchInfo(args.provider, args.keyword, args.clientLocale, args.latitude, args.longitude, args.radius, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
          result_obj = new ExternalInterlockService_getPlaceSearchInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getPlaceSearchInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPlaceSearchInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
